
free_rtos_serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aebc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000634  0800b050  0800b050  0001b050  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b684  0800b684  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b684  0800b684  0001b684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b68c  0800b68c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b68c  0800b68c  0001b68c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b690  0800b690  0001b690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000461c  200001e4  0800b878  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004800  0800b878  00024800  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a2b  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037f7  00000000  00000000  00039c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  0003d438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013f0  00000000  00000000  0003e9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028540  00000000  00000000  0003fd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019145  00000000  00000000  000682d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fce61  00000000  00000000  00081415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017e276  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006de8  00000000  00000000  0017e2c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b034 	.word	0x0800b034

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800b034 	.word	0x0800b034

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <sendString>:

    return str;

}

void sendString(char * str, int uart_number){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
	if(uart_number == 1)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d10b      	bne.n	8001020 <sendString+0x28>
		HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen(str) ,HAL_MAX_DELAY );
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff f8e1 	bl	80001d0 <strlen>
 800100e:	4603      	mov	r3, r0
 8001010:	b29a      	uxth	r2, r3
 8001012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	4812      	ldr	r0, [pc, #72]	; (8001064 <sendString+0x6c>)
 800101a:	f002 ff09 	bl	8003e30 <HAL_UART_Transmit>
	else if(uart_number == 2)
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str) ,HAL_MAX_DELAY );
	else if(uart_number == 3)
		HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str) ,HAL_MAX_DELAY );
}
 800101e:	e01c      	b.n	800105a <sendString+0x62>
	else if(uart_number == 2)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	2b02      	cmp	r3, #2
 8001024:	d10b      	bne.n	800103e <sendString+0x46>
		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str) ,HAL_MAX_DELAY );
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff f8d2 	bl	80001d0 <strlen>
 800102c:	4603      	mov	r3, r0
 800102e:	b29a      	uxth	r2, r3
 8001030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001034:	6879      	ldr	r1, [r7, #4]
 8001036:	480c      	ldr	r0, [pc, #48]	; (8001068 <sendString+0x70>)
 8001038:	f002 fefa 	bl	8003e30 <HAL_UART_Transmit>
}
 800103c:	e00d      	b.n	800105a <sendString+0x62>
	else if(uart_number == 3)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	2b03      	cmp	r3, #3
 8001042:	d10a      	bne.n	800105a <sendString+0x62>
		HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str) ,HAL_MAX_DELAY );
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff f8c3 	bl	80001d0 <strlen>
 800104a:	4603      	mov	r3, r0
 800104c:	b29a      	uxth	r2, r3
 800104e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <sendString+0x74>)
 8001056:	f002 feeb 	bl	8003e30 <HAL_UART_Transmit>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000050c 	.word	0x2000050c
 8001068:	20000590 	.word	0x20000590
 800106c:	20000614 	.word	0x20000614

08001070 <sendChar>:

void sendChar(unsigned char c, int uart_number){
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	71fb      	strb	r3, [r7, #7]
	unsigned char pChar = c;
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	73fb      	strb	r3, [r7, #15]
	if(uart_number == 1)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d108      	bne.n	8001098 <sendChar+0x28>
		HAL_UART_Transmit(&huart1, &pChar,1 ,HAL_MAX_DELAY );
 8001086:	f107 010f 	add.w	r1, r7, #15
 800108a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800108e:	2201      	movs	r2, #1
 8001090:	480f      	ldr	r0, [pc, #60]	; (80010d0 <sendChar+0x60>)
 8001092:	f002 fecd 	bl	8003e30 <HAL_UART_Transmit>
	else if(uart_number == 2)
		HAL_UART_Transmit(&huart2, &pChar, 1,HAL_MAX_DELAY );
	else if(uart_number == 3)
		HAL_UART_Transmit(&huart3, &pChar, 1,HAL_MAX_DELAY );
}
 8001096:	e016      	b.n	80010c6 <sendChar+0x56>
	else if(uart_number == 2)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	2b02      	cmp	r3, #2
 800109c:	d108      	bne.n	80010b0 <sendChar+0x40>
		HAL_UART_Transmit(&huart2, &pChar, 1,HAL_MAX_DELAY );
 800109e:	f107 010f 	add.w	r1, r7, #15
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010a6:	2201      	movs	r2, #1
 80010a8:	480a      	ldr	r0, [pc, #40]	; (80010d4 <sendChar+0x64>)
 80010aa:	f002 fec1 	bl	8003e30 <HAL_UART_Transmit>
}
 80010ae:	e00a      	b.n	80010c6 <sendChar+0x56>
	else if(uart_number == 3)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	2b03      	cmp	r3, #3
 80010b4:	d107      	bne.n	80010c6 <sendChar+0x56>
		HAL_UART_Transmit(&huart3, &pChar, 1,HAL_MAX_DELAY );
 80010b6:	f107 010f 	add.w	r1, r7, #15
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010be:	2201      	movs	r2, #1
 80010c0:	4805      	ldr	r0, [pc, #20]	; (80010d8 <sendChar+0x68>)
 80010c2:	f002 feb5 	bl	8003e30 <HAL_UART_Transmit>
}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2000050c 	.word	0x2000050c
 80010d4:	20000590 	.word	0x20000590
 80010d8:	20000614 	.word	0x20000614

080010dc <test_task>:
		while(HAL_UART_Receive(&huart3, &caracter, 1, HAL_MAX_DELAY) != HAL_OK);
	}
	return caracter;
}

void test_task( void *vParam){
 80010dc:	b590      	push	{r4, r7, lr}
 80010de:	b089      	sub	sp, #36	; 0x24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

	char *places[4] = {"-20.7000000,-45.3666667,\n", "-5.9500000,-43.0000000,\n", "-17.4333333,-44.8500000,\n", "3.7500000,-61.3500000,\n"};
 80010e4:	4b10      	ldr	r3, [pc, #64]	; (8001128 <test_task+0x4c>)
 80010e6:	f107 040c 	add.w	r4, r7, #12
 80010ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	while(1){

		for (int i = 0; i < 4; i++) {
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
 80010f4:	e014      	b.n	8001120 <test_task+0x44>

			if (gpsEnabled == 1) {
 80010f6:	4b0d      	ldr	r3, [pc, #52]	; (800112c <test_task+0x50>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d109      	bne.n	8001112 <test_task+0x36>
				sendString(places[i], 3);
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	3320      	adds	r3, #32
 8001104:	443b      	add	r3, r7
 8001106:	f853 3c14 	ldr.w	r3, [r3, #-20]
 800110a:	2103      	movs	r1, #3
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff73 	bl	8000ff8 <sendString>
			}

			vTaskDelay(3000);
 8001112:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001116:	f004 fae5 	bl	80056e4 <vTaskDelay>
		for (int i = 0; i < 4; i++) {
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3301      	adds	r3, #1
 800111e:	61fb      	str	r3, [r7, #28]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	2b03      	cmp	r3, #3
 8001124:	dde7      	ble.n	80010f6 <test_task+0x1a>
 8001126:	e7e3      	b.n	80010f0 <test_task+0x14>
 8001128:	0800b0d8 	.word	0x0800b0d8
 800112c:	20000200 	.word	0x20000200

08001130 <gpsEnabled_task>:
//		vTaskDelay(500);
	}
}

void gpsEnabled_task(void * vParam)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	unsigned char flag;
	vTaskDelay(100);
 8001138:	2064      	movs	r0, #100	; 0x64
 800113a:	f004 fad3 	bl	80056e4 <vTaskDelay>
	while(1){
		//Aguarda receber um caracter da UART3 que esta conectada ao Node MCU
		while(HAL_UART_Receive(&huart3, &flag, 1, HAL_MAX_DELAY) != HAL_OK);
 800113e:	bf00      	nop
 8001140:	f107 010f 	add.w	r1, r7, #15
 8001144:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001148:	2201      	movs	r2, #1
 800114a:	480e      	ldr	r0, [pc, #56]	; (8001184 <gpsEnabled_task+0x54>)
 800114c:	f002 ff04 	bl	8003f58 <HAL_UART_Receive>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f4      	bne.n	8001140 <gpsEnabled_task+0x10>

		if (flag == '1') {
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	2b31      	cmp	r3, #49	; 0x31
 800115a:	d107      	bne.n	800116c <gpsEnabled_task+0x3c>
			gpsEnabled = 1;
 800115c:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <gpsEnabled_task+0x58>)
 800115e:	2201      	movs	r2, #1
 8001160:	601a      	str	r2, [r3, #0]
			sendChar('v', 2);
 8001162:	2102      	movs	r1, #2
 8001164:	2076      	movs	r0, #118	; 0x76
 8001166:	f7ff ff83 	bl	8001070 <sendChar>
 800116a:	e006      	b.n	800117a <gpsEnabled_task+0x4a>
		} else {
			gpsEnabled = 0;
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <gpsEnabled_task+0x58>)
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
			sendChar('f', 2);
 8001172:	2102      	movs	r1, #2
 8001174:	2066      	movs	r0, #102	; 0x66
 8001176:	f7ff ff7b 	bl	8001070 <sendChar>
		}

		vTaskDelay(1);
 800117a:	2001      	movs	r0, #1
 800117c:	f004 fab2 	bl	80056e4 <vTaskDelay>
		while(HAL_UART_Receive(&huart3, &flag, 1, HAL_MAX_DELAY) != HAL_OK);
 8001180:	e7dd      	b.n	800113e <gpsEnabled_task+0xe>
 8001182:	bf00      	nop
 8001184:	20000614 	.word	0x20000614
 8001188:	20000200 	.word	0x20000200

0800118c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4a07      	ldr	r2, [pc, #28]	; (80011b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800119c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	4a06      	ldr	r2, [pc, #24]	; (80011bc <vApplicationGetIdleTaskMemory+0x30>)
 80011a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2280      	movs	r2, #128	; 0x80
 80011a8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80011aa:	bf00      	nop
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000208 	.word	0x20000208
 80011bc:	200002bc 	.word	0x200002bc

080011c0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80011c0:	b5b0      	push	{r4, r5, r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af02      	add	r7, sp, #8
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80011c6:	4b14      	ldr	r3, [pc, #80]	; (8001218 <MX_FREERTOS_Init+0x58>)
 80011c8:	1d3c      	adds	r4, r7, #4
 80011ca:	461d      	mov	r5, r3
 80011cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f003 ffc2 	bl	8005166 <osThreadCreate>
 80011e2:	4603      	mov	r3, r0
 80011e4:	4a0d      	ldr	r2, [pc, #52]	; (800121c <MX_FREERTOS_Init+0x5c>)
 80011e6:	6013      	str	r3, [r2, #0]
//  xTaskCreate(envia_para_node_mcu, "envia_para_node_mcu",
//		  configMINIMAL_STACK_SIZE,
//		  NULL, 1,
//		  NULL);

  xTaskCreate(test_task, "test_task",
 80011e8:	2300      	movs	r3, #0
 80011ea:	9301      	str	r3, [sp, #4]
 80011ec:	2301      	movs	r3, #1
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	2300      	movs	r3, #0
 80011f2:	2280      	movs	r2, #128	; 0x80
 80011f4:	490a      	ldr	r1, [pc, #40]	; (8001220 <MX_FREERTOS_Init+0x60>)
 80011f6:	480b      	ldr	r0, [pc, #44]	; (8001224 <MX_FREERTOS_Init+0x64>)
 80011f8:	f004 f926 	bl	8005448 <xTaskCreate>
		  configMINIMAL_STACK_SIZE,
		  NULL, 1,
		  NULL);

  xTaskCreate(gpsEnabled_task, "gpsEnabled_task",
 80011fc:	2300      	movs	r3, #0
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	2301      	movs	r3, #1
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	2300      	movs	r3, #0
 8001206:	2280      	movs	r2, #128	; 0x80
 8001208:	4907      	ldr	r1, [pc, #28]	; (8001228 <MX_FREERTOS_Init+0x68>)
 800120a:	4808      	ldr	r0, [pc, #32]	; (800122c <MX_FREERTOS_Init+0x6c>)
 800120c:	f004 f91c 	bl	8005448 <xTaskCreate>
		  configMINIMAL_STACK_SIZE,
		  NULL, 1,
		  NULL);
  /* USER CODE END RTOS_THREADS */

}
 8001210:	bf00      	nop
 8001212:	3720      	adds	r7, #32
 8001214:	46bd      	mov	sp, r7
 8001216:	bdb0      	pop	{r4, r5, r7, pc}
 8001218:	0800b174 	.word	0x0800b174
 800121c:	20000204 	.word	0x20000204
 8001220:	0800b158 	.word	0x0800b158
 8001224:	080010dd 	.word	0x080010dd
 8001228:	0800b164 	.word	0x0800b164
 800122c:	08001131 	.word	0x08001131

08001230 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001238:	2001      	movs	r0, #1
 800123a:	f003 ffe0 	bl	80051fe <osDelay>
 800123e:	e7fb      	b.n	8001238 <StartDefaultTask+0x8>

08001240 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	; 0x28
 8001244:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001256:	4b2b      	ldr	r3, [pc, #172]	; (8001304 <MX_GPIO_Init+0xc4>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	4a2a      	ldr	r2, [pc, #168]	; (8001304 <MX_GPIO_Init+0xc4>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001262:	4b28      	ldr	r3, [pc, #160]	; (8001304 <MX_GPIO_Init+0xc4>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126e:	4b25      	ldr	r3, [pc, #148]	; (8001304 <MX_GPIO_Init+0xc4>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	4a24      	ldr	r2, [pc, #144]	; (8001304 <MX_GPIO_Init+0xc4>)
 8001274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001278:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127a:	4b22      	ldr	r3, [pc, #136]	; (8001304 <MX_GPIO_Init+0xc4>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <MX_GPIO_Init+0xc4>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	4a1e      	ldr	r2, [pc, #120]	; (8001304 <MX_GPIO_Init+0xc4>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001292:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <MX_GPIO_Init+0xc4>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <MX_GPIO_Init+0xc4>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a2:	4a18      	ldr	r2, [pc, #96]	; (8001304 <MX_GPIO_Init+0xc4>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012aa:	4b16      	ldr	r3, [pc, #88]	; (8001304 <MX_GPIO_Init+0xc4>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2120      	movs	r1, #32
 80012ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012be:	f000 ff2d 	bl	800211c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012c8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	480b      	ldr	r0, [pc, #44]	; (8001308 <MX_GPIO_Init+0xc8>)
 80012da:	f000 fd75 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012de:	2320      	movs	r3, #32
 80012e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e2:	2301      	movs	r3, #1
 80012e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4619      	mov	r1, r3
 80012f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f8:	f000 fd66 	bl	8001dc8 <HAL_GPIO_Init>

}
 80012fc:	bf00      	nop
 80012fe:	3728      	adds	r7, #40	; 0x28
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40021000 	.word	0x40021000
 8001308:	48000800 	.word	0x48000800

0800130c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001310:	f000 fbb8 	bl	8001a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001314:	f000 f80d 	bl	8001332 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001318:	f7ff ff92 	bl	8001240 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800131c:	f000 fa3a 	bl	8001794 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001320:	f000 fa08 	bl	8001734 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001324:	f000 fa66 	bl	80017f4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001328:	f7ff ff4a 	bl	80011c0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800132c:	f003 ff14 	bl	8005158 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001330:	e7fe      	b.n	8001330 <main+0x24>

08001332 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b096      	sub	sp, #88	; 0x58
 8001336:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2244      	movs	r2, #68	; 0x44
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f005 faa5 	bl	8006890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001346:	463b      	mov	r3, r7
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001354:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001358:	f000 ff06 	bl	8002168 <HAL_PWREx_ControlVoltageScaling>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001362:	f000 f849 	bl	80013f8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001366:	2302      	movs	r3, #2
 8001368:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800136a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800136e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001370:	2310      	movs	r3, #16
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001374:	2302      	movs	r3, #2
 8001376:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001378:	2302      	movs	r3, #2
 800137a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800137c:	2301      	movs	r3, #1
 800137e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001380:	230a      	movs	r3, #10
 8001382:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001384:	2307      	movs	r3, #7
 8001386:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001388:	2302      	movs	r3, #2
 800138a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800138c:	2302      	movs	r3, #2
 800138e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	4618      	mov	r0, r3
 8001396:	f000 ff3d 	bl	8002214 <HAL_RCC_OscConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80013a0:	f000 f82a 	bl	80013f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a4:	230f      	movs	r3, #15
 80013a6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a8:	2303      	movs	r3, #3
 80013aa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b4:	2300      	movs	r3, #0
 80013b6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013b8:	463b      	mov	r3, r7
 80013ba:	2104      	movs	r1, #4
 80013bc:	4618      	mov	r0, r3
 80013be:	f001 fb05 	bl	80029cc <HAL_RCC_ClockConfig>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80013c8:	f000 f816 	bl	80013f8 <Error_Handler>
  }
}
 80013cc:	bf00      	nop
 80013ce:	3758      	adds	r7, #88	; 0x58
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d101      	bne.n	80013ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013e6:	f000 fb6d 	bl	8001ac4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40012c00 	.word	0x40012c00

080013f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013fc:	b672      	cpsid	i
}
 80013fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001400:	e7fe      	b.n	8001400 <Error_Handler+0x8>
	...

08001404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140a:	4b11      	ldr	r3, [pc, #68]	; (8001450 <HAL_MspInit+0x4c>)
 800140c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800140e:	4a10      	ldr	r2, [pc, #64]	; (8001450 <HAL_MspInit+0x4c>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6613      	str	r3, [r2, #96]	; 0x60
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <HAL_MspInit+0x4c>)
 8001418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <HAL_MspInit+0x4c>)
 8001424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001426:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <HAL_MspInit+0x4c>)
 8001428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142c:	6593      	str	r3, [r2, #88]	; 0x58
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <HAL_MspInit+0x4c>)
 8001430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	210f      	movs	r1, #15
 800143e:	f06f 0001 	mvn.w	r0, #1
 8001442:	f000 fc17 	bl	8001c74 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40021000 	.word	0x40021000

08001454 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08c      	sub	sp, #48	; 0x30
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800145c:	2300      	movs	r3, #0
 800145e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001462:	4b2e      	ldr	r3, [pc, #184]	; (800151c <HAL_InitTick+0xc8>)
 8001464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001466:	4a2d      	ldr	r2, [pc, #180]	; (800151c <HAL_InitTick+0xc8>)
 8001468:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800146c:	6613      	str	r3, [r2, #96]	; 0x60
 800146e:	4b2b      	ldr	r3, [pc, #172]	; (800151c <HAL_InitTick+0xc8>)
 8001470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001472:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800147a:	f107 020c 	add.w	r2, r7, #12
 800147e:	f107 0310 	add.w	r3, r7, #16
 8001482:	4611      	mov	r1, r2
 8001484:	4618      	mov	r0, r3
 8001486:	f001 fc65 	bl	8002d54 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800148a:	f001 fc4d 	bl	8002d28 <HAL_RCC_GetPCLK2Freq>
 800148e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001492:	4a23      	ldr	r2, [pc, #140]	; (8001520 <HAL_InitTick+0xcc>)
 8001494:	fba2 2303 	umull	r2, r3, r2, r3
 8001498:	0c9b      	lsrs	r3, r3, #18
 800149a:	3b01      	subs	r3, #1
 800149c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800149e:	4b21      	ldr	r3, [pc, #132]	; (8001524 <HAL_InitTick+0xd0>)
 80014a0:	4a21      	ldr	r2, [pc, #132]	; (8001528 <HAL_InitTick+0xd4>)
 80014a2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80014a4:	4b1f      	ldr	r3, [pc, #124]	; (8001524 <HAL_InitTick+0xd0>)
 80014a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014aa:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80014ac:	4a1d      	ldr	r2, [pc, #116]	; (8001524 <HAL_InitTick+0xd0>)
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80014b2:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <HAL_InitTick+0xd0>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b8:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <HAL_InitTick+0xd0>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014be:	4b19      	ldr	r3, [pc, #100]	; (8001524 <HAL_InitTick+0xd0>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80014c4:	4817      	ldr	r0, [pc, #92]	; (8001524 <HAL_InitTick+0xd0>)
 80014c6:	f002 f993 	bl	80037f0 <HAL_TIM_Base_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80014d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d11b      	bne.n	8001510 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80014d8:	4812      	ldr	r0, [pc, #72]	; (8001524 <HAL_InitTick+0xd0>)
 80014da:	f002 f9eb 	bl	80038b4 <HAL_TIM_Base_Start_IT>
 80014de:	4603      	mov	r3, r0
 80014e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80014e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d111      	bne.n	8001510 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80014ec:	2019      	movs	r0, #25
 80014ee:	f000 fbdd 	bl	8001cac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b0f      	cmp	r3, #15
 80014f6:	d808      	bhi.n	800150a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80014f8:	2200      	movs	r2, #0
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	2019      	movs	r0, #25
 80014fe:	f000 fbb9 	bl	8001c74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001502:	4a0a      	ldr	r2, [pc, #40]	; (800152c <HAL_InitTick+0xd8>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	e002      	b.n	8001510 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001510:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001514:	4618      	mov	r0, r3
 8001516:	3730      	adds	r7, #48	; 0x30
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40021000 	.word	0x40021000
 8001520:	431bde83 	.word	0x431bde83
 8001524:	200004bc 	.word	0x200004bc
 8001528:	40012c00 	.word	0x40012c00
 800152c:	20000004 	.word	0x20000004

08001530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <NMI_Handler+0x4>

08001536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <HardFault_Handler+0x4>

0800153c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <MemManage_Handler+0x4>

08001542 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <BusFault_Handler+0x4>

08001548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <UsageFault_Handler+0x4>

0800154e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001560:	4802      	ldr	r0, [pc, #8]	; (800156c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001562:	f002 fa17 	bl	8003994 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200004bc 	.word	0x200004bc

08001570 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001574:	4802      	ldr	r0, [pc, #8]	; (8001580 <USART1_IRQHandler+0x10>)
 8001576:	f002 fdc1 	bl	80040fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	2000050c 	.word	0x2000050c

08001584 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return 1;
 8001588:	2301      	movs	r3, #1
}
 800158a:	4618      	mov	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <_kill>:

int _kill(int pid, int sig)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800159e:	f005 f83d 	bl	800661c <__errno>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2216      	movs	r2, #22
 80015a6:	601a      	str	r2, [r3, #0]
  return -1;
 80015a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <_exit>:

void _exit (int status)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ffe7 	bl	8001594 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015c6:	e7fe      	b.n	80015c6 <_exit+0x12>

080015c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	e00a      	b.n	80015f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015da:	f3af 8000 	nop.w
 80015de:	4601      	mov	r1, r0
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	1c5a      	adds	r2, r3, #1
 80015e4:	60ba      	str	r2, [r7, #8]
 80015e6:	b2ca      	uxtb	r2, r1
 80015e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	3301      	adds	r3, #1
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	dbf0      	blt.n	80015da <_read+0x12>
  }

  return len;
 80015f8:	687b      	ldr	r3, [r7, #4]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b086      	sub	sp, #24
 8001606:	af00      	add	r7, sp, #0
 8001608:	60f8      	str	r0, [r7, #12]
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	e009      	b.n	8001628 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	1c5a      	adds	r2, r3, #1
 8001618:	60ba      	str	r2, [r7, #8]
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	3301      	adds	r3, #1
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	697a      	ldr	r2, [r7, #20]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	429a      	cmp	r2, r3
 800162e:	dbf1      	blt.n	8001614 <_write+0x12>
  }
  return len;
 8001630:	687b      	ldr	r3, [r7, #4]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <_close>:

int _close(int file)
{
 800163a:	b480      	push	{r7}
 800163c:	b083      	sub	sp, #12
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001646:	4618      	mov	r0, r3
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
 800165a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001662:	605a      	str	r2, [r3, #4]
  return 0;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <_isatty>:

int _isatty(int file)
{
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800167a:	2301      	movs	r3, #1
}
 800167c:	4618      	mov	r0, r3
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016ac:	4a14      	ldr	r2, [pc, #80]	; (8001700 <_sbrk+0x5c>)
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <_sbrk+0x60>)
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016b8:	4b13      	ldr	r3, [pc, #76]	; (8001708 <_sbrk+0x64>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d102      	bne.n	80016c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <_sbrk+0x64>)
 80016c2:	4a12      	ldr	r2, [pc, #72]	; (800170c <_sbrk+0x68>)
 80016c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <_sbrk+0x64>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d207      	bcs.n	80016e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016d4:	f004 ffa2 	bl	800661c <__errno>
 80016d8:	4603      	mov	r3, r0
 80016da:	220c      	movs	r2, #12
 80016dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016e2:	e009      	b.n	80016f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016e4:	4b08      	ldr	r3, [pc, #32]	; (8001708 <_sbrk+0x64>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ea:	4b07      	ldr	r3, [pc, #28]	; (8001708 <_sbrk+0x64>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	4a05      	ldr	r2, [pc, #20]	; (8001708 <_sbrk+0x64>)
 80016f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016f6:	68fb      	ldr	r3, [r7, #12]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20018000 	.word	0x20018000
 8001704:	00000400 	.word	0x00000400
 8001708:	20000508 	.word	0x20000508
 800170c:	20004800 	.word	0x20004800

08001710 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <SystemInit+0x20>)
 8001716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800171a:	4a05      	ldr	r2, [pc, #20]	; (8001730 <SystemInit+0x20>)
 800171c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001720:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <MX_USART1_UART_Init+0x58>)
 800173a:	4a15      	ldr	r2, [pc, #84]	; (8001790 <MX_USART1_UART_Init+0x5c>)
 800173c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800173e:	4b13      	ldr	r3, [pc, #76]	; (800178c <MX_USART1_UART_Init+0x58>)
 8001740:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001744:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <MX_USART1_UART_Init+0x58>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800174c:	4b0f      	ldr	r3, [pc, #60]	; (800178c <MX_USART1_UART_Init+0x58>)
 800174e:	2200      	movs	r2, #0
 8001750:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <MX_USART1_UART_Init+0x58>)
 8001754:	2200      	movs	r2, #0
 8001756:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <MX_USART1_UART_Init+0x58>)
 800175a:	220c      	movs	r2, #12
 800175c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <MX_USART1_UART_Init+0x58>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001764:	4b09      	ldr	r3, [pc, #36]	; (800178c <MX_USART1_UART_Init+0x58>)
 8001766:	2200      	movs	r2, #0
 8001768:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <MX_USART1_UART_Init+0x58>)
 800176c:	2200      	movs	r2, #0
 800176e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <MX_USART1_UART_Init+0x58>)
 8001772:	2200      	movs	r2, #0
 8001774:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001776:	4805      	ldr	r0, [pc, #20]	; (800178c <MX_USART1_UART_Init+0x58>)
 8001778:	f002 fb0c 	bl	8003d94 <HAL_UART_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001782:	f7ff fe39 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	2000050c 	.word	0x2000050c
 8001790:	40013800 	.word	0x40013800

08001794 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001798:	4b14      	ldr	r3, [pc, #80]	; (80017ec <MX_USART2_UART_Init+0x58>)
 800179a:	4a15      	ldr	r2, [pc, #84]	; (80017f0 <MX_USART2_UART_Init+0x5c>)
 800179c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800179e:	4b13      	ldr	r3, [pc, #76]	; (80017ec <MX_USART2_UART_Init+0x58>)
 80017a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017a6:	4b11      	ldr	r3, [pc, #68]	; (80017ec <MX_USART2_UART_Init+0x58>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <MX_USART2_UART_Init+0x58>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017b2:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <MX_USART2_UART_Init+0x58>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <MX_USART2_UART_Init+0x58>)
 80017ba:	220c      	movs	r2, #12
 80017bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017be:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <MX_USART2_UART_Init+0x58>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <MX_USART2_UART_Init+0x58>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <MX_USART2_UART_Init+0x58>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <MX_USART2_UART_Init+0x58>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <MX_USART2_UART_Init+0x58>)
 80017d8:	f002 fadc 	bl	8003d94 <HAL_UART_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017e2:	f7ff fe09 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000590 	.word	0x20000590
 80017f0:	40004400 	.word	0x40004400

080017f4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017f8:	4b14      	ldr	r3, [pc, #80]	; (800184c <MX_USART3_UART_Init+0x58>)
 80017fa:	4a15      	ldr	r2, [pc, #84]	; (8001850 <MX_USART3_UART_Init+0x5c>)
 80017fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017fe:	4b13      	ldr	r3, [pc, #76]	; (800184c <MX_USART3_UART_Init+0x58>)
 8001800:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001804:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <MX_USART3_UART_Init+0x58>)
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <MX_USART3_UART_Init+0x58>)
 800180e:	2200      	movs	r2, #0
 8001810:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <MX_USART3_UART_Init+0x58>)
 8001814:	2200      	movs	r2, #0
 8001816:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <MX_USART3_UART_Init+0x58>)
 800181a:	220c      	movs	r2, #12
 800181c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <MX_USART3_UART_Init+0x58>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001824:	4b09      	ldr	r3, [pc, #36]	; (800184c <MX_USART3_UART_Init+0x58>)
 8001826:	2200      	movs	r2, #0
 8001828:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800182a:	4b08      	ldr	r3, [pc, #32]	; (800184c <MX_USART3_UART_Init+0x58>)
 800182c:	2200      	movs	r2, #0
 800182e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <MX_USART3_UART_Init+0x58>)
 8001832:	2200      	movs	r2, #0
 8001834:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001836:	4805      	ldr	r0, [pc, #20]	; (800184c <MX_USART3_UART_Init+0x58>)
 8001838:	f002 faac 	bl	8003d94 <HAL_UART_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001842:	f7ff fdd9 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000614 	.word	0x20000614
 8001850:	40004800 	.word	0x40004800

08001854 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b0b0      	sub	sp, #192	; 0xc0
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800186c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001870:	2288      	movs	r2, #136	; 0x88
 8001872:	2100      	movs	r1, #0
 8001874:	4618      	mov	r0, r3
 8001876:	f005 f80b 	bl	8006890 <memset>
  if(uartHandle->Instance==USART1)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a67      	ldr	r2, [pc, #412]	; (8001a1c <HAL_UART_MspInit+0x1c8>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d145      	bne.n	8001910 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001884:	2301      	movs	r3, #1
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001888:	2300      	movs	r3, #0
 800188a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800188c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001890:	4618      	mov	r0, r3
 8001892:	f001 faf1 	bl	8002e78 <HAL_RCCEx_PeriphCLKConfig>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800189c:	f7ff fdac 	bl	80013f8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018a0:	4b5f      	ldr	r3, [pc, #380]	; (8001a20 <HAL_UART_MspInit+0x1cc>)
 80018a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a4:	4a5e      	ldr	r2, [pc, #376]	; (8001a20 <HAL_UART_MspInit+0x1cc>)
 80018a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018aa:	6613      	str	r3, [r2, #96]	; 0x60
 80018ac:	4b5c      	ldr	r3, [pc, #368]	; (8001a20 <HAL_UART_MspInit+0x1cc>)
 80018ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b4:	623b      	str	r3, [r7, #32]
 80018b6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b8:	4b59      	ldr	r3, [pc, #356]	; (8001a20 <HAL_UART_MspInit+0x1cc>)
 80018ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018bc:	4a58      	ldr	r2, [pc, #352]	; (8001a20 <HAL_UART_MspInit+0x1cc>)
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018c4:	4b56      	ldr	r3, [pc, #344]	; (8001a20 <HAL_UART_MspInit+0x1cc>)
 80018c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	61fb      	str	r3, [r7, #28]
 80018ce:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018d0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d8:	2302      	movs	r3, #2
 80018da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e4:	2303      	movs	r3, #3
 80018e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018ea:	2307      	movs	r3, #7
 80018ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80018f4:	4619      	mov	r1, r3
 80018f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018fa:	f000 fa65 	bl	8001dc8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	2105      	movs	r1, #5
 8001902:	2025      	movs	r0, #37	; 0x25
 8001904:	f000 f9b6 	bl	8001c74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001908:	2025      	movs	r0, #37	; 0x25
 800190a:	f000 f9cf 	bl	8001cac <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800190e:	e081      	b.n	8001a14 <HAL_UART_MspInit+0x1c0>
  else if(uartHandle->Instance==USART2)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a43      	ldr	r2, [pc, #268]	; (8001a24 <HAL_UART_MspInit+0x1d0>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d13c      	bne.n	8001994 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800191a:	2302      	movs	r3, #2
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800191e:	2300      	movs	r3, #0
 8001920:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001926:	4618      	mov	r0, r3
 8001928:	f001 faa6 	bl	8002e78 <HAL_RCCEx_PeriphCLKConfig>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8001932:	f7ff fd61 	bl	80013f8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001936:	4b3a      	ldr	r3, [pc, #232]	; (8001a20 <HAL_UART_MspInit+0x1cc>)
 8001938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193a:	4a39      	ldr	r2, [pc, #228]	; (8001a20 <HAL_UART_MspInit+0x1cc>)
 800193c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001940:	6593      	str	r3, [r2, #88]	; 0x58
 8001942:	4b37      	ldr	r3, [pc, #220]	; (8001a20 <HAL_UART_MspInit+0x1cc>)
 8001944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194a:	61bb      	str	r3, [r7, #24]
 800194c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194e:	4b34      	ldr	r3, [pc, #208]	; (8001a20 <HAL_UART_MspInit+0x1cc>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001952:	4a33      	ldr	r2, [pc, #204]	; (8001a20 <HAL_UART_MspInit+0x1cc>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800195a:	4b31      	ldr	r3, [pc, #196]	; (8001a20 <HAL_UART_MspInit+0x1cc>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	617b      	str	r3, [r7, #20]
 8001964:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001966:	230c      	movs	r3, #12
 8001968:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001978:	2303      	movs	r3, #3
 800197a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800197e:	2307      	movs	r3, #7
 8001980:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001988:	4619      	mov	r1, r3
 800198a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800198e:	f000 fa1b 	bl	8001dc8 <HAL_GPIO_Init>
}
 8001992:	e03f      	b.n	8001a14 <HAL_UART_MspInit+0x1c0>
  else if(uartHandle->Instance==USART3)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a23      	ldr	r2, [pc, #140]	; (8001a28 <HAL_UART_MspInit+0x1d4>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d13a      	bne.n	8001a14 <HAL_UART_MspInit+0x1c0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800199e:	2304      	movs	r3, #4
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80019a2:	2300      	movs	r3, #0
 80019a4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019aa:	4618      	mov	r0, r3
 80019ac:	f001 fa64 	bl	8002e78 <HAL_RCCEx_PeriphCLKConfig>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <HAL_UART_MspInit+0x166>
      Error_Handler();
 80019b6:	f7ff fd1f 	bl	80013f8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80019ba:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <HAL_UART_MspInit+0x1cc>)
 80019bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019be:	4a18      	ldr	r2, [pc, #96]	; (8001a20 <HAL_UART_MspInit+0x1cc>)
 80019c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019c4:	6593      	str	r3, [r2, #88]	; 0x58
 80019c6:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <HAL_UART_MspInit+0x1cc>)
 80019c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019ce:	613b      	str	r3, [r7, #16]
 80019d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d2:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <HAL_UART_MspInit+0x1cc>)
 80019d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d6:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <HAL_UART_MspInit+0x1cc>)
 80019d8:	f043 0304 	orr.w	r3, r3, #4
 80019dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <HAL_UART_MspInit+0x1cc>)
 80019e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80019ea:	2330      	movs	r3, #48	; 0x30
 80019ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fc:	2303      	movs	r3, #3
 80019fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a02:	2307      	movs	r3, #7
 8001a04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a08:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4807      	ldr	r0, [pc, #28]	; (8001a2c <HAL_UART_MspInit+0x1d8>)
 8001a10:	f000 f9da 	bl	8001dc8 <HAL_GPIO_Init>
}
 8001a14:	bf00      	nop
 8001a16:	37c0      	adds	r7, #192	; 0xc0
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40013800 	.word	0x40013800
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40004400 	.word	0x40004400
 8001a28:	40004800 	.word	0x40004800
 8001a2c:	48000800 	.word	0x48000800

08001a30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a34:	f7ff fe6c 	bl	8001710 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a38:	480c      	ldr	r0, [pc, #48]	; (8001a6c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a3a:	490d      	ldr	r1, [pc, #52]	; (8001a70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a3c:	4a0d      	ldr	r2, [pc, #52]	; (8001a74 <LoopForever+0xe>)
  movs r3, #0
 8001a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a40:	e002      	b.n	8001a48 <LoopCopyDataInit>

08001a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a46:	3304      	adds	r3, #4

08001a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a4c:	d3f9      	bcc.n	8001a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a50:	4c0a      	ldr	r4, [pc, #40]	; (8001a7c <LoopForever+0x16>)
  movs r3, #0
 8001a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a54:	e001      	b.n	8001a5a <LoopFillZerobss>

08001a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a58:	3204      	adds	r2, #4

08001a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a5c:	d3fb      	bcc.n	8001a56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a5e:	f004 fed9 	bl	8006814 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a62:	f7ff fc53 	bl	800130c <main>

08001a66 <LoopForever>:

LoopForever:
    b LoopForever
 8001a66:	e7fe      	b.n	8001a66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a68:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a70:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001a74:	0800b694 	.word	0x0800b694
  ldr r2, =_sbss
 8001a78:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001a7c:	20004800 	.word	0x20004800

08001a80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a80:	e7fe      	b.n	8001a80 <ADC1_2_IRQHandler>
	...

08001a84 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <HAL_Init+0x3c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a0b      	ldr	r2, [pc, #44]	; (8001ac0 <HAL_Init+0x3c>)
 8001a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a98:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a9a:	2003      	movs	r0, #3
 8001a9c:	f000 f8df 	bl	8001c5e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aa0:	200f      	movs	r0, #15
 8001aa2:	f7ff fcd7 	bl	8001454 <HAL_InitTick>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d002      	beq.n	8001ab2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	71fb      	strb	r3, [r7, #7]
 8001ab0:	e001      	b.n	8001ab6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ab2:	f7ff fca7 	bl	8001404 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40022000 	.word	0x40022000

08001ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_IncTick+0x20>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_IncTick+0x24>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	4a04      	ldr	r2, [pc, #16]	; (8001ae8 <HAL_IncTick+0x24>)
 8001ad6:	6013      	str	r3, [r2, #0]
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20000008 	.word	0x20000008
 8001ae8:	20000698 	.word	0x20000698

08001aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return uwTick;
 8001af0:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <HAL_GetTick+0x14>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20000698 	.word	0x20000698

08001b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <__NVIC_SetPriorityGrouping+0x44>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b20:	4013      	ands	r3, r2
 8001b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b36:	4a04      	ldr	r2, [pc, #16]	; (8001b48 <__NVIC_SetPriorityGrouping+0x44>)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	60d3      	str	r3, [r2, #12]
}
 8001b3c:	bf00      	nop
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b50:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <__NVIC_GetPriorityGrouping+0x18>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	0a1b      	lsrs	r3, r3, #8
 8001b56:	f003 0307 	and.w	r3, r3, #7
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	db0b      	blt.n	8001b92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	f003 021f 	and.w	r2, r3, #31
 8001b80:	4907      	ldr	r1, [pc, #28]	; (8001ba0 <__NVIC_EnableIRQ+0x38>)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	095b      	lsrs	r3, r3, #5
 8001b88:	2001      	movs	r0, #1
 8001b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000e100 	.word	0xe000e100

08001ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	6039      	str	r1, [r7, #0]
 8001bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	db0a      	blt.n	8001bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	490c      	ldr	r1, [pc, #48]	; (8001bf0 <__NVIC_SetPriority+0x4c>)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	0112      	lsls	r2, r2, #4
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bcc:	e00a      	b.n	8001be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4908      	ldr	r1, [pc, #32]	; (8001bf4 <__NVIC_SetPriority+0x50>)
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	3b04      	subs	r3, #4
 8001bdc:	0112      	lsls	r2, r2, #4
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	440b      	add	r3, r1
 8001be2:	761a      	strb	r2, [r3, #24]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000e100 	.word	0xe000e100
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	; 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f1c3 0307 	rsb	r3, r3, #7
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	bf28      	it	cs
 8001c16:	2304      	movcs	r3, #4
 8001c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	2b06      	cmp	r3, #6
 8001c20:	d902      	bls.n	8001c28 <NVIC_EncodePriority+0x30>
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3b03      	subs	r3, #3
 8001c26:	e000      	b.n	8001c2a <NVIC_EncodePriority+0x32>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43da      	mvns	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4a:	43d9      	mvns	r1, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	4313      	orrs	r3, r2
         );
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3724      	adds	r7, #36	; 0x24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff ff4c 	bl	8001b04 <__NVIC_SetPriorityGrouping>
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
 8001c80:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c86:	f7ff ff61 	bl	8001b4c <__NVIC_GetPriorityGrouping>
 8001c8a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	68b9      	ldr	r1, [r7, #8]
 8001c90:	6978      	ldr	r0, [r7, #20]
 8001c92:	f7ff ffb1 	bl	8001bf8 <NVIC_EncodePriority>
 8001c96:	4602      	mov	r2, r0
 8001c98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c9c:	4611      	mov	r1, r2
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff ff80 	bl	8001ba4 <__NVIC_SetPriority>
}
 8001ca4:	bf00      	nop
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff ff54 	bl	8001b68 <__NVIC_EnableIRQ>
}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d008      	beq.n	8001cf2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2204      	movs	r2, #4
 8001ce4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e022      	b.n	8001d38 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 020e 	bic.w	r2, r2, #14
 8001d00:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0201 	bic.w	r2, r2, #1
 8001d10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	f003 021c 	and.w	r2, r3, #28
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	2101      	movs	r1, #1
 8001d20:	fa01 f202 	lsl.w	r2, r1, r2
 8001d24:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d005      	beq.n	8001d68 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2204      	movs	r2, #4
 8001d60:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	73fb      	strb	r3, [r7, #15]
 8001d66:	e029      	b.n	8001dbc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 020e 	bic.w	r2, r2, #14
 8001d76:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0201 	bic.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8c:	f003 021c 	and.w	r2, r3, #28
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	2101      	movs	r1, #1
 8001d96:	fa01 f202 	lsl.w	r2, r1, r2
 8001d9a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	4798      	blx	r3
    }
  }
  return status;
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b087      	sub	sp, #28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd6:	e17f      	b.n	80020d8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	2101      	movs	r1, #1
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	fa01 f303 	lsl.w	r3, r1, r3
 8001de4:	4013      	ands	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 8171 	beq.w	80020d2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d005      	beq.n	8001e08 <HAL_GPIO_Init+0x40>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 0303 	and.w	r3, r3, #3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d130      	bne.n	8001e6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	2203      	movs	r2, #3
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	68da      	ldr	r2, [r3, #12]
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e3e:	2201      	movs	r2, #1
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43db      	mvns	r3, r3
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	091b      	lsrs	r3, r3, #4
 8001e54:	f003 0201 	and.w	r2, r3, #1
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	d118      	bne.n	8001ea8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	08db      	lsrs	r3, r3, #3
 8001e92:	f003 0201 	and.w	r2, r3, #1
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	2b03      	cmp	r3, #3
 8001eb2:	d017      	beq.n	8001ee4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d123      	bne.n	8001f38 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	08da      	lsrs	r2, r3, #3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3208      	adds	r2, #8
 8001ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001efc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	220f      	movs	r2, #15
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4013      	ands	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	691a      	ldr	r2, [r3, #16]
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	08da      	lsrs	r2, r3, #3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3208      	adds	r2, #8
 8001f32:	6939      	ldr	r1, [r7, #16]
 8001f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	2203      	movs	r2, #3
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 0203 	and.w	r2, r3, #3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 80ac 	beq.w	80020d2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7a:	4b5f      	ldr	r3, [pc, #380]	; (80020f8 <HAL_GPIO_Init+0x330>)
 8001f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f7e:	4a5e      	ldr	r2, [pc, #376]	; (80020f8 <HAL_GPIO_Init+0x330>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6613      	str	r3, [r2, #96]	; 0x60
 8001f86:	4b5c      	ldr	r3, [pc, #368]	; (80020f8 <HAL_GPIO_Init+0x330>)
 8001f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f92:	4a5a      	ldr	r2, [pc, #360]	; (80020fc <HAL_GPIO_Init+0x334>)
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	089b      	lsrs	r3, r3, #2
 8001f98:	3302      	adds	r3, #2
 8001f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	220f      	movs	r2, #15
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fbc:	d025      	beq.n	800200a <HAL_GPIO_Init+0x242>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a4f      	ldr	r2, [pc, #316]	; (8002100 <HAL_GPIO_Init+0x338>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d01f      	beq.n	8002006 <HAL_GPIO_Init+0x23e>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a4e      	ldr	r2, [pc, #312]	; (8002104 <HAL_GPIO_Init+0x33c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d019      	beq.n	8002002 <HAL_GPIO_Init+0x23a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a4d      	ldr	r2, [pc, #308]	; (8002108 <HAL_GPIO_Init+0x340>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d013      	beq.n	8001ffe <HAL_GPIO_Init+0x236>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a4c      	ldr	r2, [pc, #304]	; (800210c <HAL_GPIO_Init+0x344>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d00d      	beq.n	8001ffa <HAL_GPIO_Init+0x232>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a4b      	ldr	r2, [pc, #300]	; (8002110 <HAL_GPIO_Init+0x348>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d007      	beq.n	8001ff6 <HAL_GPIO_Init+0x22e>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a4a      	ldr	r2, [pc, #296]	; (8002114 <HAL_GPIO_Init+0x34c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d101      	bne.n	8001ff2 <HAL_GPIO_Init+0x22a>
 8001fee:	2306      	movs	r3, #6
 8001ff0:	e00c      	b.n	800200c <HAL_GPIO_Init+0x244>
 8001ff2:	2307      	movs	r3, #7
 8001ff4:	e00a      	b.n	800200c <HAL_GPIO_Init+0x244>
 8001ff6:	2305      	movs	r3, #5
 8001ff8:	e008      	b.n	800200c <HAL_GPIO_Init+0x244>
 8001ffa:	2304      	movs	r3, #4
 8001ffc:	e006      	b.n	800200c <HAL_GPIO_Init+0x244>
 8001ffe:	2303      	movs	r3, #3
 8002000:	e004      	b.n	800200c <HAL_GPIO_Init+0x244>
 8002002:	2302      	movs	r3, #2
 8002004:	e002      	b.n	800200c <HAL_GPIO_Init+0x244>
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <HAL_GPIO_Init+0x244>
 800200a:	2300      	movs	r3, #0
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	f002 0203 	and.w	r2, r2, #3
 8002012:	0092      	lsls	r2, r2, #2
 8002014:	4093      	lsls	r3, r2
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800201c:	4937      	ldr	r1, [pc, #220]	; (80020fc <HAL_GPIO_Init+0x334>)
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	089b      	lsrs	r3, r3, #2
 8002022:	3302      	adds	r3, #2
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800202a:	4b3b      	ldr	r3, [pc, #236]	; (8002118 <HAL_GPIO_Init+0x350>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	43db      	mvns	r3, r3
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	4013      	ands	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4313      	orrs	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800204e:	4a32      	ldr	r2, [pc, #200]	; (8002118 <HAL_GPIO_Init+0x350>)
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002054:	4b30      	ldr	r3, [pc, #192]	; (8002118 <HAL_GPIO_Init+0x350>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	43db      	mvns	r3, r3
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4013      	ands	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002078:	4a27      	ldr	r2, [pc, #156]	; (8002118 <HAL_GPIO_Init+0x350>)
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800207e:	4b26      	ldr	r3, [pc, #152]	; (8002118 <HAL_GPIO_Init+0x350>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	43db      	mvns	r3, r3
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4013      	ands	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4313      	orrs	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020a2:	4a1d      	ldr	r2, [pc, #116]	; (8002118 <HAL_GPIO_Init+0x350>)
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80020a8:	4b1b      	ldr	r3, [pc, #108]	; (8002118 <HAL_GPIO_Init+0x350>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	4013      	ands	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020cc:	4a12      	ldr	r2, [pc, #72]	; (8002118 <HAL_GPIO_Init+0x350>)
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	3301      	adds	r3, #1
 80020d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	fa22 f303 	lsr.w	r3, r2, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f47f ae78 	bne.w	8001dd8 <HAL_GPIO_Init+0x10>
  }
}
 80020e8:	bf00      	nop
 80020ea:	bf00      	nop
 80020ec:	371c      	adds	r7, #28
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40010000 	.word	0x40010000
 8002100:	48000400 	.word	0x48000400
 8002104:	48000800 	.word	0x48000800
 8002108:	48000c00 	.word	0x48000c00
 800210c:	48001000 	.word	0x48001000
 8002110:	48001400 	.word	0x48001400
 8002114:	48001800 	.word	0x48001800
 8002118:	40010400 	.word	0x40010400

0800211c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	807b      	strh	r3, [r7, #2]
 8002128:	4613      	mov	r3, r2
 800212a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800212c:	787b      	ldrb	r3, [r7, #1]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002132:	887a      	ldrh	r2, [r7, #2]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002138:	e002      	b.n	8002140 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800213a:	887a      	ldrh	r2, [r7, #2]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002150:	4b04      	ldr	r3, [pc, #16]	; (8002164 <HAL_PWREx_GetVoltageRange+0x18>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002158:	4618      	mov	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40007000 	.word	0x40007000

08002168 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002176:	d130      	bne.n	80021da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002178:	4b23      	ldr	r3, [pc, #140]	; (8002208 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002184:	d038      	beq.n	80021f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002186:	4b20      	ldr	r3, [pc, #128]	; (8002208 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800218e:	4a1e      	ldr	r2, [pc, #120]	; (8002208 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002190:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002194:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002196:	4b1d      	ldr	r3, [pc, #116]	; (800220c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2232      	movs	r2, #50	; 0x32
 800219c:	fb02 f303 	mul.w	r3, r2, r3
 80021a0:	4a1b      	ldr	r2, [pc, #108]	; (8002210 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021a2:	fba2 2303 	umull	r2, r3, r2, r3
 80021a6:	0c9b      	lsrs	r3, r3, #18
 80021a8:	3301      	adds	r3, #1
 80021aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021ac:	e002      	b.n	80021b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	3b01      	subs	r3, #1
 80021b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021b4:	4b14      	ldr	r3, [pc, #80]	; (8002208 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c0:	d102      	bne.n	80021c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1f2      	bne.n	80021ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021c8:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021d4:	d110      	bne.n	80021f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e00f      	b.n	80021fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021da:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021e6:	d007      	beq.n	80021f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021e8:	4b07      	ldr	r3, [pc, #28]	; (8002208 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021f0:	4a05      	ldr	r2, [pc, #20]	; (8002208 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40007000 	.word	0x40007000
 800220c:	20000000 	.word	0x20000000
 8002210:	431bde83 	.word	0x431bde83

08002214 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e3ca      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002226:	4b97      	ldr	r3, [pc, #604]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002230:	4b94      	ldr	r3, [pc, #592]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0310 	and.w	r3, r3, #16
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 80e4 	beq.w	8002410 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d007      	beq.n	800225e <HAL_RCC_OscConfig+0x4a>
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	2b0c      	cmp	r3, #12
 8002252:	f040 808b 	bne.w	800236c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2b01      	cmp	r3, #1
 800225a:	f040 8087 	bne.w	800236c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800225e:	4b89      	ldr	r3, [pc, #548]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d005      	beq.n	8002276 <HAL_RCC_OscConfig+0x62>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e3a2      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a1a      	ldr	r2, [r3, #32]
 800227a:	4b82      	ldr	r3, [pc, #520]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d004      	beq.n	8002290 <HAL_RCC_OscConfig+0x7c>
 8002286:	4b7f      	ldr	r3, [pc, #508]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800228e:	e005      	b.n	800229c <HAL_RCC_OscConfig+0x88>
 8002290:	4b7c      	ldr	r3, [pc, #496]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002296:	091b      	lsrs	r3, r3, #4
 8002298:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800229c:	4293      	cmp	r3, r2
 800229e:	d223      	bcs.n	80022e8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fd87 	bl	8002db8 <RCC_SetFlashLatencyFromMSIRange>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e383      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022b4:	4b73      	ldr	r3, [pc, #460]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a72      	ldr	r2, [pc, #456]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022ba:	f043 0308 	orr.w	r3, r3, #8
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	4b70      	ldr	r3, [pc, #448]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	496d      	ldr	r1, [pc, #436]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022d2:	4b6c      	ldr	r3, [pc, #432]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	021b      	lsls	r3, r3, #8
 80022e0:	4968      	ldr	r1, [pc, #416]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	604b      	str	r3, [r1, #4]
 80022e6:	e025      	b.n	8002334 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022e8:	4b66      	ldr	r3, [pc, #408]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a65      	ldr	r2, [pc, #404]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022ee:	f043 0308 	orr.w	r3, r3, #8
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	4b63      	ldr	r3, [pc, #396]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	4960      	ldr	r1, [pc, #384]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002302:	4313      	orrs	r3, r2
 8002304:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002306:	4b5f      	ldr	r3, [pc, #380]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	021b      	lsls	r3, r3, #8
 8002314:	495b      	ldr	r1, [pc, #364]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002316:	4313      	orrs	r3, r2
 8002318:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d109      	bne.n	8002334 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	4618      	mov	r0, r3
 8002326:	f000 fd47 	bl	8002db8 <RCC_SetFlashLatencyFromMSIRange>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e343      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002334:	f000 fc4a 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8002338:	4602      	mov	r2, r0
 800233a:	4b52      	ldr	r3, [pc, #328]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	091b      	lsrs	r3, r3, #4
 8002340:	f003 030f 	and.w	r3, r3, #15
 8002344:	4950      	ldr	r1, [pc, #320]	; (8002488 <HAL_RCC_OscConfig+0x274>)
 8002346:	5ccb      	ldrb	r3, [r1, r3]
 8002348:	f003 031f 	and.w	r3, r3, #31
 800234c:	fa22 f303 	lsr.w	r3, r2, r3
 8002350:	4a4e      	ldr	r2, [pc, #312]	; (800248c <HAL_RCC_OscConfig+0x278>)
 8002352:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002354:	4b4e      	ldr	r3, [pc, #312]	; (8002490 <HAL_RCC_OscConfig+0x27c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff f87b 	bl	8001454 <HAL_InitTick>
 800235e:	4603      	mov	r3, r0
 8002360:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d052      	beq.n	800240e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	e327      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d032      	beq.n	80023da <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002374:	4b43      	ldr	r3, [pc, #268]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a42      	ldr	r2, [pc, #264]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002380:	f7ff fbb4 	bl	8001aec <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002388:	f7ff fbb0 	bl	8001aec <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e310      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800239a:	4b3a      	ldr	r3, [pc, #232]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023a6:	4b37      	ldr	r3, [pc, #220]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a36      	ldr	r2, [pc, #216]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023ac:	f043 0308 	orr.w	r3, r3, #8
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	4b34      	ldr	r3, [pc, #208]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	4931      	ldr	r1, [pc, #196]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023c4:	4b2f      	ldr	r3, [pc, #188]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	69db      	ldr	r3, [r3, #28]
 80023d0:	021b      	lsls	r3, r3, #8
 80023d2:	492c      	ldr	r1, [pc, #176]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	604b      	str	r3, [r1, #4]
 80023d8:	e01a      	b.n	8002410 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023da:	4b2a      	ldr	r3, [pc, #168]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a29      	ldr	r2, [pc, #164]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023e0:	f023 0301 	bic.w	r3, r3, #1
 80023e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023e6:	f7ff fb81 	bl	8001aec <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023ee:	f7ff fb7d 	bl	8001aec <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e2dd      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002400:	4b20      	ldr	r3, [pc, #128]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1f0      	bne.n	80023ee <HAL_RCC_OscConfig+0x1da>
 800240c:	e000      	b.n	8002410 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800240e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	d074      	beq.n	8002506 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	2b08      	cmp	r3, #8
 8002420:	d005      	beq.n	800242e <HAL_RCC_OscConfig+0x21a>
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	2b0c      	cmp	r3, #12
 8002426:	d10e      	bne.n	8002446 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	2b03      	cmp	r3, #3
 800242c:	d10b      	bne.n	8002446 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242e:	4b15      	ldr	r3, [pc, #84]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d064      	beq.n	8002504 <HAL_RCC_OscConfig+0x2f0>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d160      	bne.n	8002504 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e2ba      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800244e:	d106      	bne.n	800245e <HAL_RCC_OscConfig+0x24a>
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a0b      	ldr	r2, [pc, #44]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245a:	6013      	str	r3, [r2, #0]
 800245c:	e026      	b.n	80024ac <HAL_RCC_OscConfig+0x298>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002466:	d115      	bne.n	8002494 <HAL_RCC_OscConfig+0x280>
 8002468:	4b06      	ldr	r3, [pc, #24]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a05      	ldr	r2, [pc, #20]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 800246e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	4b03      	ldr	r3, [pc, #12]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a02      	ldr	r2, [pc, #8]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 800247a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	e014      	b.n	80024ac <HAL_RCC_OscConfig+0x298>
 8002482:	bf00      	nop
 8002484:	40021000 	.word	0x40021000
 8002488:	0800b198 	.word	0x0800b198
 800248c:	20000000 	.word	0x20000000
 8002490:	20000004 	.word	0x20000004
 8002494:	4ba0      	ldr	r3, [pc, #640]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a9f      	ldr	r2, [pc, #636]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800249a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	4b9d      	ldr	r3, [pc, #628]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a9c      	ldr	r2, [pc, #624]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80024a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d013      	beq.n	80024dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b4:	f7ff fb1a 	bl	8001aec <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024bc:	f7ff fb16 	bl	8001aec <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b64      	cmp	r3, #100	; 0x64
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e276      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ce:	4b92      	ldr	r3, [pc, #584]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f0      	beq.n	80024bc <HAL_RCC_OscConfig+0x2a8>
 80024da:	e014      	b.n	8002506 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024dc:	f7ff fb06 	bl	8001aec <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e4:	f7ff fb02 	bl	8001aec <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b64      	cmp	r3, #100	; 0x64
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e262      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024f6:	4b88      	ldr	r3, [pc, #544]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x2d0>
 8002502:	e000      	b.n	8002506 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d060      	beq.n	80025d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	2b04      	cmp	r3, #4
 8002516:	d005      	beq.n	8002524 <HAL_RCC_OscConfig+0x310>
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	2b0c      	cmp	r3, #12
 800251c:	d119      	bne.n	8002552 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	2b02      	cmp	r3, #2
 8002522:	d116      	bne.n	8002552 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002524:	4b7c      	ldr	r3, [pc, #496]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <HAL_RCC_OscConfig+0x328>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e23f      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253c:	4b76      	ldr	r3, [pc, #472]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	061b      	lsls	r3, r3, #24
 800254a:	4973      	ldr	r1, [pc, #460]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800254c:	4313      	orrs	r3, r2
 800254e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002550:	e040      	b.n	80025d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d023      	beq.n	80025a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800255a:	4b6f      	ldr	r3, [pc, #444]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a6e      	ldr	r2, [pc, #440]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 8002560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002564:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002566:	f7ff fac1 	bl	8001aec <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800256e:	f7ff fabd 	bl	8001aec <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e21d      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002580:	4b65      	ldr	r3, [pc, #404]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0f0      	beq.n	800256e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258c:	4b62      	ldr	r3, [pc, #392]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	061b      	lsls	r3, r3, #24
 800259a:	495f      	ldr	r1, [pc, #380]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800259c:	4313      	orrs	r3, r2
 800259e:	604b      	str	r3, [r1, #4]
 80025a0:	e018      	b.n	80025d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025a2:	4b5d      	ldr	r3, [pc, #372]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a5c      	ldr	r2, [pc, #368]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80025a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ae:	f7ff fa9d 	bl	8001aec <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b6:	f7ff fa99 	bl	8001aec <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e1f9      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025c8:	4b53      	ldr	r3, [pc, #332]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1f0      	bne.n	80025b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0308 	and.w	r3, r3, #8
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d03c      	beq.n	800265a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d01c      	beq.n	8002622 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e8:	4b4b      	ldr	r3, [pc, #300]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80025ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ee:	4a4a      	ldr	r2, [pc, #296]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f8:	f7ff fa78 	bl	8001aec <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002600:	f7ff fa74 	bl	8001aec <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e1d4      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002612:	4b41      	ldr	r3, [pc, #260]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 8002614:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0ef      	beq.n	8002600 <HAL_RCC_OscConfig+0x3ec>
 8002620:	e01b      	b.n	800265a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002622:	4b3d      	ldr	r3, [pc, #244]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 8002624:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002628:	4a3b      	ldr	r2, [pc, #236]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800262a:	f023 0301 	bic.w	r3, r3, #1
 800262e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002632:	f7ff fa5b 	bl	8001aec <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800263a:	f7ff fa57 	bl	8001aec <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e1b7      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800264c:	4b32      	ldr	r3, [pc, #200]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800264e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1ef      	bne.n	800263a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 80a6 	beq.w	80027b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002668:	2300      	movs	r3, #0
 800266a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800266c:	4b2a      	ldr	r3, [pc, #168]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800266e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10d      	bne.n	8002694 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002678:	4b27      	ldr	r3, [pc, #156]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800267a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267c:	4a26      	ldr	r2, [pc, #152]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800267e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002682:	6593      	str	r3, [r2, #88]	; 0x58
 8002684:	4b24      	ldr	r3, [pc, #144]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 8002686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002690:	2301      	movs	r3, #1
 8002692:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002694:	4b21      	ldr	r3, [pc, #132]	; (800271c <HAL_RCC_OscConfig+0x508>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269c:	2b00      	cmp	r3, #0
 800269e:	d118      	bne.n	80026d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026a0:	4b1e      	ldr	r3, [pc, #120]	; (800271c <HAL_RCC_OscConfig+0x508>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a1d      	ldr	r2, [pc, #116]	; (800271c <HAL_RCC_OscConfig+0x508>)
 80026a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ac:	f7ff fa1e 	bl	8001aec <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b4:	f7ff fa1a 	bl	8001aec <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e17a      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026c6:	4b15      	ldr	r3, [pc, #84]	; (800271c <HAL_RCC_OscConfig+0x508>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f0      	beq.n	80026b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d108      	bne.n	80026ec <HAL_RCC_OscConfig+0x4d8>
 80026da:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80026dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e0:	4a0d      	ldr	r2, [pc, #52]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026ea:	e029      	b.n	8002740 <HAL_RCC_OscConfig+0x52c>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b05      	cmp	r3, #5
 80026f2:	d115      	bne.n	8002720 <HAL_RCC_OscConfig+0x50c>
 80026f4:	4b08      	ldr	r3, [pc, #32]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80026f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fa:	4a07      	ldr	r2, [pc, #28]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80026fc:	f043 0304 	orr.w	r3, r3, #4
 8002700:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002704:	4b04      	ldr	r3, [pc, #16]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 8002706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270a:	4a03      	ldr	r2, [pc, #12]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002714:	e014      	b.n	8002740 <HAL_RCC_OscConfig+0x52c>
 8002716:	bf00      	nop
 8002718:	40021000 	.word	0x40021000
 800271c:	40007000 	.word	0x40007000
 8002720:	4b9c      	ldr	r3, [pc, #624]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002726:	4a9b      	ldr	r2, [pc, #620]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002728:	f023 0301 	bic.w	r3, r3, #1
 800272c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002730:	4b98      	ldr	r3, [pc, #608]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002736:	4a97      	ldr	r2, [pc, #604]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002738:	f023 0304 	bic.w	r3, r3, #4
 800273c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d016      	beq.n	8002776 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002748:	f7ff f9d0 	bl	8001aec <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800274e:	e00a      	b.n	8002766 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002750:	f7ff f9cc 	bl	8001aec <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	f241 3288 	movw	r2, #5000	; 0x1388
 800275e:	4293      	cmp	r3, r2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e12a      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002766:	4b8b      	ldr	r3, [pc, #556]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0ed      	beq.n	8002750 <HAL_RCC_OscConfig+0x53c>
 8002774:	e015      	b.n	80027a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002776:	f7ff f9b9 	bl	8001aec <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800277c:	e00a      	b.n	8002794 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277e:	f7ff f9b5 	bl	8001aec <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	f241 3288 	movw	r2, #5000	; 0x1388
 800278c:	4293      	cmp	r3, r2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e113      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002794:	4b7f      	ldr	r3, [pc, #508]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1ed      	bne.n	800277e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027a2:	7ffb      	ldrb	r3, [r7, #31]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d105      	bne.n	80027b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a8:	4b7a      	ldr	r3, [pc, #488]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 80027aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ac:	4a79      	ldr	r2, [pc, #484]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 80027ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027b2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 80fe 	beq.w	80029ba <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	f040 80d0 	bne.w	8002968 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027c8:	4b72      	ldr	r3, [pc, #456]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f003 0203 	and.w	r2, r3, #3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	429a      	cmp	r2, r3
 80027da:	d130      	bne.n	800283e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	3b01      	subs	r3, #1
 80027e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d127      	bne.n	800283e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d11f      	bne.n	800283e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002808:	2a07      	cmp	r2, #7
 800280a:	bf14      	ite	ne
 800280c:	2201      	movne	r2, #1
 800280e:	2200      	moveq	r2, #0
 8002810:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002812:	4293      	cmp	r3, r2
 8002814:	d113      	bne.n	800283e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002820:	085b      	lsrs	r3, r3, #1
 8002822:	3b01      	subs	r3, #1
 8002824:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002826:	429a      	cmp	r2, r3
 8002828:	d109      	bne.n	800283e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002834:	085b      	lsrs	r3, r3, #1
 8002836:	3b01      	subs	r3, #1
 8002838:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800283a:	429a      	cmp	r2, r3
 800283c:	d06e      	beq.n	800291c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	2b0c      	cmp	r3, #12
 8002842:	d069      	beq.n	8002918 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002844:	4b53      	ldr	r3, [pc, #332]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d105      	bne.n	800285c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002850:	4b50      	ldr	r3, [pc, #320]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0ad      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002860:	4b4c      	ldr	r3, [pc, #304]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a4b      	ldr	r2, [pc, #300]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002866:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800286a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800286c:	f7ff f93e 	bl	8001aec <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002874:	f7ff f93a 	bl	8001aec <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e09a      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002886:	4b43      	ldr	r3, [pc, #268]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002892:	4b40      	ldr	r3, [pc, #256]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	4b40      	ldr	r3, [pc, #256]	; (8002998 <HAL_RCC_OscConfig+0x784>)
 8002898:	4013      	ands	r3, r2
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028a2:	3a01      	subs	r2, #1
 80028a4:	0112      	lsls	r2, r2, #4
 80028a6:	4311      	orrs	r1, r2
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028ac:	0212      	lsls	r2, r2, #8
 80028ae:	4311      	orrs	r1, r2
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028b4:	0852      	lsrs	r2, r2, #1
 80028b6:	3a01      	subs	r2, #1
 80028b8:	0552      	lsls	r2, r2, #21
 80028ba:	4311      	orrs	r1, r2
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028c0:	0852      	lsrs	r2, r2, #1
 80028c2:	3a01      	subs	r2, #1
 80028c4:	0652      	lsls	r2, r2, #25
 80028c6:	4311      	orrs	r1, r2
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028cc:	0912      	lsrs	r2, r2, #4
 80028ce:	0452      	lsls	r2, r2, #17
 80028d0:	430a      	orrs	r2, r1
 80028d2:	4930      	ldr	r1, [pc, #192]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028d8:	4b2e      	ldr	r3, [pc, #184]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a2d      	ldr	r2, [pc, #180]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 80028de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028e4:	4b2b      	ldr	r3, [pc, #172]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	4a2a      	ldr	r2, [pc, #168]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 80028ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028f0:	f7ff f8fc 	bl	8001aec <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f8:	f7ff f8f8 	bl	8001aec <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e058      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800290a:	4b22      	ldr	r3, [pc, #136]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002916:	e050      	b.n	80029ba <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e04f      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800291c:	4b1d      	ldr	r3, [pc, #116]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d148      	bne.n	80029ba <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002928:	4b1a      	ldr	r3, [pc, #104]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a19      	ldr	r2, [pc, #100]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 800292e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002932:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002934:	4b17      	ldr	r3, [pc, #92]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	4a16      	ldr	r2, [pc, #88]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 800293a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800293e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002940:	f7ff f8d4 	bl	8001aec <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002948:	f7ff f8d0 	bl	8001aec <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e030      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f0      	beq.n	8002948 <HAL_RCC_OscConfig+0x734>
 8002966:	e028      	b.n	80029ba <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	2b0c      	cmp	r3, #12
 800296c:	d023      	beq.n	80029b6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800296e:	4b09      	ldr	r3, [pc, #36]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a08      	ldr	r2, [pc, #32]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002974:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002978:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297a:	f7ff f8b7 	bl	8001aec <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002980:	e00c      	b.n	800299c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002982:	f7ff f8b3 	bl	8001aec <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d905      	bls.n	800299c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e013      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
 8002994:	40021000 	.word	0x40021000
 8002998:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800299c:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <HAL_RCC_OscConfig+0x7b0>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1ec      	bne.n	8002982 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_RCC_OscConfig+0x7b0>)
 80029aa:	68da      	ldr	r2, [r3, #12]
 80029ac:	4905      	ldr	r1, [pc, #20]	; (80029c4 <HAL_RCC_OscConfig+0x7b0>)
 80029ae:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <HAL_RCC_OscConfig+0x7b4>)
 80029b0:	4013      	ands	r3, r2
 80029b2:	60cb      	str	r3, [r1, #12]
 80029b4:	e001      	b.n	80029ba <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3720      	adds	r7, #32
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40021000 	.word	0x40021000
 80029c8:	feeefffc 	.word	0xfeeefffc

080029cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e0e7      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029e0:	4b75      	ldr	r3, [pc, #468]	; (8002bb8 <HAL_RCC_ClockConfig+0x1ec>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d910      	bls.n	8002a10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ee:	4b72      	ldr	r3, [pc, #456]	; (8002bb8 <HAL_RCC_ClockConfig+0x1ec>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f023 0207 	bic.w	r2, r3, #7
 80029f6:	4970      	ldr	r1, [pc, #448]	; (8002bb8 <HAL_RCC_ClockConfig+0x1ec>)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fe:	4b6e      	ldr	r3, [pc, #440]	; (8002bb8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d001      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0cf      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d010      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	4b66      	ldr	r3, [pc, #408]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d908      	bls.n	8002a3e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a2c:	4b63      	ldr	r3, [pc, #396]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	4960      	ldr	r1, [pc, #384]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d04c      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d107      	bne.n	8002a62 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a52:	4b5a      	ldr	r3, [pc, #360]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d121      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e0a6      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d107      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a6a:	4b54      	ldr	r3, [pc, #336]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d115      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e09a      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d107      	bne.n	8002a92 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a82:	4b4e      	ldr	r3, [pc, #312]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d109      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e08e      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a92:	4b4a      	ldr	r3, [pc, #296]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e086      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002aa2:	4b46      	ldr	r3, [pc, #280]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f023 0203 	bic.w	r2, r3, #3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	4943      	ldr	r1, [pc, #268]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ab4:	f7ff f81a 	bl	8001aec <HAL_GetTick>
 8002ab8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aba:	e00a      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002abc:	f7ff f816 	bl	8001aec <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e06e      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad2:	4b3a      	ldr	r3, [pc, #232]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 020c 	and.w	r2, r3, #12
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d1eb      	bne.n	8002abc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d010      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	4b31      	ldr	r3, [pc, #196]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d208      	bcs.n	8002b12 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b00:	4b2e      	ldr	r3, [pc, #184]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	492b      	ldr	r1, [pc, #172]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b12:	4b29      	ldr	r3, [pc, #164]	; (8002bb8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d210      	bcs.n	8002b42 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b20:	4b25      	ldr	r3, [pc, #148]	; (8002bb8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f023 0207 	bic.w	r2, r3, #7
 8002b28:	4923      	ldr	r1, [pc, #140]	; (8002bb8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b30:	4b21      	ldr	r3, [pc, #132]	; (8002bb8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d001      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e036      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d008      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b4e:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	4918      	ldr	r1, [pc, #96]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d009      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b6c:	4b13      	ldr	r3, [pc, #76]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4910      	ldr	r1, [pc, #64]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b80:	f000 f824 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8002b84:	4602      	mov	r2, r0
 8002b86:	4b0d      	ldr	r3, [pc, #52]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	091b      	lsrs	r3, r3, #4
 8002b8c:	f003 030f 	and.w	r3, r3, #15
 8002b90:	490b      	ldr	r1, [pc, #44]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f4>)
 8002b92:	5ccb      	ldrb	r3, [r1, r3]
 8002b94:	f003 031f 	and.w	r3, r3, #31
 8002b98:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9c:	4a09      	ldr	r2, [pc, #36]	; (8002bc4 <HAL_RCC_ClockConfig+0x1f8>)
 8002b9e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ba0:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <HAL_RCC_ClockConfig+0x1fc>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fe fc55 	bl	8001454 <HAL_InitTick>
 8002baa:	4603      	mov	r3, r0
 8002bac:	72fb      	strb	r3, [r7, #11]

  return status;
 8002bae:	7afb      	ldrb	r3, [r7, #11]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40022000 	.word	0x40022000
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	0800b198 	.word	0x0800b198
 8002bc4:	20000000 	.word	0x20000000
 8002bc8:	20000004 	.word	0x20000004

08002bcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b089      	sub	sp, #36	; 0x24
 8002bd0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bda:	4b3e      	ldr	r3, [pc, #248]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 030c 	and.w	r3, r3, #12
 8002be2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002be4:	4b3b      	ldr	r3, [pc, #236]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f003 0303 	and.w	r3, r3, #3
 8002bec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d005      	beq.n	8002c00 <HAL_RCC_GetSysClockFreq+0x34>
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	2b0c      	cmp	r3, #12
 8002bf8:	d121      	bne.n	8002c3e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d11e      	bne.n	8002c3e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c00:	4b34      	ldr	r3, [pc, #208]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d107      	bne.n	8002c1c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c0c:	4b31      	ldr	r3, [pc, #196]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c12:	0a1b      	lsrs	r3, r3, #8
 8002c14:	f003 030f 	and.w	r3, r3, #15
 8002c18:	61fb      	str	r3, [r7, #28]
 8002c1a:	e005      	b.n	8002c28 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c1c:	4b2d      	ldr	r3, [pc, #180]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	091b      	lsrs	r3, r3, #4
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c28:	4a2b      	ldr	r2, [pc, #172]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c30:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10d      	bne.n	8002c54 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c3c:	e00a      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d102      	bne.n	8002c4a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c44:	4b25      	ldr	r3, [pc, #148]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x110>)
 8002c46:	61bb      	str	r3, [r7, #24]
 8002c48:	e004      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d101      	bne.n	8002c54 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c50:	4b23      	ldr	r3, [pc, #140]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c52:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	2b0c      	cmp	r3, #12
 8002c58:	d134      	bne.n	8002cc4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c5a:	4b1e      	ldr	r3, [pc, #120]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d003      	beq.n	8002c72 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2b03      	cmp	r3, #3
 8002c6e:	d003      	beq.n	8002c78 <HAL_RCC_GetSysClockFreq+0xac>
 8002c70:	e005      	b.n	8002c7e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c72:	4b1a      	ldr	r3, [pc, #104]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x110>)
 8002c74:	617b      	str	r3, [r7, #20]
      break;
 8002c76:	e005      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c78:	4b19      	ldr	r3, [pc, #100]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c7a:	617b      	str	r3, [r7, #20]
      break;
 8002c7c:	e002      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	617b      	str	r3, [r7, #20]
      break;
 8002c82:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c84:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	3301      	adds	r3, #1
 8002c90:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c92:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	0a1b      	lsrs	r3, r3, #8
 8002c98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	fb03 f202 	mul.w	r2, r3, r2
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002caa:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	0e5b      	lsrs	r3, r3, #25
 8002cb0:	f003 0303 	and.w	r3, r3, #3
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002cc4:	69bb      	ldr	r3, [r7, #24]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3724      	adds	r7, #36	; 0x24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	0800b1b0 	.word	0x0800b1b0
 8002cdc:	00f42400 	.word	0x00f42400
 8002ce0:	007a1200 	.word	0x007a1200

08002ce4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ce8:	4b03      	ldr	r3, [pc, #12]	; (8002cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cea:	681b      	ldr	r3, [r3, #0]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	20000000 	.word	0x20000000

08002cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d00:	f7ff fff0 	bl	8002ce4 <HAL_RCC_GetHCLKFreq>
 8002d04:	4602      	mov	r2, r0
 8002d06:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	0a1b      	lsrs	r3, r3, #8
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	4904      	ldr	r1, [pc, #16]	; (8002d24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d12:	5ccb      	ldrb	r3, [r1, r3]
 8002d14:	f003 031f 	and.w	r3, r3, #31
 8002d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40021000 	.word	0x40021000
 8002d24:	0800b1a8 	.word	0x0800b1a8

08002d28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d2c:	f7ff ffda 	bl	8002ce4 <HAL_RCC_GetHCLKFreq>
 8002d30:	4602      	mov	r2, r0
 8002d32:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	0adb      	lsrs	r3, r3, #11
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	4904      	ldr	r1, [pc, #16]	; (8002d50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d3e:	5ccb      	ldrb	r3, [r1, r3]
 8002d40:	f003 031f 	and.w	r3, r3, #31
 8002d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	0800b1a8 	.word	0x0800b1a8

08002d54 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	220f      	movs	r2, #15
 8002d62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002d64:	4b12      	ldr	r3, [pc, #72]	; (8002db0 <HAL_RCC_GetClockConfig+0x5c>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 0203 	and.w	r2, r3, #3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002d70:	4b0f      	ldr	r3, [pc, #60]	; (8002db0 <HAL_RCC_GetClockConfig+0x5c>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002d7c:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <HAL_RCC_GetClockConfig+0x5c>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002d88:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <HAL_RCC_GetClockConfig+0x5c>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	08db      	lsrs	r3, r3, #3
 8002d8e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002d96:	4b07      	ldr	r3, [pc, #28]	; (8002db4 <HAL_RCC_GetClockConfig+0x60>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0207 	and.w	r2, r3, #7
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	601a      	str	r2, [r3, #0]
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40021000 	.word	0x40021000
 8002db4:	40022000 	.word	0x40022000

08002db8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002dc4:	4b2a      	ldr	r3, [pc, #168]	; (8002e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002dd0:	f7ff f9bc 	bl	800214c <HAL_PWREx_GetVoltageRange>
 8002dd4:	6178      	str	r0, [r7, #20]
 8002dd6:	e014      	b.n	8002e02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dd8:	4b25      	ldr	r3, [pc, #148]	; (8002e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ddc:	4a24      	ldr	r2, [pc, #144]	; (8002e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de2:	6593      	str	r3, [r2, #88]	; 0x58
 8002de4:	4b22      	ldr	r3, [pc, #136]	; (8002e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002df0:	f7ff f9ac 	bl	800214c <HAL_PWREx_GetVoltageRange>
 8002df4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002df6:	4b1e      	ldr	r3, [pc, #120]	; (8002e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfa:	4a1d      	ldr	r2, [pc, #116]	; (8002e70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e00:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e08:	d10b      	bne.n	8002e22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b80      	cmp	r3, #128	; 0x80
 8002e0e:	d919      	bls.n	8002e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2ba0      	cmp	r3, #160	; 0xa0
 8002e14:	d902      	bls.n	8002e1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e16:	2302      	movs	r3, #2
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	e013      	b.n	8002e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	e010      	b.n	8002e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b80      	cmp	r3, #128	; 0x80
 8002e26:	d902      	bls.n	8002e2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e28:	2303      	movs	r3, #3
 8002e2a:	613b      	str	r3, [r7, #16]
 8002e2c:	e00a      	b.n	8002e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b80      	cmp	r3, #128	; 0x80
 8002e32:	d102      	bne.n	8002e3a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e34:	2302      	movs	r3, #2
 8002e36:	613b      	str	r3, [r7, #16]
 8002e38:	e004      	b.n	8002e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b70      	cmp	r3, #112	; 0x70
 8002e3e:	d101      	bne.n	8002e44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e40:	2301      	movs	r3, #1
 8002e42:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e44:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f023 0207 	bic.w	r2, r3, #7
 8002e4c:	4909      	ldr	r1, [pc, #36]	; (8002e74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e54:	4b07      	ldr	r3, [pc, #28]	; (8002e74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d001      	beq.n	8002e66 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40021000 	.word	0x40021000
 8002e74:	40022000 	.word	0x40022000

08002e78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e80:	2300      	movs	r3, #0
 8002e82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e84:	2300      	movs	r3, #0
 8002e86:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d041      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e98:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e9c:	d02a      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002e9e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ea2:	d824      	bhi.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ea4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ea8:	d008      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002eaa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002eae:	d81e      	bhi.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00a      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002eb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eb8:	d010      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002eba:	e018      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ebc:	4b86      	ldr	r3, [pc, #536]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	4a85      	ldr	r2, [pc, #532]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ec8:	e015      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3304      	adds	r3, #4
 8002ece:	2100      	movs	r1, #0
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 fabb 	bl	800344c <RCCEx_PLLSAI1_Config>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002eda:	e00c      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3320      	adds	r3, #32
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 fba6 	bl	8003634 <RCCEx_PLLSAI2_Config>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002eec:	e003      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	74fb      	strb	r3, [r7, #19]
      break;
 8002ef2:	e000      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002ef4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ef6:	7cfb      	ldrb	r3, [r7, #19]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10b      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002efc:	4b76      	ldr	r3, [pc, #472]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f0a:	4973      	ldr	r1, [pc, #460]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f12:	e001      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f14:	7cfb      	ldrb	r3, [r7, #19]
 8002f16:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d041      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f28:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f2c:	d02a      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002f2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f32:	d824      	bhi.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f38:	d008      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f3e:	d81e      	bhi.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00a      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f48:	d010      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f4a:	e018      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f4c:	4b62      	ldr	r3, [pc, #392]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	4a61      	ldr	r2, [pc, #388]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f56:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f58:	e015      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	2100      	movs	r1, #0
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 fa73 	bl	800344c <RCCEx_PLLSAI1_Config>
 8002f66:	4603      	mov	r3, r0
 8002f68:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f6a:	e00c      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3320      	adds	r3, #32
 8002f70:	2100      	movs	r1, #0
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 fb5e 	bl	8003634 <RCCEx_PLLSAI2_Config>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f7c:	e003      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	74fb      	strb	r3, [r7, #19]
      break;
 8002f82:	e000      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002f84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f86:	7cfb      	ldrb	r3, [r7, #19]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10b      	bne.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f8c:	4b52      	ldr	r3, [pc, #328]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f92:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f9a:	494f      	ldr	r1, [pc, #316]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002fa2:	e001      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa4:	7cfb      	ldrb	r3, [r7, #19]
 8002fa6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 80a0 	beq.w	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fba:	4b47      	ldr	r3, [pc, #284]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002fca:	2300      	movs	r3, #0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00d      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd0:	4b41      	ldr	r3, [pc, #260]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd4:	4a40      	ldr	r2, [pc, #256]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fda:	6593      	str	r3, [r2, #88]	; 0x58
 8002fdc:	4b3e      	ldr	r3, [pc, #248]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fec:	4b3b      	ldr	r3, [pc, #236]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a3a      	ldr	r2, [pc, #232]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ff8:	f7fe fd78 	bl	8001aec <HAL_GetTick>
 8002ffc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ffe:	e009      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003000:	f7fe fd74 	bl	8001aec <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d902      	bls.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	74fb      	strb	r3, [r7, #19]
        break;
 8003012:	e005      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003014:	4b31      	ldr	r3, [pc, #196]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0ef      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003020:	7cfb      	ldrb	r3, [r7, #19]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d15c      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003026:	4b2c      	ldr	r3, [pc, #176]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003030:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d01f      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	429a      	cmp	r2, r3
 8003042:	d019      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003044:	4b24      	ldr	r3, [pc, #144]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800304e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003050:	4b21      	ldr	r3, [pc, #132]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003056:	4a20      	ldr	r2, [pc, #128]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800305c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003060:	4b1d      	ldr	r3, [pc, #116]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003066:	4a1c      	ldr	r2, [pc, #112]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800306c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003070:	4a19      	ldr	r2, [pc, #100]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d016      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003082:	f7fe fd33 	bl	8001aec <HAL_GetTick>
 8003086:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003088:	e00b      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308a:	f7fe fd2f 	bl	8001aec <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	f241 3288 	movw	r2, #5000	; 0x1388
 8003098:	4293      	cmp	r3, r2
 800309a:	d902      	bls.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	74fb      	strb	r3, [r7, #19]
            break;
 80030a0:	e006      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030a2:	4b0d      	ldr	r3, [pc, #52]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0ec      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80030b0:	7cfb      	ldrb	r3, [r7, #19]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10c      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030b6:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030c6:	4904      	ldr	r1, [pc, #16]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030ce:	e009      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030d0:	7cfb      	ldrb	r3, [r7, #19]
 80030d2:	74bb      	strb	r3, [r7, #18]
 80030d4:	e006      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80030d6:	bf00      	nop
 80030d8:	40021000 	.word	0x40021000
 80030dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e0:	7cfb      	ldrb	r3, [r7, #19]
 80030e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030e4:	7c7b      	ldrb	r3, [r7, #17]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d105      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ea:	4b9e      	ldr	r3, [pc, #632]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ee:	4a9d      	ldr	r2, [pc, #628]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00a      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003102:	4b98      	ldr	r3, [pc, #608]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003108:	f023 0203 	bic.w	r2, r3, #3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	4994      	ldr	r1, [pc, #592]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003112:	4313      	orrs	r3, r2
 8003114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00a      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003124:	4b8f      	ldr	r3, [pc, #572]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312a:	f023 020c 	bic.w	r2, r3, #12
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003132:	498c      	ldr	r1, [pc, #560]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003134:	4313      	orrs	r3, r2
 8003136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00a      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003146:	4b87      	ldr	r3, [pc, #540]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	4983      	ldr	r1, [pc, #524]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003156:	4313      	orrs	r3, r2
 8003158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00a      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003168:	4b7e      	ldr	r3, [pc, #504]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800316a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003176:	497b      	ldr	r1, [pc, #492]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0310 	and.w	r3, r3, #16
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800318a:	4b76      	ldr	r3, [pc, #472]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003190:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003198:	4972      	ldr	r1, [pc, #456]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800319a:	4313      	orrs	r3, r2
 800319c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0320 	and.w	r3, r3, #32
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00a      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031ac:	4b6d      	ldr	r3, [pc, #436]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ba:	496a      	ldr	r1, [pc, #424]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031ce:	4b65      	ldr	r3, [pc, #404]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031dc:	4961      	ldr	r1, [pc, #388]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00a      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031f0:	4b5c      	ldr	r3, [pc, #368]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031fe:	4959      	ldr	r1, [pc, #356]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003200:	4313      	orrs	r3, r2
 8003202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00a      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003212:	4b54      	ldr	r3, [pc, #336]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003218:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003220:	4950      	ldr	r1, [pc, #320]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003222:	4313      	orrs	r3, r2
 8003224:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00a      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003234:	4b4b      	ldr	r3, [pc, #300]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003242:	4948      	ldr	r1, [pc, #288]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003244:	4313      	orrs	r3, r2
 8003246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00a      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003256:	4b43      	ldr	r3, [pc, #268]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003264:	493f      	ldr	r1, [pc, #252]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003266:	4313      	orrs	r3, r2
 8003268:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d028      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003278:	4b3a      	ldr	r3, [pc, #232]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800327a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003286:	4937      	ldr	r1, [pc, #220]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003288:	4313      	orrs	r3, r2
 800328a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003292:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003296:	d106      	bne.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003298:	4b32      	ldr	r3, [pc, #200]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	4a31      	ldr	r2, [pc, #196]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032a2:	60d3      	str	r3, [r2, #12]
 80032a4:	e011      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032ae:	d10c      	bne.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3304      	adds	r3, #4
 80032b4:	2101      	movs	r1, #1
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 f8c8 	bl	800344c <RCCEx_PLLSAI1_Config>
 80032bc:	4603      	mov	r3, r0
 80032be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032c0:	7cfb      	ldrb	r3, [r7, #19]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80032c6:	7cfb      	ldrb	r3, [r7, #19]
 80032c8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d028      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032d6:	4b23      	ldr	r3, [pc, #140]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e4:	491f      	ldr	r1, [pc, #124]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032f4:	d106      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032f6:	4b1b      	ldr	r3, [pc, #108]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	4a1a      	ldr	r2, [pc, #104]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003300:	60d3      	str	r3, [r2, #12]
 8003302:	e011      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003308:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800330c:	d10c      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3304      	adds	r3, #4
 8003312:	2101      	movs	r1, #1
 8003314:	4618      	mov	r0, r3
 8003316:	f000 f899 	bl	800344c <RCCEx_PLLSAI1_Config>
 800331a:	4603      	mov	r3, r0
 800331c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800331e:	7cfb      	ldrb	r3, [r7, #19]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003324:	7cfb      	ldrb	r3, [r7, #19]
 8003326:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d02b      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003334:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003342:	4908      	ldr	r1, [pc, #32]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003344:	4313      	orrs	r3, r2
 8003346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800334e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003352:	d109      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003354:	4b03      	ldr	r3, [pc, #12]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	4a02      	ldr	r2, [pc, #8]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800335e:	60d3      	str	r3, [r2, #12]
 8003360:	e014      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003362:	bf00      	nop
 8003364:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800336c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003370:	d10c      	bne.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	3304      	adds	r3, #4
 8003376:	2101      	movs	r1, #1
 8003378:	4618      	mov	r0, r3
 800337a:	f000 f867 	bl	800344c <RCCEx_PLLSAI1_Config>
 800337e:	4603      	mov	r3, r0
 8003380:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003382:	7cfb      	ldrb	r3, [r7, #19]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003388:	7cfb      	ldrb	r3, [r7, #19]
 800338a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d02f      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003398:	4b2b      	ldr	r3, [pc, #172]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800339a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033a6:	4928      	ldr	r1, [pc, #160]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033b6:	d10d      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3304      	adds	r3, #4
 80033bc:	2102      	movs	r1, #2
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 f844 	bl	800344c <RCCEx_PLLSAI1_Config>
 80033c4:	4603      	mov	r3, r0
 80033c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033c8:	7cfb      	ldrb	r3, [r7, #19]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d014      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80033ce:	7cfb      	ldrb	r3, [r7, #19]
 80033d0:	74bb      	strb	r3, [r7, #18]
 80033d2:	e011      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033dc:	d10c      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	3320      	adds	r3, #32
 80033e2:	2102      	movs	r1, #2
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 f925 	bl	8003634 <RCCEx_PLLSAI2_Config>
 80033ea:	4603      	mov	r3, r0
 80033ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033ee:	7cfb      	ldrb	r3, [r7, #19]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80033f4:	7cfb      	ldrb	r3, [r7, #19]
 80033f6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00a      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003404:	4b10      	ldr	r3, [pc, #64]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003412:	490d      	ldr	r1, [pc, #52]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003414:	4313      	orrs	r3, r2
 8003416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00b      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003426:	4b08      	ldr	r3, [pc, #32]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003436:	4904      	ldr	r1, [pc, #16]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003438:	4313      	orrs	r3, r2
 800343a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800343e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40021000 	.word	0x40021000

0800344c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800345a:	4b75      	ldr	r3, [pc, #468]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d018      	beq.n	8003498 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003466:	4b72      	ldr	r3, [pc, #456]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f003 0203 	and.w	r2, r3, #3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d10d      	bne.n	8003492 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
       ||
 800347a:	2b00      	cmp	r3, #0
 800347c:	d009      	beq.n	8003492 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800347e:	4b6c      	ldr	r3, [pc, #432]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	091b      	lsrs	r3, r3, #4
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
       ||
 800348e:	429a      	cmp	r2, r3
 8003490:	d047      	beq.n	8003522 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	73fb      	strb	r3, [r7, #15]
 8003496:	e044      	b.n	8003522 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b03      	cmp	r3, #3
 800349e:	d018      	beq.n	80034d2 <RCCEx_PLLSAI1_Config+0x86>
 80034a0:	2b03      	cmp	r3, #3
 80034a2:	d825      	bhi.n	80034f0 <RCCEx_PLLSAI1_Config+0xa4>
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d002      	beq.n	80034ae <RCCEx_PLLSAI1_Config+0x62>
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d009      	beq.n	80034c0 <RCCEx_PLLSAI1_Config+0x74>
 80034ac:	e020      	b.n	80034f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034ae:	4b60      	ldr	r3, [pc, #384]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d11d      	bne.n	80034f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034be:	e01a      	b.n	80034f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034c0:	4b5b      	ldr	r3, [pc, #364]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d116      	bne.n	80034fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034d0:	e013      	b.n	80034fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034d2:	4b57      	ldr	r3, [pc, #348]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10f      	bne.n	80034fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034de:	4b54      	ldr	r3, [pc, #336]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d109      	bne.n	80034fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034ee:	e006      	b.n	80034fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	73fb      	strb	r3, [r7, #15]
      break;
 80034f4:	e004      	b.n	8003500 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034f6:	bf00      	nop
 80034f8:	e002      	b.n	8003500 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034fa:	bf00      	nop
 80034fc:	e000      	b.n	8003500 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003500:	7bfb      	ldrb	r3, [r7, #15]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10d      	bne.n	8003522 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003506:	4b4a      	ldr	r3, [pc, #296]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6819      	ldr	r1, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	3b01      	subs	r3, #1
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	430b      	orrs	r3, r1
 800351c:	4944      	ldr	r1, [pc, #272]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 800351e:	4313      	orrs	r3, r2
 8003520:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003522:	7bfb      	ldrb	r3, [r7, #15]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d17d      	bne.n	8003624 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003528:	4b41      	ldr	r3, [pc, #260]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a40      	ldr	r2, [pc, #256]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 800352e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003532:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003534:	f7fe fada 	bl	8001aec <HAL_GetTick>
 8003538:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800353a:	e009      	b.n	8003550 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800353c:	f7fe fad6 	bl	8001aec <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d902      	bls.n	8003550 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	73fb      	strb	r3, [r7, #15]
        break;
 800354e:	e005      	b.n	800355c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003550:	4b37      	ldr	r3, [pc, #220]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1ef      	bne.n	800353c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800355c:	7bfb      	ldrb	r3, [r7, #15]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d160      	bne.n	8003624 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d111      	bne.n	800358c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003568:	4b31      	ldr	r3, [pc, #196]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	6892      	ldr	r2, [r2, #8]
 8003578:	0211      	lsls	r1, r2, #8
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	68d2      	ldr	r2, [r2, #12]
 800357e:	0912      	lsrs	r2, r2, #4
 8003580:	0452      	lsls	r2, r2, #17
 8003582:	430a      	orrs	r2, r1
 8003584:	492a      	ldr	r1, [pc, #168]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003586:	4313      	orrs	r3, r2
 8003588:	610b      	str	r3, [r1, #16]
 800358a:	e027      	b.n	80035dc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d112      	bne.n	80035b8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003592:	4b27      	ldr	r3, [pc, #156]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800359a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6892      	ldr	r2, [r2, #8]
 80035a2:	0211      	lsls	r1, r2, #8
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6912      	ldr	r2, [r2, #16]
 80035a8:	0852      	lsrs	r2, r2, #1
 80035aa:	3a01      	subs	r2, #1
 80035ac:	0552      	lsls	r2, r2, #21
 80035ae:	430a      	orrs	r2, r1
 80035b0:	491f      	ldr	r1, [pc, #124]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	610b      	str	r3, [r1, #16]
 80035b6:	e011      	b.n	80035dc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035b8:	4b1d      	ldr	r3, [pc, #116]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6892      	ldr	r2, [r2, #8]
 80035c8:	0211      	lsls	r1, r2, #8
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6952      	ldr	r2, [r2, #20]
 80035ce:	0852      	lsrs	r2, r2, #1
 80035d0:	3a01      	subs	r2, #1
 80035d2:	0652      	lsls	r2, r2, #25
 80035d4:	430a      	orrs	r2, r1
 80035d6:	4916      	ldr	r1, [pc, #88]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035dc:	4b14      	ldr	r3, [pc, #80]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a13      	ldr	r2, [pc, #76]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e8:	f7fe fa80 	bl	8001aec <HAL_GetTick>
 80035ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035ee:	e009      	b.n	8003604 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035f0:	f7fe fa7c 	bl	8001aec <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d902      	bls.n	8003604 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	73fb      	strb	r3, [r7, #15]
          break;
 8003602:	e005      	b.n	8003610 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003604:	4b0a      	ldr	r3, [pc, #40]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0ef      	beq.n	80035f0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003610:	7bfb      	ldrb	r3, [r7, #15]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d106      	bne.n	8003624 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003616:	4b06      	ldr	r3, [pc, #24]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003618:	691a      	ldr	r2, [r3, #16]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	4904      	ldr	r1, [pc, #16]	; (8003630 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003620:	4313      	orrs	r3, r2
 8003622:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003624:	7bfb      	ldrb	r3, [r7, #15]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40021000 	.word	0x40021000

08003634 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003642:	4b6a      	ldr	r3, [pc, #424]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d018      	beq.n	8003680 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800364e:	4b67      	ldr	r3, [pc, #412]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	f003 0203 	and.w	r2, r3, #3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d10d      	bne.n	800367a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
       ||
 8003662:	2b00      	cmp	r3, #0
 8003664:	d009      	beq.n	800367a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003666:	4b61      	ldr	r3, [pc, #388]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	091b      	lsrs	r3, r3, #4
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
       ||
 8003676:	429a      	cmp	r2, r3
 8003678:	d047      	beq.n	800370a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	73fb      	strb	r3, [r7, #15]
 800367e:	e044      	b.n	800370a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b03      	cmp	r3, #3
 8003686:	d018      	beq.n	80036ba <RCCEx_PLLSAI2_Config+0x86>
 8003688:	2b03      	cmp	r3, #3
 800368a:	d825      	bhi.n	80036d8 <RCCEx_PLLSAI2_Config+0xa4>
 800368c:	2b01      	cmp	r3, #1
 800368e:	d002      	beq.n	8003696 <RCCEx_PLLSAI2_Config+0x62>
 8003690:	2b02      	cmp	r3, #2
 8003692:	d009      	beq.n	80036a8 <RCCEx_PLLSAI2_Config+0x74>
 8003694:	e020      	b.n	80036d8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003696:	4b55      	ldr	r3, [pc, #340]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d11d      	bne.n	80036de <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a6:	e01a      	b.n	80036de <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036a8:	4b50      	ldr	r3, [pc, #320]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d116      	bne.n	80036e2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036b8:	e013      	b.n	80036e2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036ba:	4b4c      	ldr	r3, [pc, #304]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10f      	bne.n	80036e6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036c6:	4b49      	ldr	r3, [pc, #292]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d109      	bne.n	80036e6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036d6:	e006      	b.n	80036e6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	73fb      	strb	r3, [r7, #15]
      break;
 80036dc:	e004      	b.n	80036e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036de:	bf00      	nop
 80036e0:	e002      	b.n	80036e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036e2:	bf00      	nop
 80036e4:	e000      	b.n	80036e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10d      	bne.n	800370a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036ee:	4b3f      	ldr	r3, [pc, #252]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6819      	ldr	r1, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	3b01      	subs	r3, #1
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	430b      	orrs	r3, r1
 8003704:	4939      	ldr	r1, [pc, #228]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003706:	4313      	orrs	r3, r2
 8003708:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800370a:	7bfb      	ldrb	r3, [r7, #15]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d167      	bne.n	80037e0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003710:	4b36      	ldr	r3, [pc, #216]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a35      	ldr	r2, [pc, #212]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003716:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800371a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800371c:	f7fe f9e6 	bl	8001aec <HAL_GetTick>
 8003720:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003722:	e009      	b.n	8003738 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003724:	f7fe f9e2 	bl	8001aec <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d902      	bls.n	8003738 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	73fb      	strb	r3, [r7, #15]
        break;
 8003736:	e005      	b.n	8003744 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003738:	4b2c      	ldr	r3, [pc, #176]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1ef      	bne.n	8003724 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003744:	7bfb      	ldrb	r3, [r7, #15]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d14a      	bne.n	80037e0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d111      	bne.n	8003774 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003750:	4b26      	ldr	r3, [pc, #152]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6892      	ldr	r2, [r2, #8]
 8003760:	0211      	lsls	r1, r2, #8
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	68d2      	ldr	r2, [r2, #12]
 8003766:	0912      	lsrs	r2, r2, #4
 8003768:	0452      	lsls	r2, r2, #17
 800376a:	430a      	orrs	r2, r1
 800376c:	491f      	ldr	r1, [pc, #124]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800376e:	4313      	orrs	r3, r2
 8003770:	614b      	str	r3, [r1, #20]
 8003772:	e011      	b.n	8003798 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003774:	4b1d      	ldr	r3, [pc, #116]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800377c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6892      	ldr	r2, [r2, #8]
 8003784:	0211      	lsls	r1, r2, #8
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6912      	ldr	r2, [r2, #16]
 800378a:	0852      	lsrs	r2, r2, #1
 800378c:	3a01      	subs	r2, #1
 800378e:	0652      	lsls	r2, r2, #25
 8003790:	430a      	orrs	r2, r1
 8003792:	4916      	ldr	r1, [pc, #88]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8003794:	4313      	orrs	r3, r2
 8003796:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003798:	4b14      	ldr	r3, [pc, #80]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a13      	ldr	r2, [pc, #76]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800379e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a4:	f7fe f9a2 	bl	8001aec <HAL_GetTick>
 80037a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037aa:	e009      	b.n	80037c0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037ac:	f7fe f99e 	bl	8001aec <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d902      	bls.n	80037c0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	73fb      	strb	r3, [r7, #15]
          break;
 80037be:	e005      	b.n	80037cc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037c0:	4b0a      	ldr	r3, [pc, #40]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0ef      	beq.n	80037ac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d106      	bne.n	80037e0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80037d2:	4b06      	ldr	r3, [pc, #24]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80037d4:	695a      	ldr	r2, [r3, #20]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	4904      	ldr	r1, [pc, #16]	; (80037ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80037e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40021000 	.word	0x40021000

080037f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e049      	b.n	8003896 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d106      	bne.n	800381c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f841 	bl	800389e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3304      	adds	r3, #4
 800382c:	4619      	mov	r1, r3
 800382e:	4610      	mov	r0, r2
 8003830:	f000 f9f8 	bl	8003c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
	...

080038b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d001      	beq.n	80038cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e04f      	b.n	800396c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0201 	orr.w	r2, r2, #1
 80038e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a23      	ldr	r2, [pc, #140]	; (8003978 <HAL_TIM_Base_Start_IT+0xc4>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d01d      	beq.n	800392a <HAL_TIM_Base_Start_IT+0x76>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f6:	d018      	beq.n	800392a <HAL_TIM_Base_Start_IT+0x76>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a1f      	ldr	r2, [pc, #124]	; (800397c <HAL_TIM_Base_Start_IT+0xc8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d013      	beq.n	800392a <HAL_TIM_Base_Start_IT+0x76>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a1e      	ldr	r2, [pc, #120]	; (8003980 <HAL_TIM_Base_Start_IT+0xcc>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d00e      	beq.n	800392a <HAL_TIM_Base_Start_IT+0x76>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a1c      	ldr	r2, [pc, #112]	; (8003984 <HAL_TIM_Base_Start_IT+0xd0>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d009      	beq.n	800392a <HAL_TIM_Base_Start_IT+0x76>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a1b      	ldr	r2, [pc, #108]	; (8003988 <HAL_TIM_Base_Start_IT+0xd4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d004      	beq.n	800392a <HAL_TIM_Base_Start_IT+0x76>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a19      	ldr	r2, [pc, #100]	; (800398c <HAL_TIM_Base_Start_IT+0xd8>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d115      	bne.n	8003956 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	4b17      	ldr	r3, [pc, #92]	; (8003990 <HAL_TIM_Base_Start_IT+0xdc>)
 8003932:	4013      	ands	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2b06      	cmp	r3, #6
 800393a:	d015      	beq.n	8003968 <HAL_TIM_Base_Start_IT+0xb4>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003942:	d011      	beq.n	8003968 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0201 	orr.w	r2, r2, #1
 8003952:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003954:	e008      	b.n	8003968 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 0201 	orr.w	r2, r2, #1
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	e000      	b.n	800396a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003968:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	40012c00 	.word	0x40012c00
 800397c:	40000400 	.word	0x40000400
 8003980:	40000800 	.word	0x40000800
 8003984:	40000c00 	.word	0x40000c00
 8003988:	40013400 	.word	0x40013400
 800398c:	40014000 	.word	0x40014000
 8003990:	00010007 	.word	0x00010007

08003994 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d122      	bne.n	80039f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d11b      	bne.n	80039f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f06f 0202 	mvn.w	r2, #2
 80039c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f905 	bl	8003be6 <HAL_TIM_IC_CaptureCallback>
 80039dc:	e005      	b.n	80039ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f8f7 	bl	8003bd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f908 	bl	8003bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	f003 0304 	and.w	r3, r3, #4
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d122      	bne.n	8003a44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d11b      	bne.n	8003a44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f06f 0204 	mvn.w	r2, #4
 8003a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2202      	movs	r2, #2
 8003a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f8db 	bl	8003be6 <HAL_TIM_IC_CaptureCallback>
 8003a30:	e005      	b.n	8003a3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f8cd 	bl	8003bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 f8de 	bl	8003bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b08      	cmp	r3, #8
 8003a50:	d122      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f003 0308 	and.w	r3, r3, #8
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d11b      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f06f 0208 	mvn.w	r2, #8
 8003a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2204      	movs	r2, #4
 8003a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	f003 0303 	and.w	r3, r3, #3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f8b1 	bl	8003be6 <HAL_TIM_IC_CaptureCallback>
 8003a84:	e005      	b.n	8003a92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f8a3 	bl	8003bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f8b4 	bl	8003bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f003 0310 	and.w	r3, r3, #16
 8003aa2:	2b10      	cmp	r3, #16
 8003aa4:	d122      	bne.n	8003aec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f003 0310 	and.w	r3, r3, #16
 8003ab0:	2b10      	cmp	r3, #16
 8003ab2:	d11b      	bne.n	8003aec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f06f 0210 	mvn.w	r2, #16
 8003abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2208      	movs	r2, #8
 8003ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f887 	bl	8003be6 <HAL_TIM_IC_CaptureCallback>
 8003ad8:	e005      	b.n	8003ae6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f879 	bl	8003bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f88a 	bl	8003bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d10e      	bne.n	8003b18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d107      	bne.n	8003b18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f06f 0201 	mvn.w	r2, #1
 8003b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7fd fc5e 	bl	80013d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b22:	2b80      	cmp	r3, #128	; 0x80
 8003b24:	d10e      	bne.n	8003b44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b30:	2b80      	cmp	r3, #128	; 0x80
 8003b32:	d107      	bne.n	8003b44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f914 	bl	8003d6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b52:	d10e      	bne.n	8003b72 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5e:	2b80      	cmp	r3, #128	; 0x80
 8003b60:	d107      	bne.n	8003b72 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f907 	bl	8003d80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7c:	2b40      	cmp	r3, #64	; 0x40
 8003b7e:	d10e      	bne.n	8003b9e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8a:	2b40      	cmp	r3, #64	; 0x40
 8003b8c:	d107      	bne.n	8003b9e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f838 	bl	8003c0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	f003 0320 	and.w	r3, r3, #32
 8003ba8:	2b20      	cmp	r3, #32
 8003baa:	d10e      	bne.n	8003bca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f003 0320 	and.w	r3, r3, #32
 8003bb6:	2b20      	cmp	r3, #32
 8003bb8:	d107      	bne.n	8003bca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f06f 0220 	mvn.w	r2, #32
 8003bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f8c7 	bl	8003d58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bca:	bf00      	nop
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
	...

08003c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a40      	ldr	r2, [pc, #256]	; (8003d38 <TIM_Base_SetConfig+0x114>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d013      	beq.n	8003c64 <TIM_Base_SetConfig+0x40>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c42:	d00f      	beq.n	8003c64 <TIM_Base_SetConfig+0x40>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a3d      	ldr	r2, [pc, #244]	; (8003d3c <TIM_Base_SetConfig+0x118>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d00b      	beq.n	8003c64 <TIM_Base_SetConfig+0x40>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a3c      	ldr	r2, [pc, #240]	; (8003d40 <TIM_Base_SetConfig+0x11c>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d007      	beq.n	8003c64 <TIM_Base_SetConfig+0x40>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a3b      	ldr	r2, [pc, #236]	; (8003d44 <TIM_Base_SetConfig+0x120>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d003      	beq.n	8003c64 <TIM_Base_SetConfig+0x40>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a3a      	ldr	r2, [pc, #232]	; (8003d48 <TIM_Base_SetConfig+0x124>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d108      	bne.n	8003c76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a2f      	ldr	r2, [pc, #188]	; (8003d38 <TIM_Base_SetConfig+0x114>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d01f      	beq.n	8003cbe <TIM_Base_SetConfig+0x9a>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c84:	d01b      	beq.n	8003cbe <TIM_Base_SetConfig+0x9a>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a2c      	ldr	r2, [pc, #176]	; (8003d3c <TIM_Base_SetConfig+0x118>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d017      	beq.n	8003cbe <TIM_Base_SetConfig+0x9a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a2b      	ldr	r2, [pc, #172]	; (8003d40 <TIM_Base_SetConfig+0x11c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d013      	beq.n	8003cbe <TIM_Base_SetConfig+0x9a>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a2a      	ldr	r2, [pc, #168]	; (8003d44 <TIM_Base_SetConfig+0x120>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00f      	beq.n	8003cbe <TIM_Base_SetConfig+0x9a>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a29      	ldr	r2, [pc, #164]	; (8003d48 <TIM_Base_SetConfig+0x124>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d00b      	beq.n	8003cbe <TIM_Base_SetConfig+0x9a>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a28      	ldr	r2, [pc, #160]	; (8003d4c <TIM_Base_SetConfig+0x128>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d007      	beq.n	8003cbe <TIM_Base_SetConfig+0x9a>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a27      	ldr	r2, [pc, #156]	; (8003d50 <TIM_Base_SetConfig+0x12c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d003      	beq.n	8003cbe <TIM_Base_SetConfig+0x9a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a26      	ldr	r2, [pc, #152]	; (8003d54 <TIM_Base_SetConfig+0x130>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d108      	bne.n	8003cd0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a10      	ldr	r2, [pc, #64]	; (8003d38 <TIM_Base_SetConfig+0x114>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d00f      	beq.n	8003d1c <TIM_Base_SetConfig+0xf8>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a12      	ldr	r2, [pc, #72]	; (8003d48 <TIM_Base_SetConfig+0x124>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d00b      	beq.n	8003d1c <TIM_Base_SetConfig+0xf8>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a11      	ldr	r2, [pc, #68]	; (8003d4c <TIM_Base_SetConfig+0x128>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d007      	beq.n	8003d1c <TIM_Base_SetConfig+0xf8>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a10      	ldr	r2, [pc, #64]	; (8003d50 <TIM_Base_SetConfig+0x12c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d003      	beq.n	8003d1c <TIM_Base_SetConfig+0xf8>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a0f      	ldr	r2, [pc, #60]	; (8003d54 <TIM_Base_SetConfig+0x130>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d103      	bne.n	8003d24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	691a      	ldr	r2, [r3, #16]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	615a      	str	r2, [r3, #20]
}
 8003d2a:	bf00      	nop
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	40012c00 	.word	0x40012c00
 8003d3c:	40000400 	.word	0x40000400
 8003d40:	40000800 	.word	0x40000800
 8003d44:	40000c00 	.word	0x40000c00
 8003d48:	40013400 	.word	0x40013400
 8003d4c:	40014000 	.word	0x40014000
 8003d50:	40014400 	.word	0x40014400
 8003d54:	40014800 	.word	0x40014800

08003d58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e040      	b.n	8003e28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d106      	bne.n	8003dbc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7fd fd4c 	bl	8001854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2224      	movs	r2, #36	; 0x24
 8003dc0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0201 	bic.w	r2, r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 fc94 	bl	8004700 <UART_SetConfig>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d101      	bne.n	8003de2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e022      	b.n	8003e28 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d002      	beq.n	8003df0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 ff40 	bl	8004c70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689a      	ldr	r2, [r3, #8]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0201 	orr.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 ffc7 	bl	8004db4 <UART_CheckIdleState>
 8003e26:	4603      	mov	r3, r0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b08a      	sub	sp, #40	; 0x28
 8003e34:	af02      	add	r7, sp, #8
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	603b      	str	r3, [r7, #0]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e44:	2b20      	cmp	r3, #32
 8003e46:	f040 8082 	bne.w	8003f4e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d002      	beq.n	8003e56 <HAL_UART_Transmit+0x26>
 8003e50:	88fb      	ldrh	r3, [r7, #6]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e07a      	b.n	8003f50 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_UART_Transmit+0x38>
 8003e64:	2302      	movs	r3, #2
 8003e66:	e073      	b.n	8003f50 <HAL_UART_Transmit+0x120>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2221      	movs	r2, #33	; 0x21
 8003e7c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e7e:	f7fd fe35 	bl	8001aec <HAL_GetTick>
 8003e82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	88fa      	ldrh	r2, [r7, #6]
 8003e88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	88fa      	ldrh	r2, [r7, #6]
 8003e90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e9c:	d108      	bne.n	8003eb0 <HAL_UART_Transmit+0x80>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d104      	bne.n	8003eb0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	61bb      	str	r3, [r7, #24]
 8003eae:	e003      	b.n	8003eb8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003ec0:	e02d      	b.n	8003f1e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	2180      	movs	r1, #128	; 0x80
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 ffba 	bl	8004e46 <UART_WaitOnFlagUntilTimeout>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e039      	b.n	8003f50 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10b      	bne.n	8003efa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	881a      	ldrh	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003eee:	b292      	uxth	r2, r2
 8003ef0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	3302      	adds	r3, #2
 8003ef6:	61bb      	str	r3, [r7, #24]
 8003ef8:	e008      	b.n	8003f0c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	781a      	ldrb	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	b292      	uxth	r2, r2
 8003f04:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1cb      	bne.n	8003ec2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2200      	movs	r2, #0
 8003f32:	2140      	movs	r1, #64	; 0x40
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 ff86 	bl	8004e46 <UART_WaitOnFlagUntilTimeout>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e005      	b.n	8003f50 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2220      	movs	r2, #32
 8003f48:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	e000      	b.n	8003f50 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003f4e:	2302      	movs	r3, #2
  }
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3720      	adds	r7, #32
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b08a      	sub	sp, #40	; 0x28
 8003f5c:	af02      	add	r7, sp, #8
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	603b      	str	r3, [r7, #0]
 8003f64:	4613      	mov	r3, r2
 8003f66:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f6c:	2b20      	cmp	r3, #32
 8003f6e:	f040 80bf 	bne.w	80040f0 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <HAL_UART_Receive+0x26>
 8003f78:	88fb      	ldrh	r3, [r7, #6]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e0b7      	b.n	80040f2 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d101      	bne.n	8003f90 <HAL_UART_Receive+0x38>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	e0b0      	b.n	80040f2 <HAL_UART_Receive+0x19a>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2222      	movs	r2, #34	; 0x22
 8003fa4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fac:	f7fd fd9e 	bl	8001aec <HAL_GetTick>
 8003fb0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	88fa      	ldrh	r2, [r7, #6]
 8003fb6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	88fa      	ldrh	r2, [r7, #6]
 8003fbe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fca:	d10e      	bne.n	8003fea <HAL_UART_Receive+0x92>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d105      	bne.n	8003fe0 <HAL_UART_Receive+0x88>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003fda:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fde:	e02d      	b.n	800403c <HAL_UART_Receive+0xe4>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	22ff      	movs	r2, #255	; 0xff
 8003fe4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fe8:	e028      	b.n	800403c <HAL_UART_Receive+0xe4>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10d      	bne.n	800400e <HAL_UART_Receive+0xb6>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d104      	bne.n	8004004 <HAL_UART_Receive+0xac>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	22ff      	movs	r2, #255	; 0xff
 8003ffe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004002:	e01b      	b.n	800403c <HAL_UART_Receive+0xe4>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	227f      	movs	r2, #127	; 0x7f
 8004008:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800400c:	e016      	b.n	800403c <HAL_UART_Receive+0xe4>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004016:	d10d      	bne.n	8004034 <HAL_UART_Receive+0xdc>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d104      	bne.n	800402a <HAL_UART_Receive+0xd2>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	227f      	movs	r2, #127	; 0x7f
 8004024:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004028:	e008      	b.n	800403c <HAL_UART_Receive+0xe4>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	223f      	movs	r2, #63	; 0x3f
 800402e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004032:	e003      	b.n	800403c <HAL_UART_Receive+0xe4>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004042:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800404c:	d108      	bne.n	8004060 <HAL_UART_Receive+0x108>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d104      	bne.n	8004060 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004056:	2300      	movs	r3, #0
 8004058:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	61bb      	str	r3, [r7, #24]
 800405e:	e003      	b.n	8004068 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004064:	2300      	movs	r3, #0
 8004066:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004070:	e033      	b.n	80040da <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2200      	movs	r2, #0
 800407a:	2120      	movs	r1, #32
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 fee2 	bl	8004e46 <UART_WaitOnFlagUntilTimeout>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e032      	b.n	80040f2 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10c      	bne.n	80040ac <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004098:	b29a      	uxth	r2, r3
 800409a:	8a7b      	ldrh	r3, [r7, #18]
 800409c:	4013      	ands	r3, r2
 800409e:	b29a      	uxth	r2, r3
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	3302      	adds	r3, #2
 80040a8:	61bb      	str	r3, [r7, #24]
 80040aa:	e00d      	b.n	80040c8 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	8a7b      	ldrh	r3, [r7, #18]
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	4013      	ands	r3, r2
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	3301      	adds	r3, #1
 80040c6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1c5      	bne.n	8004072 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2220      	movs	r2, #32
 80040ea:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80040ec:	2300      	movs	r3, #0
 80040ee:	e000      	b.n	80040f2 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80040f0:	2302      	movs	r3, #2
  }
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3720      	adds	r7, #32
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
	...

080040fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b0ba      	sub	sp, #232	; 0xe8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004122:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004126:	f640 030f 	movw	r3, #2063	; 0x80f
 800412a:	4013      	ands	r3, r2
 800412c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004130:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004134:	2b00      	cmp	r3, #0
 8004136:	d115      	bne.n	8004164 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800413c:	f003 0320 	and.w	r3, r3, #32
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00f      	beq.n	8004164 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004148:	f003 0320 	and.w	r3, r3, #32
 800414c:	2b00      	cmp	r3, #0
 800414e:	d009      	beq.n	8004164 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 82a6 	beq.w	80046a6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	4798      	blx	r3
      }
      return;
 8004162:	e2a0      	b.n	80046a6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004164:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 8117 	beq.w	800439c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800416e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d106      	bne.n	8004188 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800417a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800417e:	4b85      	ldr	r3, [pc, #532]	; (8004394 <HAL_UART_IRQHandler+0x298>)
 8004180:	4013      	ands	r3, r2
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 810a 	beq.w	800439c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b00      	cmp	r3, #0
 8004192:	d011      	beq.n	80041b8 <HAL_UART_IRQHandler+0xbc>
 8004194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00b      	beq.n	80041b8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2201      	movs	r2, #1
 80041a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041ae:	f043 0201 	orr.w	r2, r3, #1
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d011      	beq.n	80041e8 <HAL_UART_IRQHandler+0xec>
 80041c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00b      	beq.n	80041e8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2202      	movs	r2, #2
 80041d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041de:	f043 0204 	orr.w	r2, r3, #4
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d011      	beq.n	8004218 <HAL_UART_IRQHandler+0x11c>
 80041f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00b      	beq.n	8004218 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2204      	movs	r2, #4
 8004206:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800420e:	f043 0202 	orr.w	r2, r3, #2
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800421c:	f003 0308 	and.w	r3, r3, #8
 8004220:	2b00      	cmp	r3, #0
 8004222:	d017      	beq.n	8004254 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004228:	f003 0320 	and.w	r3, r3, #32
 800422c:	2b00      	cmp	r3, #0
 800422e:	d105      	bne.n	800423c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004230:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004234:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00b      	beq.n	8004254 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2208      	movs	r2, #8
 8004242:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800424a:	f043 0208 	orr.w	r2, r3, #8
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800425c:	2b00      	cmp	r3, #0
 800425e:	d012      	beq.n	8004286 <HAL_UART_IRQHandler+0x18a>
 8004260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004264:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00c      	beq.n	8004286 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004274:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800427c:	f043 0220 	orr.w	r2, r3, #32
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800428c:	2b00      	cmp	r3, #0
 800428e:	f000 820c 	beq.w	80046aa <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004296:	f003 0320 	and.w	r3, r3, #32
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00d      	beq.n	80042ba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800429e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042a2:	f003 0320 	and.w	r3, r3, #32
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d007      	beq.n	80042ba <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ce:	2b40      	cmp	r3, #64	; 0x40
 80042d0:	d005      	beq.n	80042de <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80042d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d04f      	beq.n	800437e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 fe75 	bl	8004fce <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ee:	2b40      	cmp	r3, #64	; 0x40
 80042f0:	d141      	bne.n	8004376 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	3308      	adds	r3, #8
 80042f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004300:	e853 3f00 	ldrex	r3, [r3]
 8004304:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004308:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800430c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004310:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	3308      	adds	r3, #8
 800431a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800431e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004322:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004326:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800432a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800432e:	e841 2300 	strex	r3, r2, [r1]
 8004332:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004336:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1d9      	bne.n	80042f2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004342:	2b00      	cmp	r3, #0
 8004344:	d013      	beq.n	800436e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434a:	4a13      	ldr	r2, [pc, #76]	; (8004398 <HAL_UART_IRQHandler+0x29c>)
 800434c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004352:	4618      	mov	r0, r3
 8004354:	f7fd fcf6 	bl	8001d44 <HAL_DMA_Abort_IT>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d017      	beq.n	800438e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004368:	4610      	mov	r0, r2
 800436a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800436c:	e00f      	b.n	800438e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f9b0 	bl	80046d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004374:	e00b      	b.n	800438e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f9ac 	bl	80046d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800437c:	e007      	b.n	800438e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f9a8 	bl	80046d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800438c:	e18d      	b.n	80046aa <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800438e:	bf00      	nop
    return;
 8004390:	e18b      	b.n	80046aa <HAL_UART_IRQHandler+0x5ae>
 8004392:	bf00      	nop
 8004394:	04000120 	.word	0x04000120
 8004398:	08005095 	.word	0x08005095

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	f040 8146 	bne.w	8004632 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80043a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043aa:	f003 0310 	and.w	r3, r3, #16
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 813f 	beq.w	8004632 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80043b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043b8:	f003 0310 	and.w	r3, r3, #16
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 8138 	beq.w	8004632 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2210      	movs	r2, #16
 80043c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d4:	2b40      	cmp	r3, #64	; 0x40
 80043d6:	f040 80b4 	bne.w	8004542 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043e6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 815f 	beq.w	80046ae <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80043f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043fa:	429a      	cmp	r2, r3
 80043fc:	f080 8157 	bcs.w	80046ae <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004406:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0320 	and.w	r3, r3, #32
 8004416:	2b00      	cmp	r3, #0
 8004418:	f040 8085 	bne.w	8004526 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004424:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004428:	e853 3f00 	ldrex	r3, [r3]
 800442c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004430:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004434:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004438:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	461a      	mov	r2, r3
 8004442:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004446:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800444a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004452:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004456:	e841 2300 	strex	r3, r2, [r1]
 800445a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800445e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1da      	bne.n	800441c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3308      	adds	r3, #8
 800446c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004470:	e853 3f00 	ldrex	r3, [r3]
 8004474:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004476:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004478:	f023 0301 	bic.w	r3, r3, #1
 800447c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	3308      	adds	r3, #8
 8004486:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800448a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800448e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004490:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004492:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004496:	e841 2300 	strex	r3, r2, [r1]
 800449a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800449c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1e1      	bne.n	8004466 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	3308      	adds	r3, #8
 80044a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044ac:	e853 3f00 	ldrex	r3, [r3]
 80044b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80044b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	3308      	adds	r3, #8
 80044c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80044c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80044c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80044cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80044ce:	e841 2300 	strex	r3, r2, [r1]
 80044d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80044d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1e3      	bne.n	80044a2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2220      	movs	r2, #32
 80044de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ee:	e853 3f00 	ldrex	r3, [r3]
 80044f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80044f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044f6:	f023 0310 	bic.w	r3, r3, #16
 80044fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004508:	65bb      	str	r3, [r7, #88]	; 0x58
 800450a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800450e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004510:	e841 2300 	strex	r3, r2, [r1]
 8004514:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1e4      	bne.n	80044e6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004520:	4618      	mov	r0, r3
 8004522:	f7fd fbd1 	bl	8001cc8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004532:	b29b      	uxth	r3, r3
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	b29b      	uxth	r3, r3
 8004538:	4619      	mov	r1, r3
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f8d4 	bl	80046e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004540:	e0b5      	b.n	80046ae <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800454e:	b29b      	uxth	r3, r3
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800455c:	b29b      	uxth	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 80a7 	beq.w	80046b2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004564:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 80a2 	beq.w	80046b2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004576:	e853 3f00 	ldrex	r3, [r3]
 800457a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800457c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800457e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004582:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	461a      	mov	r2, r3
 800458c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004590:	647b      	str	r3, [r7, #68]	; 0x44
 8004592:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004594:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004596:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004598:	e841 2300 	strex	r3, r2, [r1]
 800459c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800459e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1e4      	bne.n	800456e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3308      	adds	r3, #8
 80045aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	e853 3f00 	ldrex	r3, [r3]
 80045b2:	623b      	str	r3, [r7, #32]
   return(result);
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	f023 0301 	bic.w	r3, r3, #1
 80045ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	3308      	adds	r3, #8
 80045c4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80045c8:	633a      	str	r2, [r7, #48]	; 0x30
 80045ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045d0:	e841 2300 	strex	r3, r2, [r1]
 80045d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1e3      	bne.n	80045a4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2220      	movs	r2, #32
 80045e0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	e853 3f00 	ldrex	r3, [r3]
 80045fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f023 0310 	bic.w	r3, r3, #16
 8004602:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	461a      	mov	r2, r3
 800460c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004610:	61fb      	str	r3, [r7, #28]
 8004612:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004614:	69b9      	ldr	r1, [r7, #24]
 8004616:	69fa      	ldr	r2, [r7, #28]
 8004618:	e841 2300 	strex	r3, r2, [r1]
 800461c:	617b      	str	r3, [r7, #20]
   return(result);
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1e4      	bne.n	80045ee <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004624:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004628:	4619      	mov	r1, r3
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f85c 	bl	80046e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004630:	e03f      	b.n	80046b2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00e      	beq.n	800465c <HAL_UART_IRQHandler+0x560>
 800463e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d008      	beq.n	800465c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004652:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 fd5d 	bl	8005114 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800465a:	e02d      	b.n	80046b8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800465c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00e      	beq.n	8004686 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800466c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004670:	2b00      	cmp	r3, #0
 8004672:	d008      	beq.n	8004686 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004678:	2b00      	cmp	r3, #0
 800467a:	d01c      	beq.n	80046b6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	4798      	blx	r3
    }
    return;
 8004684:	e017      	b.n	80046b6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800468a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468e:	2b00      	cmp	r3, #0
 8004690:	d012      	beq.n	80046b8 <HAL_UART_IRQHandler+0x5bc>
 8004692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00c      	beq.n	80046b8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 fd0e 	bl	80050c0 <UART_EndTransmit_IT>
    return;
 80046a4:	e008      	b.n	80046b8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80046a6:	bf00      	nop
 80046a8:	e006      	b.n	80046b8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80046aa:	bf00      	nop
 80046ac:	e004      	b.n	80046b8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80046ae:	bf00      	nop
 80046b0:	e002      	b.n	80046b8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80046b2:	bf00      	nop
 80046b4:	e000      	b.n	80046b8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80046b6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80046b8:	37e8      	adds	r7, #232	; 0xe8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop

080046c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	460b      	mov	r3, r1
 80046f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004704:	b08a      	sub	sp, #40	; 0x28
 8004706:	af00      	add	r7, sp, #0
 8004708:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800470a:	2300      	movs	r3, #0
 800470c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	431a      	orrs	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	431a      	orrs	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	69db      	ldr	r3, [r3, #28]
 8004724:	4313      	orrs	r3, r2
 8004726:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	4ba4      	ldr	r3, [pc, #656]	; (80049c0 <UART_SetConfig+0x2c0>)
 8004730:	4013      	ands	r3, r2
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	6812      	ldr	r2, [r2, #0]
 8004736:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004738:	430b      	orrs	r3, r1
 800473a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	430a      	orrs	r2, r1
 8004750:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a99      	ldr	r2, [pc, #612]	; (80049c4 <UART_SetConfig+0x2c4>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d004      	beq.n	800476c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004768:	4313      	orrs	r3, r2
 800476a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800477c:	430a      	orrs	r2, r1
 800477e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a90      	ldr	r2, [pc, #576]	; (80049c8 <UART_SetConfig+0x2c8>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d126      	bne.n	80047d8 <UART_SetConfig+0xd8>
 800478a:	4b90      	ldr	r3, [pc, #576]	; (80049cc <UART_SetConfig+0x2cc>)
 800478c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004790:	f003 0303 	and.w	r3, r3, #3
 8004794:	2b03      	cmp	r3, #3
 8004796:	d81b      	bhi.n	80047d0 <UART_SetConfig+0xd0>
 8004798:	a201      	add	r2, pc, #4	; (adr r2, 80047a0 <UART_SetConfig+0xa0>)
 800479a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479e:	bf00      	nop
 80047a0:	080047b1 	.word	0x080047b1
 80047a4:	080047c1 	.word	0x080047c1
 80047a8:	080047b9 	.word	0x080047b9
 80047ac:	080047c9 	.word	0x080047c9
 80047b0:	2301      	movs	r3, #1
 80047b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047b6:	e116      	b.n	80049e6 <UART_SetConfig+0x2e6>
 80047b8:	2302      	movs	r3, #2
 80047ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047be:	e112      	b.n	80049e6 <UART_SetConfig+0x2e6>
 80047c0:	2304      	movs	r3, #4
 80047c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047c6:	e10e      	b.n	80049e6 <UART_SetConfig+0x2e6>
 80047c8:	2308      	movs	r3, #8
 80047ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ce:	e10a      	b.n	80049e6 <UART_SetConfig+0x2e6>
 80047d0:	2310      	movs	r3, #16
 80047d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047d6:	e106      	b.n	80049e6 <UART_SetConfig+0x2e6>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a7c      	ldr	r2, [pc, #496]	; (80049d0 <UART_SetConfig+0x2d0>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d138      	bne.n	8004854 <UART_SetConfig+0x154>
 80047e2:	4b7a      	ldr	r3, [pc, #488]	; (80049cc <UART_SetConfig+0x2cc>)
 80047e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e8:	f003 030c 	and.w	r3, r3, #12
 80047ec:	2b0c      	cmp	r3, #12
 80047ee:	d82d      	bhi.n	800484c <UART_SetConfig+0x14c>
 80047f0:	a201      	add	r2, pc, #4	; (adr r2, 80047f8 <UART_SetConfig+0xf8>)
 80047f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f6:	bf00      	nop
 80047f8:	0800482d 	.word	0x0800482d
 80047fc:	0800484d 	.word	0x0800484d
 8004800:	0800484d 	.word	0x0800484d
 8004804:	0800484d 	.word	0x0800484d
 8004808:	0800483d 	.word	0x0800483d
 800480c:	0800484d 	.word	0x0800484d
 8004810:	0800484d 	.word	0x0800484d
 8004814:	0800484d 	.word	0x0800484d
 8004818:	08004835 	.word	0x08004835
 800481c:	0800484d 	.word	0x0800484d
 8004820:	0800484d 	.word	0x0800484d
 8004824:	0800484d 	.word	0x0800484d
 8004828:	08004845 	.word	0x08004845
 800482c:	2300      	movs	r3, #0
 800482e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004832:	e0d8      	b.n	80049e6 <UART_SetConfig+0x2e6>
 8004834:	2302      	movs	r3, #2
 8004836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800483a:	e0d4      	b.n	80049e6 <UART_SetConfig+0x2e6>
 800483c:	2304      	movs	r3, #4
 800483e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004842:	e0d0      	b.n	80049e6 <UART_SetConfig+0x2e6>
 8004844:	2308      	movs	r3, #8
 8004846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800484a:	e0cc      	b.n	80049e6 <UART_SetConfig+0x2e6>
 800484c:	2310      	movs	r3, #16
 800484e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004852:	e0c8      	b.n	80049e6 <UART_SetConfig+0x2e6>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a5e      	ldr	r2, [pc, #376]	; (80049d4 <UART_SetConfig+0x2d4>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d125      	bne.n	80048aa <UART_SetConfig+0x1aa>
 800485e:	4b5b      	ldr	r3, [pc, #364]	; (80049cc <UART_SetConfig+0x2cc>)
 8004860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004864:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004868:	2b30      	cmp	r3, #48	; 0x30
 800486a:	d016      	beq.n	800489a <UART_SetConfig+0x19a>
 800486c:	2b30      	cmp	r3, #48	; 0x30
 800486e:	d818      	bhi.n	80048a2 <UART_SetConfig+0x1a2>
 8004870:	2b20      	cmp	r3, #32
 8004872:	d00a      	beq.n	800488a <UART_SetConfig+0x18a>
 8004874:	2b20      	cmp	r3, #32
 8004876:	d814      	bhi.n	80048a2 <UART_SetConfig+0x1a2>
 8004878:	2b00      	cmp	r3, #0
 800487a:	d002      	beq.n	8004882 <UART_SetConfig+0x182>
 800487c:	2b10      	cmp	r3, #16
 800487e:	d008      	beq.n	8004892 <UART_SetConfig+0x192>
 8004880:	e00f      	b.n	80048a2 <UART_SetConfig+0x1a2>
 8004882:	2300      	movs	r3, #0
 8004884:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004888:	e0ad      	b.n	80049e6 <UART_SetConfig+0x2e6>
 800488a:	2302      	movs	r3, #2
 800488c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004890:	e0a9      	b.n	80049e6 <UART_SetConfig+0x2e6>
 8004892:	2304      	movs	r3, #4
 8004894:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004898:	e0a5      	b.n	80049e6 <UART_SetConfig+0x2e6>
 800489a:	2308      	movs	r3, #8
 800489c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048a0:	e0a1      	b.n	80049e6 <UART_SetConfig+0x2e6>
 80048a2:	2310      	movs	r3, #16
 80048a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048a8:	e09d      	b.n	80049e6 <UART_SetConfig+0x2e6>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a4a      	ldr	r2, [pc, #296]	; (80049d8 <UART_SetConfig+0x2d8>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d125      	bne.n	8004900 <UART_SetConfig+0x200>
 80048b4:	4b45      	ldr	r3, [pc, #276]	; (80049cc <UART_SetConfig+0x2cc>)
 80048b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80048be:	2bc0      	cmp	r3, #192	; 0xc0
 80048c0:	d016      	beq.n	80048f0 <UART_SetConfig+0x1f0>
 80048c2:	2bc0      	cmp	r3, #192	; 0xc0
 80048c4:	d818      	bhi.n	80048f8 <UART_SetConfig+0x1f8>
 80048c6:	2b80      	cmp	r3, #128	; 0x80
 80048c8:	d00a      	beq.n	80048e0 <UART_SetConfig+0x1e0>
 80048ca:	2b80      	cmp	r3, #128	; 0x80
 80048cc:	d814      	bhi.n	80048f8 <UART_SetConfig+0x1f8>
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d002      	beq.n	80048d8 <UART_SetConfig+0x1d8>
 80048d2:	2b40      	cmp	r3, #64	; 0x40
 80048d4:	d008      	beq.n	80048e8 <UART_SetConfig+0x1e8>
 80048d6:	e00f      	b.n	80048f8 <UART_SetConfig+0x1f8>
 80048d8:	2300      	movs	r3, #0
 80048da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048de:	e082      	b.n	80049e6 <UART_SetConfig+0x2e6>
 80048e0:	2302      	movs	r3, #2
 80048e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048e6:	e07e      	b.n	80049e6 <UART_SetConfig+0x2e6>
 80048e8:	2304      	movs	r3, #4
 80048ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ee:	e07a      	b.n	80049e6 <UART_SetConfig+0x2e6>
 80048f0:	2308      	movs	r3, #8
 80048f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048f6:	e076      	b.n	80049e6 <UART_SetConfig+0x2e6>
 80048f8:	2310      	movs	r3, #16
 80048fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048fe:	e072      	b.n	80049e6 <UART_SetConfig+0x2e6>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a35      	ldr	r2, [pc, #212]	; (80049dc <UART_SetConfig+0x2dc>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d12a      	bne.n	8004960 <UART_SetConfig+0x260>
 800490a:	4b30      	ldr	r3, [pc, #192]	; (80049cc <UART_SetConfig+0x2cc>)
 800490c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004910:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004914:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004918:	d01a      	beq.n	8004950 <UART_SetConfig+0x250>
 800491a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800491e:	d81b      	bhi.n	8004958 <UART_SetConfig+0x258>
 8004920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004924:	d00c      	beq.n	8004940 <UART_SetConfig+0x240>
 8004926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800492a:	d815      	bhi.n	8004958 <UART_SetConfig+0x258>
 800492c:	2b00      	cmp	r3, #0
 800492e:	d003      	beq.n	8004938 <UART_SetConfig+0x238>
 8004930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004934:	d008      	beq.n	8004948 <UART_SetConfig+0x248>
 8004936:	e00f      	b.n	8004958 <UART_SetConfig+0x258>
 8004938:	2300      	movs	r3, #0
 800493a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800493e:	e052      	b.n	80049e6 <UART_SetConfig+0x2e6>
 8004940:	2302      	movs	r3, #2
 8004942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004946:	e04e      	b.n	80049e6 <UART_SetConfig+0x2e6>
 8004948:	2304      	movs	r3, #4
 800494a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800494e:	e04a      	b.n	80049e6 <UART_SetConfig+0x2e6>
 8004950:	2308      	movs	r3, #8
 8004952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004956:	e046      	b.n	80049e6 <UART_SetConfig+0x2e6>
 8004958:	2310      	movs	r3, #16
 800495a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800495e:	e042      	b.n	80049e6 <UART_SetConfig+0x2e6>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a17      	ldr	r2, [pc, #92]	; (80049c4 <UART_SetConfig+0x2c4>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d13a      	bne.n	80049e0 <UART_SetConfig+0x2e0>
 800496a:	4b18      	ldr	r3, [pc, #96]	; (80049cc <UART_SetConfig+0x2cc>)
 800496c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004970:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004974:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004978:	d01a      	beq.n	80049b0 <UART_SetConfig+0x2b0>
 800497a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800497e:	d81b      	bhi.n	80049b8 <UART_SetConfig+0x2b8>
 8004980:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004984:	d00c      	beq.n	80049a0 <UART_SetConfig+0x2a0>
 8004986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800498a:	d815      	bhi.n	80049b8 <UART_SetConfig+0x2b8>
 800498c:	2b00      	cmp	r3, #0
 800498e:	d003      	beq.n	8004998 <UART_SetConfig+0x298>
 8004990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004994:	d008      	beq.n	80049a8 <UART_SetConfig+0x2a8>
 8004996:	e00f      	b.n	80049b8 <UART_SetConfig+0x2b8>
 8004998:	2300      	movs	r3, #0
 800499a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800499e:	e022      	b.n	80049e6 <UART_SetConfig+0x2e6>
 80049a0:	2302      	movs	r3, #2
 80049a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049a6:	e01e      	b.n	80049e6 <UART_SetConfig+0x2e6>
 80049a8:	2304      	movs	r3, #4
 80049aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ae:	e01a      	b.n	80049e6 <UART_SetConfig+0x2e6>
 80049b0:	2308      	movs	r3, #8
 80049b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049b6:	e016      	b.n	80049e6 <UART_SetConfig+0x2e6>
 80049b8:	2310      	movs	r3, #16
 80049ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049be:	e012      	b.n	80049e6 <UART_SetConfig+0x2e6>
 80049c0:	efff69f3 	.word	0xefff69f3
 80049c4:	40008000 	.word	0x40008000
 80049c8:	40013800 	.word	0x40013800
 80049cc:	40021000 	.word	0x40021000
 80049d0:	40004400 	.word	0x40004400
 80049d4:	40004800 	.word	0x40004800
 80049d8:	40004c00 	.word	0x40004c00
 80049dc:	40005000 	.word	0x40005000
 80049e0:	2310      	movs	r3, #16
 80049e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a9f      	ldr	r2, [pc, #636]	; (8004c68 <UART_SetConfig+0x568>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d17a      	bne.n	8004ae6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049f4:	2b08      	cmp	r3, #8
 80049f6:	d824      	bhi.n	8004a42 <UART_SetConfig+0x342>
 80049f8:	a201      	add	r2, pc, #4	; (adr r2, 8004a00 <UART_SetConfig+0x300>)
 80049fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fe:	bf00      	nop
 8004a00:	08004a25 	.word	0x08004a25
 8004a04:	08004a43 	.word	0x08004a43
 8004a08:	08004a2d 	.word	0x08004a2d
 8004a0c:	08004a43 	.word	0x08004a43
 8004a10:	08004a33 	.word	0x08004a33
 8004a14:	08004a43 	.word	0x08004a43
 8004a18:	08004a43 	.word	0x08004a43
 8004a1c:	08004a43 	.word	0x08004a43
 8004a20:	08004a3b 	.word	0x08004a3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a24:	f7fe f96a 	bl	8002cfc <HAL_RCC_GetPCLK1Freq>
 8004a28:	61f8      	str	r0, [r7, #28]
        break;
 8004a2a:	e010      	b.n	8004a4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a2c:	4b8f      	ldr	r3, [pc, #572]	; (8004c6c <UART_SetConfig+0x56c>)
 8004a2e:	61fb      	str	r3, [r7, #28]
        break;
 8004a30:	e00d      	b.n	8004a4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a32:	f7fe f8cb 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8004a36:	61f8      	str	r0, [r7, #28]
        break;
 8004a38:	e009      	b.n	8004a4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a3e:	61fb      	str	r3, [r7, #28]
        break;
 8004a40:	e005      	b.n	8004a4e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 80fb 	beq.w	8004c4c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	4413      	add	r3, r2
 8004a60:	69fa      	ldr	r2, [r7, #28]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d305      	bcc.n	8004a72 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a6c:	69fa      	ldr	r2, [r7, #28]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d903      	bls.n	8004a7a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a78:	e0e8      	b.n	8004c4c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	461c      	mov	r4, r3
 8004a80:	4615      	mov	r5, r2
 8004a82:	f04f 0200 	mov.w	r2, #0
 8004a86:	f04f 0300 	mov.w	r3, #0
 8004a8a:	022b      	lsls	r3, r5, #8
 8004a8c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004a90:	0222      	lsls	r2, r4, #8
 8004a92:	68f9      	ldr	r1, [r7, #12]
 8004a94:	6849      	ldr	r1, [r1, #4]
 8004a96:	0849      	lsrs	r1, r1, #1
 8004a98:	2000      	movs	r0, #0
 8004a9a:	4688      	mov	r8, r1
 8004a9c:	4681      	mov	r9, r0
 8004a9e:	eb12 0a08 	adds.w	sl, r2, r8
 8004aa2:	eb43 0b09 	adc.w	fp, r3, r9
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	603b      	str	r3, [r7, #0]
 8004aae:	607a      	str	r2, [r7, #4]
 8004ab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ab4:	4650      	mov	r0, sl
 8004ab6:	4659      	mov	r1, fp
 8004ab8:	f7fc f8e6 	bl	8000c88 <__aeabi_uldivmod>
 8004abc:	4602      	mov	r2, r0
 8004abe:	460b      	mov	r3, r1
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004aca:	d308      	bcc.n	8004ade <UART_SetConfig+0x3de>
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ad2:	d204      	bcs.n	8004ade <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	60da      	str	r2, [r3, #12]
 8004adc:	e0b6      	b.n	8004c4c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ae4:	e0b2      	b.n	8004c4c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aee:	d15e      	bne.n	8004bae <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004af0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d828      	bhi.n	8004b4a <UART_SetConfig+0x44a>
 8004af8:	a201      	add	r2, pc, #4	; (adr r2, 8004b00 <UART_SetConfig+0x400>)
 8004afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afe:	bf00      	nop
 8004b00:	08004b25 	.word	0x08004b25
 8004b04:	08004b2d 	.word	0x08004b2d
 8004b08:	08004b35 	.word	0x08004b35
 8004b0c:	08004b4b 	.word	0x08004b4b
 8004b10:	08004b3b 	.word	0x08004b3b
 8004b14:	08004b4b 	.word	0x08004b4b
 8004b18:	08004b4b 	.word	0x08004b4b
 8004b1c:	08004b4b 	.word	0x08004b4b
 8004b20:	08004b43 	.word	0x08004b43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b24:	f7fe f8ea 	bl	8002cfc <HAL_RCC_GetPCLK1Freq>
 8004b28:	61f8      	str	r0, [r7, #28]
        break;
 8004b2a:	e014      	b.n	8004b56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b2c:	f7fe f8fc 	bl	8002d28 <HAL_RCC_GetPCLK2Freq>
 8004b30:	61f8      	str	r0, [r7, #28]
        break;
 8004b32:	e010      	b.n	8004b56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b34:	4b4d      	ldr	r3, [pc, #308]	; (8004c6c <UART_SetConfig+0x56c>)
 8004b36:	61fb      	str	r3, [r7, #28]
        break;
 8004b38:	e00d      	b.n	8004b56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b3a:	f7fe f847 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8004b3e:	61f8      	str	r0, [r7, #28]
        break;
 8004b40:	e009      	b.n	8004b56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b46:	61fb      	str	r3, [r7, #28]
        break;
 8004b48:	e005      	b.n	8004b56 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d077      	beq.n	8004c4c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	005a      	lsls	r2, r3, #1
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	085b      	lsrs	r3, r3, #1
 8004b66:	441a      	add	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b70:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	2b0f      	cmp	r3, #15
 8004b76:	d916      	bls.n	8004ba6 <UART_SetConfig+0x4a6>
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b7e:	d212      	bcs.n	8004ba6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	f023 030f 	bic.w	r3, r3, #15
 8004b88:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	085b      	lsrs	r3, r3, #1
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	f003 0307 	and.w	r3, r3, #7
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	8afb      	ldrh	r3, [r7, #22]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	8afa      	ldrh	r2, [r7, #22]
 8004ba2:	60da      	str	r2, [r3, #12]
 8004ba4:	e052      	b.n	8004c4c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004bac:	e04e      	b.n	8004c4c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bb2:	2b08      	cmp	r3, #8
 8004bb4:	d827      	bhi.n	8004c06 <UART_SetConfig+0x506>
 8004bb6:	a201      	add	r2, pc, #4	; (adr r2, 8004bbc <UART_SetConfig+0x4bc>)
 8004bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbc:	08004be1 	.word	0x08004be1
 8004bc0:	08004be9 	.word	0x08004be9
 8004bc4:	08004bf1 	.word	0x08004bf1
 8004bc8:	08004c07 	.word	0x08004c07
 8004bcc:	08004bf7 	.word	0x08004bf7
 8004bd0:	08004c07 	.word	0x08004c07
 8004bd4:	08004c07 	.word	0x08004c07
 8004bd8:	08004c07 	.word	0x08004c07
 8004bdc:	08004bff 	.word	0x08004bff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004be0:	f7fe f88c 	bl	8002cfc <HAL_RCC_GetPCLK1Freq>
 8004be4:	61f8      	str	r0, [r7, #28]
        break;
 8004be6:	e014      	b.n	8004c12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004be8:	f7fe f89e 	bl	8002d28 <HAL_RCC_GetPCLK2Freq>
 8004bec:	61f8      	str	r0, [r7, #28]
        break;
 8004bee:	e010      	b.n	8004c12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bf0:	4b1e      	ldr	r3, [pc, #120]	; (8004c6c <UART_SetConfig+0x56c>)
 8004bf2:	61fb      	str	r3, [r7, #28]
        break;
 8004bf4:	e00d      	b.n	8004c12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bf6:	f7fd ffe9 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8004bfa:	61f8      	str	r0, [r7, #28]
        break;
 8004bfc:	e009      	b.n	8004c12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c02:	61fb      	str	r3, [r7, #28]
        break;
 8004c04:	e005      	b.n	8004c12 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004c06:	2300      	movs	r3, #0
 8004c08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004c10:	bf00      	nop
    }

    if (pclk != 0U)
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d019      	beq.n	8004c4c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	085a      	lsrs	r2, r3, #1
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	441a      	add	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	2b0f      	cmp	r3, #15
 8004c30:	d909      	bls.n	8004c46 <UART_SetConfig+0x546>
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c38:	d205      	bcs.n	8004c46 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	60da      	str	r2, [r3, #12]
 8004c44:	e002      	b.n	8004c4c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004c58:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3728      	adds	r7, #40	; 0x28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c66:	bf00      	nop
 8004c68:	40008000 	.word	0x40008000
 8004c6c:	00f42400 	.word	0x00f42400

08004c70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00a      	beq.n	8004cbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	f003 0304 	and.w	r3, r3, #4
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00a      	beq.n	8004cde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	f003 0308 	and.w	r3, r3, #8
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d04:	f003 0310 	and.w	r3, r3, #16
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00a      	beq.n	8004d22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	f003 0320 	and.w	r3, r3, #32
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d01a      	beq.n	8004d86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d6e:	d10a      	bne.n	8004d86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00a      	beq.n	8004da8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	605a      	str	r2, [r3, #4]
  }
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af02      	add	r7, sp, #8
 8004dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dc4:	f7fc fe92 	bl	8001aec <HAL_GetTick>
 8004dc8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0308 	and.w	r3, r3, #8
 8004dd4:	2b08      	cmp	r3, #8
 8004dd6:	d10e      	bne.n	8004df6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f82d 	bl	8004e46 <UART_WaitOnFlagUntilTimeout>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e023      	b.n	8004e3e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	d10e      	bne.n	8004e22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f817 	bl	8004e46 <UART_WaitOnFlagUntilTimeout>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e00d      	b.n	8004e3e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2220      	movs	r2, #32
 8004e26:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b09c      	sub	sp, #112	; 0x70
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	60f8      	str	r0, [r7, #12]
 8004e4e:	60b9      	str	r1, [r7, #8]
 8004e50:	603b      	str	r3, [r7, #0]
 8004e52:	4613      	mov	r3, r2
 8004e54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e56:	e0a5      	b.n	8004fa4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e5e:	f000 80a1 	beq.w	8004fa4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e62:	f7fc fe43 	bl	8001aec <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d302      	bcc.n	8004e78 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d13e      	bne.n	8004ef6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e80:	e853 3f00 	ldrex	r3, [r3]
 8004e84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e8c:	667b      	str	r3, [r7, #100]	; 0x64
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	461a      	mov	r2, r3
 8004e94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e98:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e9e:	e841 2300 	strex	r3, r2, [r1]
 8004ea2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004ea4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1e6      	bne.n	8004e78 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	3308      	adds	r3, #8
 8004eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eb4:	e853 3f00 	ldrex	r3, [r3]
 8004eb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebc:	f023 0301 	bic.w	r3, r3, #1
 8004ec0:	663b      	str	r3, [r7, #96]	; 0x60
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	3308      	adds	r3, #8
 8004ec8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004eca:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ecc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ece:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ed0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ed2:	e841 2300 	strex	r3, r2, [r1]
 8004ed6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1e5      	bne.n	8004eaa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e067      	b.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d04f      	beq.n	8004fa4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f12:	d147      	bne.n	8004fa4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f1c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f26:	e853 3f00 	ldrex	r3, [r3]
 8004f2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f3e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f44:	e841 2300 	strex	r3, r2, [r1]
 8004f48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1e6      	bne.n	8004f1e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	3308      	adds	r3, #8
 8004f56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	e853 3f00 	ldrex	r3, [r3]
 8004f5e:	613b      	str	r3, [r7, #16]
   return(result);
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	f023 0301 	bic.w	r3, r3, #1
 8004f66:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	3308      	adds	r3, #8
 8004f6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f70:	623a      	str	r2, [r7, #32]
 8004f72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f74:	69f9      	ldr	r1, [r7, #28]
 8004f76:	6a3a      	ldr	r2, [r7, #32]
 8004f78:	e841 2300 	strex	r3, r2, [r1]
 8004f7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1e5      	bne.n	8004f50 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2220      	movs	r2, #32
 8004f88:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e010      	b.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	69da      	ldr	r2, [r3, #28]
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	4013      	ands	r3, r2
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	bf0c      	ite	eq
 8004fb4:	2301      	moveq	r3, #1
 8004fb6:	2300      	movne	r3, #0
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	461a      	mov	r2, r3
 8004fbc:	79fb      	ldrb	r3, [r7, #7]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	f43f af4a 	beq.w	8004e58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3770      	adds	r7, #112	; 0x70
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b095      	sub	sp, #84	; 0x54
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fde:	e853 3f00 	ldrex	r3, [r3]
 8004fe2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ff4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ff6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ffa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ffc:	e841 2300 	strex	r3, r2, [r1]
 8005000:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1e6      	bne.n	8004fd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3308      	adds	r3, #8
 800500e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005010:	6a3b      	ldr	r3, [r7, #32]
 8005012:	e853 3f00 	ldrex	r3, [r3]
 8005016:	61fb      	str	r3, [r7, #28]
   return(result);
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	f023 0301 	bic.w	r3, r3, #1
 800501e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	3308      	adds	r3, #8
 8005026:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005028:	62fa      	str	r2, [r7, #44]	; 0x2c
 800502a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800502e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005030:	e841 2300 	strex	r3, r2, [r1]
 8005034:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1e5      	bne.n	8005008 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005040:	2b01      	cmp	r3, #1
 8005042:	d118      	bne.n	8005076 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	e853 3f00 	ldrex	r3, [r3]
 8005050:	60bb      	str	r3, [r7, #8]
   return(result);
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	f023 0310 	bic.w	r3, r3, #16
 8005058:	647b      	str	r3, [r7, #68]	; 0x44
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005062:	61bb      	str	r3, [r7, #24]
 8005064:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005066:	6979      	ldr	r1, [r7, #20]
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	e841 2300 	strex	r3, r2, [r1]
 800506e:	613b      	str	r3, [r7, #16]
   return(result);
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1e6      	bne.n	8005044 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2220      	movs	r2, #32
 800507a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005088:	bf00      	nop
 800508a:	3754      	adds	r7, #84	; 0x54
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f7ff fb0e 	bl	80046d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050b8:	bf00      	nop
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b088      	sub	sp, #32
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	e853 3f00 	ldrex	r3, [r3]
 80050d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050dc:	61fb      	str	r3, [r7, #28]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	461a      	mov	r2, r3
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	61bb      	str	r3, [r7, #24]
 80050e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ea:	6979      	ldr	r1, [r7, #20]
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	e841 2300 	strex	r3, r2, [r1]
 80050f2:	613b      	str	r3, [r7, #16]
   return(result);
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1e6      	bne.n	80050c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2220      	movs	r2, #32
 80050fe:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7ff fada 	bl	80046c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800510c:	bf00      	nop
 800510e:	3720      	adds	r7, #32
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	4603      	mov	r3, r0
 8005130:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005132:	2300      	movs	r3, #0
 8005134:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005136:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800513a:	2b84      	cmp	r3, #132	; 0x84
 800513c:	d005      	beq.n	800514a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800513e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	4413      	add	r3, r2
 8005146:	3303      	adds	r3, #3
 8005148:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800514a:	68fb      	ldr	r3, [r7, #12]
}
 800514c:	4618      	mov	r0, r3
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800515c:	f000 faf6 	bl	800574c <vTaskStartScheduler>
  
  return osOK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	bd80      	pop	{r7, pc}

08005166 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005166:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005168:	b089      	sub	sp, #36	; 0x24
 800516a:	af04      	add	r7, sp, #16
 800516c:	6078      	str	r0, [r7, #4]
 800516e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d020      	beq.n	80051ba <osThreadCreate+0x54>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d01c      	beq.n	80051ba <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685c      	ldr	r4, [r3, #4]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681d      	ldr	r5, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	691e      	ldr	r6, [r3, #16]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005192:	4618      	mov	r0, r3
 8005194:	f7ff ffc8 	bl	8005128 <makeFreeRtosPriority>
 8005198:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051a2:	9202      	str	r2, [sp, #8]
 80051a4:	9301      	str	r3, [sp, #4]
 80051a6:	9100      	str	r1, [sp, #0]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	4632      	mov	r2, r6
 80051ac:	4629      	mov	r1, r5
 80051ae:	4620      	mov	r0, r4
 80051b0:	f000 f8ed 	bl	800538e <xTaskCreateStatic>
 80051b4:	4603      	mov	r3, r0
 80051b6:	60fb      	str	r3, [r7, #12]
 80051b8:	e01c      	b.n	80051f4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685c      	ldr	r4, [r3, #4]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051c6:	b29e      	uxth	r6, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7ff ffaa 	bl	8005128 <makeFreeRtosPriority>
 80051d4:	4602      	mov	r2, r0
 80051d6:	f107 030c 	add.w	r3, r7, #12
 80051da:	9301      	str	r3, [sp, #4]
 80051dc:	9200      	str	r2, [sp, #0]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	4632      	mov	r2, r6
 80051e2:	4629      	mov	r1, r5
 80051e4:	4620      	mov	r0, r4
 80051e6:	f000 f92f 	bl	8005448 <xTaskCreate>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d001      	beq.n	80051f4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80051f0:	2300      	movs	r3, #0
 80051f2:	e000      	b.n	80051f6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80051f4:	68fb      	ldr	r3, [r7, #12]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3714      	adds	r7, #20
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080051fe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b084      	sub	sp, #16
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <osDelay+0x16>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	e000      	b.n	8005216 <osDelay+0x18>
 8005214:	2301      	movs	r3, #1
 8005216:	4618      	mov	r0, r3
 8005218:	f000 fa64 	bl	80056e4 <vTaskDelay>
  
  return osOK;
 800521c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f103 0208 	add.w	r2, r3, #8
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800523e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f103 0208 	add.w	r2, r3, #8
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f103 0208 	add.w	r2, r3, #8
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800525a:	bf00      	nop
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	683a      	ldr	r2, [r7, #0]
 80052a4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	1c5a      	adds	r2, r3, #1
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	601a      	str	r2, [r3, #0]
}
 80052bc:	bf00      	nop
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052de:	d103      	bne.n	80052e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	60fb      	str	r3, [r7, #12]
 80052e6:	e00c      	b.n	8005302 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	3308      	adds	r3, #8
 80052ec:	60fb      	str	r3, [r7, #12]
 80052ee:	e002      	b.n	80052f6 <vListInsert+0x2e>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	60fb      	str	r3, [r7, #12]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d2f6      	bcs.n	80052f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	683a      	ldr	r2, [r7, #0]
 800531c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	1c5a      	adds	r2, r3, #1
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	601a      	str	r2, [r3, #0]
}
 800532e:	bf00      	nop
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800533a:	b480      	push	{r7}
 800533c:	b085      	sub	sp, #20
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	6892      	ldr	r2, [r2, #8]
 8005350:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	6852      	ldr	r2, [r2, #4]
 800535a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	429a      	cmp	r2, r3
 8005364:	d103      	bne.n	800536e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689a      	ldr	r2, [r3, #8]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	1e5a      	subs	r2, r3, #1
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800538e:	b580      	push	{r7, lr}
 8005390:	b08e      	sub	sp, #56	; 0x38
 8005392:	af04      	add	r7, sp, #16
 8005394:	60f8      	str	r0, [r7, #12]
 8005396:	60b9      	str	r1, [r7, #8]
 8005398:	607a      	str	r2, [r7, #4]
 800539a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800539c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10a      	bne.n	80053b8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80053a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a6:	f383 8811 	msr	BASEPRI, r3
 80053aa:	f3bf 8f6f 	isb	sy
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80053b4:	bf00      	nop
 80053b6:	e7fe      	b.n	80053b6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80053b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10a      	bne.n	80053d4 <xTaskCreateStatic+0x46>
	__asm volatile
 80053be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	61fb      	str	r3, [r7, #28]
}
 80053d0:	bf00      	nop
 80053d2:	e7fe      	b.n	80053d2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053d4:	23b4      	movs	r3, #180	; 0xb4
 80053d6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	2bb4      	cmp	r3, #180	; 0xb4
 80053dc:	d00a      	beq.n	80053f4 <xTaskCreateStatic+0x66>
	__asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	61bb      	str	r3, [r7, #24]
}
 80053f0:	bf00      	nop
 80053f2:	e7fe      	b.n	80053f2 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80053f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80053f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d01e      	beq.n	800543a <xTaskCreateStatic+0xac>
 80053fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d01b      	beq.n	800543a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005404:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800540a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540e:	2202      	movs	r2, #2
 8005410:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005414:	2300      	movs	r3, #0
 8005416:	9303      	str	r3, [sp, #12]
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	9302      	str	r3, [sp, #8]
 800541c:	f107 0314 	add.w	r3, r7, #20
 8005420:	9301      	str	r3, [sp, #4]
 8005422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	68b9      	ldr	r1, [r7, #8]
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f000 f851 	bl	80054d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005432:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005434:	f000 f8ec 	bl	8005610 <prvAddNewTaskToReadyList>
 8005438:	e001      	b.n	800543e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800543a:	2300      	movs	r3, #0
 800543c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800543e:	697b      	ldr	r3, [r7, #20]
	}
 8005440:	4618      	mov	r0, r3
 8005442:	3728      	adds	r7, #40	; 0x28
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005448:	b580      	push	{r7, lr}
 800544a:	b08c      	sub	sp, #48	; 0x30
 800544c:	af04      	add	r7, sp, #16
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	603b      	str	r3, [r7, #0]
 8005454:	4613      	mov	r3, r2
 8005456:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005458:	88fb      	ldrh	r3, [r7, #6]
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	4618      	mov	r0, r3
 800545e:	f000 fef3 	bl	8006248 <pvPortMalloc>
 8005462:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00e      	beq.n	8005488 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800546a:	20b4      	movs	r0, #180	; 0xb4
 800546c:	f000 feec 	bl	8006248 <pvPortMalloc>
 8005470:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d003      	beq.n	8005480 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	631a      	str	r2, [r3, #48]	; 0x30
 800547e:	e005      	b.n	800548c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005480:	6978      	ldr	r0, [r7, #20]
 8005482:	f000 ffad 	bl	80063e0 <vPortFree>
 8005486:	e001      	b.n	800548c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005488:	2300      	movs	r3, #0
 800548a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d017      	beq.n	80054c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800549a:	88fa      	ldrh	r2, [r7, #6]
 800549c:	2300      	movs	r3, #0
 800549e:	9303      	str	r3, [sp, #12]
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	9302      	str	r3, [sp, #8]
 80054a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a6:	9301      	str	r3, [sp, #4]
 80054a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054aa:	9300      	str	r3, [sp, #0]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	68b9      	ldr	r1, [r7, #8]
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f000 f80f 	bl	80054d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054b6:	69f8      	ldr	r0, [r7, #28]
 80054b8:	f000 f8aa 	bl	8005610 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80054bc:	2301      	movs	r3, #1
 80054be:	61bb      	str	r3, [r7, #24]
 80054c0:	e002      	b.n	80054c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80054c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80054c8:	69bb      	ldr	r3, [r7, #24]
	}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3720      	adds	r7, #32
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
	...

080054d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b088      	sub	sp, #32
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
 80054e0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80054ec:	3b01      	subs	r3, #1
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	f023 0307 	bic.w	r3, r3, #7
 80054fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	f003 0307 	and.w	r3, r3, #7
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00a      	beq.n	800551c <prvInitialiseNewTask+0x48>
	__asm volatile
 8005506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550a:	f383 8811 	msr	BASEPRI, r3
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f3bf 8f4f 	dsb	sy
 8005516:	617b      	str	r3, [r7, #20]
}
 8005518:	bf00      	nop
 800551a:	e7fe      	b.n	800551a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d01f      	beq.n	8005562 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005522:	2300      	movs	r3, #0
 8005524:	61fb      	str	r3, [r7, #28]
 8005526:	e012      	b.n	800554e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	4413      	add	r3, r2
 800552e:	7819      	ldrb	r1, [r3, #0]
 8005530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	4413      	add	r3, r2
 8005536:	3334      	adds	r3, #52	; 0x34
 8005538:	460a      	mov	r2, r1
 800553a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	4413      	add	r3, r2
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d006      	beq.n	8005556 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	3301      	adds	r3, #1
 800554c:	61fb      	str	r3, [r7, #28]
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	2b0f      	cmp	r3, #15
 8005552:	d9e9      	bls.n	8005528 <prvInitialiseNewTask+0x54>
 8005554:	e000      	b.n	8005558 <prvInitialiseNewTask+0x84>
			{
				break;
 8005556:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555a:	2200      	movs	r2, #0
 800555c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005560:	e003      	b.n	800556a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800556a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556c:	2b06      	cmp	r3, #6
 800556e:	d901      	bls.n	8005574 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005570:	2306      	movs	r3, #6
 8005572:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005578:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800557a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800557e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005582:	2200      	movs	r2, #0
 8005584:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005588:	3304      	adds	r3, #4
 800558a:	4618      	mov	r0, r3
 800558c:	f7ff fe6b 	bl	8005266 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005592:	3318      	adds	r3, #24
 8005594:	4618      	mov	r0, r3
 8005596:	f7ff fe66 	bl	8005266 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800559a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800559e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a2:	f1c3 0207 	rsb	r2, r3, #7
 80055a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80055aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80055b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b2:	2200      	movs	r2, #0
 80055b4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80055b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80055c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c2:	334c      	adds	r3, #76	; 0x4c
 80055c4:	2260      	movs	r2, #96	; 0x60
 80055c6:	2100      	movs	r1, #0
 80055c8:	4618      	mov	r0, r3
 80055ca:	f001 f961 	bl	8006890 <memset>
 80055ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d0:	4a0c      	ldr	r2, [pc, #48]	; (8005604 <prvInitialiseNewTask+0x130>)
 80055d2:	651a      	str	r2, [r3, #80]	; 0x50
 80055d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d6:	4a0c      	ldr	r2, [pc, #48]	; (8005608 <prvInitialiseNewTask+0x134>)
 80055d8:	655a      	str	r2, [r3, #84]	; 0x54
 80055da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055dc:	4a0b      	ldr	r2, [pc, #44]	; (800560c <prvInitialiseNewTask+0x138>)
 80055de:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	68f9      	ldr	r1, [r7, #12]
 80055e4:	69b8      	ldr	r0, [r7, #24]
 80055e6:	f000 fc1f 	bl	8005e28 <pxPortInitialiseStack>
 80055ea:	4602      	mov	r2, r0
 80055ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80055f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d002      	beq.n	80055fc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055fc:	bf00      	nop
 80055fe:	3720      	adds	r7, #32
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	0800b200 	.word	0x0800b200
 8005608:	0800b220 	.word	0x0800b220
 800560c:	0800b1e0 	.word	0x0800b1e0

08005610 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005618:	f000 fd34 	bl	8006084 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800561c:	4b2a      	ldr	r3, [pc, #168]	; (80056c8 <prvAddNewTaskToReadyList+0xb8>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3301      	adds	r3, #1
 8005622:	4a29      	ldr	r2, [pc, #164]	; (80056c8 <prvAddNewTaskToReadyList+0xb8>)
 8005624:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005626:	4b29      	ldr	r3, [pc, #164]	; (80056cc <prvAddNewTaskToReadyList+0xbc>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d109      	bne.n	8005642 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800562e:	4a27      	ldr	r2, [pc, #156]	; (80056cc <prvAddNewTaskToReadyList+0xbc>)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005634:	4b24      	ldr	r3, [pc, #144]	; (80056c8 <prvAddNewTaskToReadyList+0xb8>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d110      	bne.n	800565e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800563c:	f000 facc 	bl	8005bd8 <prvInitialiseTaskLists>
 8005640:	e00d      	b.n	800565e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005642:	4b23      	ldr	r3, [pc, #140]	; (80056d0 <prvAddNewTaskToReadyList+0xc0>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d109      	bne.n	800565e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800564a:	4b20      	ldr	r3, [pc, #128]	; (80056cc <prvAddNewTaskToReadyList+0xbc>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005654:	429a      	cmp	r2, r3
 8005656:	d802      	bhi.n	800565e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005658:	4a1c      	ldr	r2, [pc, #112]	; (80056cc <prvAddNewTaskToReadyList+0xbc>)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800565e:	4b1d      	ldr	r3, [pc, #116]	; (80056d4 <prvAddNewTaskToReadyList+0xc4>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	3301      	adds	r3, #1
 8005664:	4a1b      	ldr	r2, [pc, #108]	; (80056d4 <prvAddNewTaskToReadyList+0xc4>)
 8005666:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566c:	2201      	movs	r2, #1
 800566e:	409a      	lsls	r2, r3
 8005670:	4b19      	ldr	r3, [pc, #100]	; (80056d8 <prvAddNewTaskToReadyList+0xc8>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4313      	orrs	r3, r2
 8005676:	4a18      	ldr	r2, [pc, #96]	; (80056d8 <prvAddNewTaskToReadyList+0xc8>)
 8005678:	6013      	str	r3, [r2, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800567e:	4613      	mov	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4413      	add	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4a15      	ldr	r2, [pc, #84]	; (80056dc <prvAddNewTaskToReadyList+0xcc>)
 8005688:	441a      	add	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	3304      	adds	r3, #4
 800568e:	4619      	mov	r1, r3
 8005690:	4610      	mov	r0, r2
 8005692:	f7ff fdf5 	bl	8005280 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005696:	f000 fd25 	bl	80060e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800569a:	4b0d      	ldr	r3, [pc, #52]	; (80056d0 <prvAddNewTaskToReadyList+0xc0>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00e      	beq.n	80056c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80056a2:	4b0a      	ldr	r3, [pc, #40]	; (80056cc <prvAddNewTaskToReadyList+0xbc>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d207      	bcs.n	80056c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80056b0:	4b0b      	ldr	r3, [pc, #44]	; (80056e0 <prvAddNewTaskToReadyList+0xd0>)
 80056b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056b6:	601a      	str	r2, [r3, #0]
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056c0:	bf00      	nop
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	2000079c 	.word	0x2000079c
 80056cc:	2000069c 	.word	0x2000069c
 80056d0:	200007a8 	.word	0x200007a8
 80056d4:	200007b8 	.word	0x200007b8
 80056d8:	200007a4 	.word	0x200007a4
 80056dc:	200006a0 	.word	0x200006a0
 80056e0:	e000ed04 	.word	0xe000ed04

080056e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056ec:	2300      	movs	r3, #0
 80056ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d017      	beq.n	8005726 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056f6:	4b13      	ldr	r3, [pc, #76]	; (8005744 <vTaskDelay+0x60>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00a      	beq.n	8005714 <vTaskDelay+0x30>
	__asm volatile
 80056fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005702:	f383 8811 	msr	BASEPRI, r3
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	60bb      	str	r3, [r7, #8]
}
 8005710:	bf00      	nop
 8005712:	e7fe      	b.n	8005712 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005714:	f000 f884 	bl	8005820 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005718:	2100      	movs	r1, #0
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 fb1e 	bl	8005d5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005720:	f000 f88c 	bl	800583c <xTaskResumeAll>
 8005724:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d107      	bne.n	800573c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800572c:	4b06      	ldr	r3, [pc, #24]	; (8005748 <vTaskDelay+0x64>)
 800572e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800573c:	bf00      	nop
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	200007c4 	.word	0x200007c4
 8005748:	e000ed04 	.word	0xe000ed04

0800574c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b08a      	sub	sp, #40	; 0x28
 8005750:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005752:	2300      	movs	r3, #0
 8005754:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005756:	2300      	movs	r3, #0
 8005758:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800575a:	463a      	mov	r2, r7
 800575c:	1d39      	adds	r1, r7, #4
 800575e:	f107 0308 	add.w	r3, r7, #8
 8005762:	4618      	mov	r0, r3
 8005764:	f7fb fd12 	bl	800118c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005768:	6839      	ldr	r1, [r7, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	9202      	str	r2, [sp, #8]
 8005770:	9301      	str	r3, [sp, #4]
 8005772:	2300      	movs	r3, #0
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	2300      	movs	r3, #0
 8005778:	460a      	mov	r2, r1
 800577a:	4921      	ldr	r1, [pc, #132]	; (8005800 <vTaskStartScheduler+0xb4>)
 800577c:	4821      	ldr	r0, [pc, #132]	; (8005804 <vTaskStartScheduler+0xb8>)
 800577e:	f7ff fe06 	bl	800538e <xTaskCreateStatic>
 8005782:	4603      	mov	r3, r0
 8005784:	4a20      	ldr	r2, [pc, #128]	; (8005808 <vTaskStartScheduler+0xbc>)
 8005786:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005788:	4b1f      	ldr	r3, [pc, #124]	; (8005808 <vTaskStartScheduler+0xbc>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005790:	2301      	movs	r3, #1
 8005792:	617b      	str	r3, [r7, #20]
 8005794:	e001      	b.n	800579a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005796:	2300      	movs	r3, #0
 8005798:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d11b      	bne.n	80057d8 <vTaskStartScheduler+0x8c>
	__asm volatile
 80057a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a4:	f383 8811 	msr	BASEPRI, r3
 80057a8:	f3bf 8f6f 	isb	sy
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	613b      	str	r3, [r7, #16]
}
 80057b2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80057b4:	4b15      	ldr	r3, [pc, #84]	; (800580c <vTaskStartScheduler+0xc0>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	334c      	adds	r3, #76	; 0x4c
 80057ba:	4a15      	ldr	r2, [pc, #84]	; (8005810 <vTaskStartScheduler+0xc4>)
 80057bc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80057be:	4b15      	ldr	r3, [pc, #84]	; (8005814 <vTaskStartScheduler+0xc8>)
 80057c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057c6:	4b14      	ldr	r3, [pc, #80]	; (8005818 <vTaskStartScheduler+0xcc>)
 80057c8:	2201      	movs	r2, #1
 80057ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80057cc:	4b13      	ldr	r3, [pc, #76]	; (800581c <vTaskStartScheduler+0xd0>)
 80057ce:	2200      	movs	r2, #0
 80057d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057d2:	f000 fbb5 	bl	8005f40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80057d6:	e00e      	b.n	80057f6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057de:	d10a      	bne.n	80057f6 <vTaskStartScheduler+0xaa>
	__asm volatile
 80057e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e4:	f383 8811 	msr	BASEPRI, r3
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	60fb      	str	r3, [r7, #12]
}
 80057f2:	bf00      	nop
 80057f4:	e7fe      	b.n	80057f4 <vTaskStartScheduler+0xa8>
}
 80057f6:	bf00      	nop
 80057f8:	3718      	adds	r7, #24
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	0800b190 	.word	0x0800b190
 8005804:	08005ba9 	.word	0x08005ba9
 8005808:	200007c0 	.word	0x200007c0
 800580c:	2000069c 	.word	0x2000069c
 8005810:	20000010 	.word	0x20000010
 8005814:	200007bc 	.word	0x200007bc
 8005818:	200007a8 	.word	0x200007a8
 800581c:	200007a0 	.word	0x200007a0

08005820 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005820:	b480      	push	{r7}
 8005822:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005824:	4b04      	ldr	r3, [pc, #16]	; (8005838 <vTaskSuspendAll+0x18>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	3301      	adds	r3, #1
 800582a:	4a03      	ldr	r2, [pc, #12]	; (8005838 <vTaskSuspendAll+0x18>)
 800582c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800582e:	bf00      	nop
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	200007c4 	.word	0x200007c4

0800583c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005842:	2300      	movs	r3, #0
 8005844:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005846:	2300      	movs	r3, #0
 8005848:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800584a:	4b41      	ldr	r3, [pc, #260]	; (8005950 <xTaskResumeAll+0x114>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10a      	bne.n	8005868 <xTaskResumeAll+0x2c>
	__asm volatile
 8005852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005856:	f383 8811 	msr	BASEPRI, r3
 800585a:	f3bf 8f6f 	isb	sy
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	603b      	str	r3, [r7, #0]
}
 8005864:	bf00      	nop
 8005866:	e7fe      	b.n	8005866 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005868:	f000 fc0c 	bl	8006084 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800586c:	4b38      	ldr	r3, [pc, #224]	; (8005950 <xTaskResumeAll+0x114>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	3b01      	subs	r3, #1
 8005872:	4a37      	ldr	r2, [pc, #220]	; (8005950 <xTaskResumeAll+0x114>)
 8005874:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005876:	4b36      	ldr	r3, [pc, #216]	; (8005950 <xTaskResumeAll+0x114>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d161      	bne.n	8005942 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800587e:	4b35      	ldr	r3, [pc, #212]	; (8005954 <xTaskResumeAll+0x118>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d05d      	beq.n	8005942 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005886:	e02e      	b.n	80058e6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005888:	4b33      	ldr	r3, [pc, #204]	; (8005958 <xTaskResumeAll+0x11c>)
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	3318      	adds	r3, #24
 8005894:	4618      	mov	r0, r3
 8005896:	f7ff fd50 	bl	800533a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	3304      	adds	r3, #4
 800589e:	4618      	mov	r0, r3
 80058a0:	f7ff fd4b 	bl	800533a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a8:	2201      	movs	r2, #1
 80058aa:	409a      	lsls	r2, r3
 80058ac:	4b2b      	ldr	r3, [pc, #172]	; (800595c <xTaskResumeAll+0x120>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	4a2a      	ldr	r2, [pc, #168]	; (800595c <xTaskResumeAll+0x120>)
 80058b4:	6013      	str	r3, [r2, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ba:	4613      	mov	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4413      	add	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4a27      	ldr	r2, [pc, #156]	; (8005960 <xTaskResumeAll+0x124>)
 80058c4:	441a      	add	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	3304      	adds	r3, #4
 80058ca:	4619      	mov	r1, r3
 80058cc:	4610      	mov	r0, r2
 80058ce:	f7ff fcd7 	bl	8005280 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d6:	4b23      	ldr	r3, [pc, #140]	; (8005964 <xTaskResumeAll+0x128>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058dc:	429a      	cmp	r2, r3
 80058de:	d302      	bcc.n	80058e6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80058e0:	4b21      	ldr	r3, [pc, #132]	; (8005968 <xTaskResumeAll+0x12c>)
 80058e2:	2201      	movs	r2, #1
 80058e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058e6:	4b1c      	ldr	r3, [pc, #112]	; (8005958 <xTaskResumeAll+0x11c>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1cc      	bne.n	8005888 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058f4:	f000 fa12 	bl	8005d1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80058f8:	4b1c      	ldr	r3, [pc, #112]	; (800596c <xTaskResumeAll+0x130>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d010      	beq.n	8005926 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005904:	f000 f836 	bl	8005974 <xTaskIncrementTick>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d002      	beq.n	8005914 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800590e:	4b16      	ldr	r3, [pc, #88]	; (8005968 <xTaskResumeAll+0x12c>)
 8005910:	2201      	movs	r2, #1
 8005912:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	3b01      	subs	r3, #1
 8005918:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1f1      	bne.n	8005904 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005920:	4b12      	ldr	r3, [pc, #72]	; (800596c <xTaskResumeAll+0x130>)
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005926:	4b10      	ldr	r3, [pc, #64]	; (8005968 <xTaskResumeAll+0x12c>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d009      	beq.n	8005942 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800592e:	2301      	movs	r3, #1
 8005930:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005932:	4b0f      	ldr	r3, [pc, #60]	; (8005970 <xTaskResumeAll+0x134>)
 8005934:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005942:	f000 fbcf 	bl	80060e4 <vPortExitCritical>

	return xAlreadyYielded;
 8005946:	68bb      	ldr	r3, [r7, #8]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	200007c4 	.word	0x200007c4
 8005954:	2000079c 	.word	0x2000079c
 8005958:	2000075c 	.word	0x2000075c
 800595c:	200007a4 	.word	0x200007a4
 8005960:	200006a0 	.word	0x200006a0
 8005964:	2000069c 	.word	0x2000069c
 8005968:	200007b0 	.word	0x200007b0
 800596c:	200007ac 	.word	0x200007ac
 8005970:	e000ed04 	.word	0xe000ed04

08005974 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800597a:	2300      	movs	r3, #0
 800597c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800597e:	4b4e      	ldr	r3, [pc, #312]	; (8005ab8 <xTaskIncrementTick+0x144>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	f040 808e 	bne.w	8005aa4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005988:	4b4c      	ldr	r3, [pc, #304]	; (8005abc <xTaskIncrementTick+0x148>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	3301      	adds	r3, #1
 800598e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005990:	4a4a      	ldr	r2, [pc, #296]	; (8005abc <xTaskIncrementTick+0x148>)
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d120      	bne.n	80059de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800599c:	4b48      	ldr	r3, [pc, #288]	; (8005ac0 <xTaskIncrementTick+0x14c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <xTaskIncrementTick+0x48>
	__asm volatile
 80059a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	603b      	str	r3, [r7, #0]
}
 80059b8:	bf00      	nop
 80059ba:	e7fe      	b.n	80059ba <xTaskIncrementTick+0x46>
 80059bc:	4b40      	ldr	r3, [pc, #256]	; (8005ac0 <xTaskIncrementTick+0x14c>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	4b40      	ldr	r3, [pc, #256]	; (8005ac4 <xTaskIncrementTick+0x150>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a3e      	ldr	r2, [pc, #248]	; (8005ac0 <xTaskIncrementTick+0x14c>)
 80059c8:	6013      	str	r3, [r2, #0]
 80059ca:	4a3e      	ldr	r2, [pc, #248]	; (8005ac4 <xTaskIncrementTick+0x150>)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6013      	str	r3, [r2, #0]
 80059d0:	4b3d      	ldr	r3, [pc, #244]	; (8005ac8 <xTaskIncrementTick+0x154>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	3301      	adds	r3, #1
 80059d6:	4a3c      	ldr	r2, [pc, #240]	; (8005ac8 <xTaskIncrementTick+0x154>)
 80059d8:	6013      	str	r3, [r2, #0]
 80059da:	f000 f99f 	bl	8005d1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059de:	4b3b      	ldr	r3, [pc, #236]	; (8005acc <xTaskIncrementTick+0x158>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d348      	bcc.n	8005a7a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059e8:	4b35      	ldr	r3, [pc, #212]	; (8005ac0 <xTaskIncrementTick+0x14c>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d104      	bne.n	80059fc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059f2:	4b36      	ldr	r3, [pc, #216]	; (8005acc <xTaskIncrementTick+0x158>)
 80059f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059f8:	601a      	str	r2, [r3, #0]
					break;
 80059fa:	e03e      	b.n	8005a7a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059fc:	4b30      	ldr	r3, [pc, #192]	; (8005ac0 <xTaskIncrementTick+0x14c>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d203      	bcs.n	8005a1c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a14:	4a2d      	ldr	r2, [pc, #180]	; (8005acc <xTaskIncrementTick+0x158>)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a1a:	e02e      	b.n	8005a7a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	3304      	adds	r3, #4
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7ff fc8a 	bl	800533a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d004      	beq.n	8005a38 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	3318      	adds	r3, #24
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7ff fc81 	bl	800533a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	409a      	lsls	r2, r3
 8005a40:	4b23      	ldr	r3, [pc, #140]	; (8005ad0 <xTaskIncrementTick+0x15c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	4a22      	ldr	r2, [pc, #136]	; (8005ad0 <xTaskIncrementTick+0x15c>)
 8005a48:	6013      	str	r3, [r2, #0]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a4e:	4613      	mov	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4413      	add	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4a1f      	ldr	r2, [pc, #124]	; (8005ad4 <xTaskIncrementTick+0x160>)
 8005a58:	441a      	add	r2, r3
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	4619      	mov	r1, r3
 8005a60:	4610      	mov	r0, r2
 8005a62:	f7ff fc0d 	bl	8005280 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a6a:	4b1b      	ldr	r3, [pc, #108]	; (8005ad8 <xTaskIncrementTick+0x164>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d3b9      	bcc.n	80059e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005a74:	2301      	movs	r3, #1
 8005a76:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a78:	e7b6      	b.n	80059e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a7a:	4b17      	ldr	r3, [pc, #92]	; (8005ad8 <xTaskIncrementTick+0x164>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a80:	4914      	ldr	r1, [pc, #80]	; (8005ad4 <xTaskIncrementTick+0x160>)
 8005a82:	4613      	mov	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	440b      	add	r3, r1
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d901      	bls.n	8005a96 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005a92:	2301      	movs	r3, #1
 8005a94:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005a96:	4b11      	ldr	r3, [pc, #68]	; (8005adc <xTaskIncrementTick+0x168>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d007      	beq.n	8005aae <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	617b      	str	r3, [r7, #20]
 8005aa2:	e004      	b.n	8005aae <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005aa4:	4b0e      	ldr	r3, [pc, #56]	; (8005ae0 <xTaskIncrementTick+0x16c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	4a0d      	ldr	r2, [pc, #52]	; (8005ae0 <xTaskIncrementTick+0x16c>)
 8005aac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005aae:	697b      	ldr	r3, [r7, #20]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3718      	adds	r7, #24
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	200007c4 	.word	0x200007c4
 8005abc:	200007a0 	.word	0x200007a0
 8005ac0:	20000754 	.word	0x20000754
 8005ac4:	20000758 	.word	0x20000758
 8005ac8:	200007b4 	.word	0x200007b4
 8005acc:	200007bc 	.word	0x200007bc
 8005ad0:	200007a4 	.word	0x200007a4
 8005ad4:	200006a0 	.word	0x200006a0
 8005ad8:	2000069c 	.word	0x2000069c
 8005adc:	200007b0 	.word	0x200007b0
 8005ae0:	200007ac 	.word	0x200007ac

08005ae4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005aea:	4b29      	ldr	r3, [pc, #164]	; (8005b90 <vTaskSwitchContext+0xac>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005af2:	4b28      	ldr	r3, [pc, #160]	; (8005b94 <vTaskSwitchContext+0xb0>)
 8005af4:	2201      	movs	r2, #1
 8005af6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005af8:	e044      	b.n	8005b84 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005afa:	4b26      	ldr	r3, [pc, #152]	; (8005b94 <vTaskSwitchContext+0xb0>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b00:	4b25      	ldr	r3, [pc, #148]	; (8005b98 <vTaskSwitchContext+0xb4>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	fab3 f383 	clz	r3, r3
 8005b0c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005b0e:	7afb      	ldrb	r3, [r7, #11]
 8005b10:	f1c3 031f 	rsb	r3, r3, #31
 8005b14:	617b      	str	r3, [r7, #20]
 8005b16:	4921      	ldr	r1, [pc, #132]	; (8005b9c <vTaskSwitchContext+0xb8>)
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4413      	add	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	440b      	add	r3, r1
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10a      	bne.n	8005b40 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	607b      	str	r3, [r7, #4]
}
 8005b3c:	bf00      	nop
 8005b3e:	e7fe      	b.n	8005b3e <vTaskSwitchContext+0x5a>
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	4613      	mov	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4413      	add	r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4a14      	ldr	r2, [pc, #80]	; (8005b9c <vTaskSwitchContext+0xb8>)
 8005b4c:	4413      	add	r3, r2
 8005b4e:	613b      	str	r3, [r7, #16]
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	605a      	str	r2, [r3, #4]
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	3308      	adds	r3, #8
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d104      	bne.n	8005b70 <vTaskSwitchContext+0x8c>
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	605a      	str	r2, [r3, #4]
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	4a0a      	ldr	r2, [pc, #40]	; (8005ba0 <vTaskSwitchContext+0xbc>)
 8005b78:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b7a:	4b09      	ldr	r3, [pc, #36]	; (8005ba0 <vTaskSwitchContext+0xbc>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	334c      	adds	r3, #76	; 0x4c
 8005b80:	4a08      	ldr	r2, [pc, #32]	; (8005ba4 <vTaskSwitchContext+0xc0>)
 8005b82:	6013      	str	r3, [r2, #0]
}
 8005b84:	bf00      	nop
 8005b86:	371c      	adds	r7, #28
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	200007c4 	.word	0x200007c4
 8005b94:	200007b0 	.word	0x200007b0
 8005b98:	200007a4 	.word	0x200007a4
 8005b9c:	200006a0 	.word	0x200006a0
 8005ba0:	2000069c 	.word	0x2000069c
 8005ba4:	20000010 	.word	0x20000010

08005ba8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005bb0:	f000 f852 	bl	8005c58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005bb4:	4b06      	ldr	r3, [pc, #24]	; (8005bd0 <prvIdleTask+0x28>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d9f9      	bls.n	8005bb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005bbc:	4b05      	ldr	r3, [pc, #20]	; (8005bd4 <prvIdleTask+0x2c>)
 8005bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	f3bf 8f4f 	dsb	sy
 8005bc8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005bcc:	e7f0      	b.n	8005bb0 <prvIdleTask+0x8>
 8005bce:	bf00      	nop
 8005bd0:	200006a0 	.word	0x200006a0
 8005bd4:	e000ed04 	.word	0xe000ed04

08005bd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bde:	2300      	movs	r3, #0
 8005be0:	607b      	str	r3, [r7, #4]
 8005be2:	e00c      	b.n	8005bfe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	4613      	mov	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4413      	add	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4a12      	ldr	r2, [pc, #72]	; (8005c38 <prvInitialiseTaskLists+0x60>)
 8005bf0:	4413      	add	r3, r2
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7ff fb17 	bl	8005226 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	607b      	str	r3, [r7, #4]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b06      	cmp	r3, #6
 8005c02:	d9ef      	bls.n	8005be4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c04:	480d      	ldr	r0, [pc, #52]	; (8005c3c <prvInitialiseTaskLists+0x64>)
 8005c06:	f7ff fb0e 	bl	8005226 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c0a:	480d      	ldr	r0, [pc, #52]	; (8005c40 <prvInitialiseTaskLists+0x68>)
 8005c0c:	f7ff fb0b 	bl	8005226 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c10:	480c      	ldr	r0, [pc, #48]	; (8005c44 <prvInitialiseTaskLists+0x6c>)
 8005c12:	f7ff fb08 	bl	8005226 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c16:	480c      	ldr	r0, [pc, #48]	; (8005c48 <prvInitialiseTaskLists+0x70>)
 8005c18:	f7ff fb05 	bl	8005226 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c1c:	480b      	ldr	r0, [pc, #44]	; (8005c4c <prvInitialiseTaskLists+0x74>)
 8005c1e:	f7ff fb02 	bl	8005226 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c22:	4b0b      	ldr	r3, [pc, #44]	; (8005c50 <prvInitialiseTaskLists+0x78>)
 8005c24:	4a05      	ldr	r2, [pc, #20]	; (8005c3c <prvInitialiseTaskLists+0x64>)
 8005c26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c28:	4b0a      	ldr	r3, [pc, #40]	; (8005c54 <prvInitialiseTaskLists+0x7c>)
 8005c2a:	4a05      	ldr	r2, [pc, #20]	; (8005c40 <prvInitialiseTaskLists+0x68>)
 8005c2c:	601a      	str	r2, [r3, #0]
}
 8005c2e:	bf00      	nop
 8005c30:	3708      	adds	r7, #8
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	200006a0 	.word	0x200006a0
 8005c3c:	2000072c 	.word	0x2000072c
 8005c40:	20000740 	.word	0x20000740
 8005c44:	2000075c 	.word	0x2000075c
 8005c48:	20000770 	.word	0x20000770
 8005c4c:	20000788 	.word	0x20000788
 8005c50:	20000754 	.word	0x20000754
 8005c54:	20000758 	.word	0x20000758

08005c58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c5e:	e019      	b.n	8005c94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c60:	f000 fa10 	bl	8006084 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c64:	4b10      	ldr	r3, [pc, #64]	; (8005ca8 <prvCheckTasksWaitingTermination+0x50>)
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	3304      	adds	r3, #4
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7ff fb62 	bl	800533a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c76:	4b0d      	ldr	r3, [pc, #52]	; (8005cac <prvCheckTasksWaitingTermination+0x54>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	4a0b      	ldr	r2, [pc, #44]	; (8005cac <prvCheckTasksWaitingTermination+0x54>)
 8005c7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c80:	4b0b      	ldr	r3, [pc, #44]	; (8005cb0 <prvCheckTasksWaitingTermination+0x58>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3b01      	subs	r3, #1
 8005c86:	4a0a      	ldr	r2, [pc, #40]	; (8005cb0 <prvCheckTasksWaitingTermination+0x58>)
 8005c88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c8a:	f000 fa2b 	bl	80060e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 f810 	bl	8005cb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c94:	4b06      	ldr	r3, [pc, #24]	; (8005cb0 <prvCheckTasksWaitingTermination+0x58>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d1e1      	bne.n	8005c60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c9c:	bf00      	nop
 8005c9e:	bf00      	nop
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	20000770 	.word	0x20000770
 8005cac:	2000079c 	.word	0x2000079c
 8005cb0:	20000784 	.word	0x20000784

08005cb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	334c      	adds	r3, #76	; 0x4c
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f001 fd55 	bl	8007770 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d108      	bne.n	8005ce2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f000 fb83 	bl	80063e0 <vPortFree>
				vPortFree( pxTCB );
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fb80 	bl	80063e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ce0:	e018      	b.n	8005d14 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d103      	bne.n	8005cf4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 fb77 	bl	80063e0 <vPortFree>
	}
 8005cf2:	e00f      	b.n	8005d14 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d00a      	beq.n	8005d14 <prvDeleteTCB+0x60>
	__asm volatile
 8005cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d02:	f383 8811 	msr	BASEPRI, r3
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	60fb      	str	r3, [r7, #12]
}
 8005d10:	bf00      	nop
 8005d12:	e7fe      	b.n	8005d12 <prvDeleteTCB+0x5e>
	}
 8005d14:	bf00      	nop
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d22:	4b0c      	ldr	r3, [pc, #48]	; (8005d54 <prvResetNextTaskUnblockTime+0x38>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d104      	bne.n	8005d36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d2c:	4b0a      	ldr	r3, [pc, #40]	; (8005d58 <prvResetNextTaskUnblockTime+0x3c>)
 8005d2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d34:	e008      	b.n	8005d48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d36:	4b07      	ldr	r3, [pc, #28]	; (8005d54 <prvResetNextTaskUnblockTime+0x38>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	4a04      	ldr	r2, [pc, #16]	; (8005d58 <prvResetNextTaskUnblockTime+0x3c>)
 8005d46:	6013      	str	r3, [r2, #0]
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	20000754 	.word	0x20000754
 8005d58:	200007bc 	.word	0x200007bc

08005d5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d66:	4b29      	ldr	r3, [pc, #164]	; (8005e0c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d6c:	4b28      	ldr	r3, [pc, #160]	; (8005e10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3304      	adds	r3, #4
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7ff fae1 	bl	800533a <uxListRemove>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10b      	bne.n	8005d96 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005d7e:	4b24      	ldr	r3, [pc, #144]	; (8005e10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d84:	2201      	movs	r2, #1
 8005d86:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8a:	43da      	mvns	r2, r3
 8005d8c:	4b21      	ldr	r3, [pc, #132]	; (8005e14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4013      	ands	r3, r2
 8005d92:	4a20      	ldr	r2, [pc, #128]	; (8005e14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d94:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d9c:	d10a      	bne.n	8005db4 <prvAddCurrentTaskToDelayedList+0x58>
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d007      	beq.n	8005db4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005da4:	4b1a      	ldr	r3, [pc, #104]	; (8005e10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	3304      	adds	r3, #4
 8005daa:	4619      	mov	r1, r3
 8005dac:	481a      	ldr	r0, [pc, #104]	; (8005e18 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005dae:	f7ff fa67 	bl	8005280 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005db2:	e026      	b.n	8005e02 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4413      	add	r3, r2
 8005dba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005dbc:	4b14      	ldr	r3, [pc, #80]	; (8005e10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d209      	bcs.n	8005de0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dcc:	4b13      	ldr	r3, [pc, #76]	; (8005e1c <prvAddCurrentTaskToDelayedList+0xc0>)
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	4b0f      	ldr	r3, [pc, #60]	; (8005e10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	3304      	adds	r3, #4
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	4610      	mov	r0, r2
 8005dda:	f7ff fa75 	bl	80052c8 <vListInsert>
}
 8005dde:	e010      	b.n	8005e02 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005de0:	4b0f      	ldr	r3, [pc, #60]	; (8005e20 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	4b0a      	ldr	r3, [pc, #40]	; (8005e10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3304      	adds	r3, #4
 8005dea:	4619      	mov	r1, r3
 8005dec:	4610      	mov	r0, r2
 8005dee:	f7ff fa6b 	bl	80052c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005df2:	4b0c      	ldr	r3, [pc, #48]	; (8005e24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d202      	bcs.n	8005e02 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005dfc:	4a09      	ldr	r2, [pc, #36]	; (8005e24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	6013      	str	r3, [r2, #0]
}
 8005e02:	bf00      	nop
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	200007a0 	.word	0x200007a0
 8005e10:	2000069c 	.word	0x2000069c
 8005e14:	200007a4 	.word	0x200007a4
 8005e18:	20000788 	.word	0x20000788
 8005e1c:	20000758 	.word	0x20000758
 8005e20:	20000754 	.word	0x20000754
 8005e24:	200007bc 	.word	0x200007bc

08005e28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	3b04      	subs	r3, #4
 8005e38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	3b04      	subs	r3, #4
 8005e46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	f023 0201 	bic.w	r2, r3, #1
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	3b04      	subs	r3, #4
 8005e56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e58:	4a0c      	ldr	r2, [pc, #48]	; (8005e8c <pxPortInitialiseStack+0x64>)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	3b14      	subs	r3, #20
 8005e62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	3b04      	subs	r3, #4
 8005e6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f06f 0202 	mvn.w	r2, #2
 8005e76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	3b20      	subs	r3, #32
 8005e7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr
 8005e8c:	08005e91 	.word	0x08005e91

08005e90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005e96:	2300      	movs	r3, #0
 8005e98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e9a:	4b12      	ldr	r3, [pc, #72]	; (8005ee4 <prvTaskExitError+0x54>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ea2:	d00a      	beq.n	8005eba <prvTaskExitError+0x2a>
	__asm volatile
 8005ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea8:	f383 8811 	msr	BASEPRI, r3
 8005eac:	f3bf 8f6f 	isb	sy
 8005eb0:	f3bf 8f4f 	dsb	sy
 8005eb4:	60fb      	str	r3, [r7, #12]
}
 8005eb6:	bf00      	nop
 8005eb8:	e7fe      	b.n	8005eb8 <prvTaskExitError+0x28>
	__asm volatile
 8005eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebe:	f383 8811 	msr	BASEPRI, r3
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	60bb      	str	r3, [r7, #8]
}
 8005ecc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ece:	bf00      	nop
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d0fc      	beq.n	8005ed0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ed6:	bf00      	nop
 8005ed8:	bf00      	nop
 8005eda:	3714      	adds	r7, #20
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	2000000c 	.word	0x2000000c
	...

08005ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ef0:	4b07      	ldr	r3, [pc, #28]	; (8005f10 <pxCurrentTCBConst2>)
 8005ef2:	6819      	ldr	r1, [r3, #0]
 8005ef4:	6808      	ldr	r0, [r1, #0]
 8005ef6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005efa:	f380 8809 	msr	PSP, r0
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	f04f 0000 	mov.w	r0, #0
 8005f06:	f380 8811 	msr	BASEPRI, r0
 8005f0a:	4770      	bx	lr
 8005f0c:	f3af 8000 	nop.w

08005f10 <pxCurrentTCBConst2>:
 8005f10:	2000069c 	.word	0x2000069c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f14:	bf00      	nop
 8005f16:	bf00      	nop

08005f18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005f18:	4808      	ldr	r0, [pc, #32]	; (8005f3c <prvPortStartFirstTask+0x24>)
 8005f1a:	6800      	ldr	r0, [r0, #0]
 8005f1c:	6800      	ldr	r0, [r0, #0]
 8005f1e:	f380 8808 	msr	MSP, r0
 8005f22:	f04f 0000 	mov.w	r0, #0
 8005f26:	f380 8814 	msr	CONTROL, r0
 8005f2a:	b662      	cpsie	i
 8005f2c:	b661      	cpsie	f
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	df00      	svc	0
 8005f38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f3a:	bf00      	nop
 8005f3c:	e000ed08 	.word	0xe000ed08

08005f40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005f46:	4b46      	ldr	r3, [pc, #280]	; (8006060 <xPortStartScheduler+0x120>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a46      	ldr	r2, [pc, #280]	; (8006064 <xPortStartScheduler+0x124>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d10a      	bne.n	8005f66 <xPortStartScheduler+0x26>
	__asm volatile
 8005f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	613b      	str	r3, [r7, #16]
}
 8005f62:	bf00      	nop
 8005f64:	e7fe      	b.n	8005f64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005f66:	4b3e      	ldr	r3, [pc, #248]	; (8006060 <xPortStartScheduler+0x120>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a3f      	ldr	r2, [pc, #252]	; (8006068 <xPortStartScheduler+0x128>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d10a      	bne.n	8005f86 <xPortStartScheduler+0x46>
	__asm volatile
 8005f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f74:	f383 8811 	msr	BASEPRI, r3
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	60fb      	str	r3, [r7, #12]
}
 8005f82:	bf00      	nop
 8005f84:	e7fe      	b.n	8005f84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f86:	4b39      	ldr	r3, [pc, #228]	; (800606c <xPortStartScheduler+0x12c>)
 8005f88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	22ff      	movs	r2, #255	; 0xff
 8005f96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005fa0:	78fb      	ldrb	r3, [r7, #3]
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	4b31      	ldr	r3, [pc, #196]	; (8006070 <xPortStartScheduler+0x130>)
 8005fac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005fae:	4b31      	ldr	r3, [pc, #196]	; (8006074 <xPortStartScheduler+0x134>)
 8005fb0:	2207      	movs	r2, #7
 8005fb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fb4:	e009      	b.n	8005fca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005fb6:	4b2f      	ldr	r3, [pc, #188]	; (8006074 <xPortStartScheduler+0x134>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	4a2d      	ldr	r2, [pc, #180]	; (8006074 <xPortStartScheduler+0x134>)
 8005fbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005fc0:	78fb      	ldrb	r3, [r7, #3]
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	005b      	lsls	r3, r3, #1
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fca:	78fb      	ldrb	r3, [r7, #3]
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd2:	2b80      	cmp	r3, #128	; 0x80
 8005fd4:	d0ef      	beq.n	8005fb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005fd6:	4b27      	ldr	r3, [pc, #156]	; (8006074 <xPortStartScheduler+0x134>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f1c3 0307 	rsb	r3, r3, #7
 8005fde:	2b04      	cmp	r3, #4
 8005fe0:	d00a      	beq.n	8005ff8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe6:	f383 8811 	msr	BASEPRI, r3
 8005fea:	f3bf 8f6f 	isb	sy
 8005fee:	f3bf 8f4f 	dsb	sy
 8005ff2:	60bb      	str	r3, [r7, #8]
}
 8005ff4:	bf00      	nop
 8005ff6:	e7fe      	b.n	8005ff6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ff8:	4b1e      	ldr	r3, [pc, #120]	; (8006074 <xPortStartScheduler+0x134>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	021b      	lsls	r3, r3, #8
 8005ffe:	4a1d      	ldr	r2, [pc, #116]	; (8006074 <xPortStartScheduler+0x134>)
 8006000:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006002:	4b1c      	ldr	r3, [pc, #112]	; (8006074 <xPortStartScheduler+0x134>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800600a:	4a1a      	ldr	r2, [pc, #104]	; (8006074 <xPortStartScheduler+0x134>)
 800600c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	b2da      	uxtb	r2, r3
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006016:	4b18      	ldr	r3, [pc, #96]	; (8006078 <xPortStartScheduler+0x138>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a17      	ldr	r2, [pc, #92]	; (8006078 <xPortStartScheduler+0x138>)
 800601c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006020:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006022:	4b15      	ldr	r3, [pc, #84]	; (8006078 <xPortStartScheduler+0x138>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a14      	ldr	r2, [pc, #80]	; (8006078 <xPortStartScheduler+0x138>)
 8006028:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800602c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800602e:	f000 f8dd 	bl	80061ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006032:	4b12      	ldr	r3, [pc, #72]	; (800607c <xPortStartScheduler+0x13c>)
 8006034:	2200      	movs	r2, #0
 8006036:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006038:	f000 f8fc 	bl	8006234 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800603c:	4b10      	ldr	r3, [pc, #64]	; (8006080 <xPortStartScheduler+0x140>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a0f      	ldr	r2, [pc, #60]	; (8006080 <xPortStartScheduler+0x140>)
 8006042:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006046:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006048:	f7ff ff66 	bl	8005f18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800604c:	f7ff fd4a 	bl	8005ae4 <vTaskSwitchContext>
	prvTaskExitError();
 8006050:	f7ff ff1e 	bl	8005e90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3718      	adds	r7, #24
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	e000ed00 	.word	0xe000ed00
 8006064:	410fc271 	.word	0x410fc271
 8006068:	410fc270 	.word	0x410fc270
 800606c:	e000e400 	.word	0xe000e400
 8006070:	200007c8 	.word	0x200007c8
 8006074:	200007cc 	.word	0x200007cc
 8006078:	e000ed20 	.word	0xe000ed20
 800607c:	2000000c 	.word	0x2000000c
 8006080:	e000ef34 	.word	0xe000ef34

08006084 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
	__asm volatile
 800608a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608e:	f383 8811 	msr	BASEPRI, r3
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	f3bf 8f4f 	dsb	sy
 800609a:	607b      	str	r3, [r7, #4]
}
 800609c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800609e:	4b0f      	ldr	r3, [pc, #60]	; (80060dc <vPortEnterCritical+0x58>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3301      	adds	r3, #1
 80060a4:	4a0d      	ldr	r2, [pc, #52]	; (80060dc <vPortEnterCritical+0x58>)
 80060a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80060a8:	4b0c      	ldr	r3, [pc, #48]	; (80060dc <vPortEnterCritical+0x58>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d10f      	bne.n	80060d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80060b0:	4b0b      	ldr	r3, [pc, #44]	; (80060e0 <vPortEnterCritical+0x5c>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00a      	beq.n	80060d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80060ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060be:	f383 8811 	msr	BASEPRI, r3
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	f3bf 8f4f 	dsb	sy
 80060ca:	603b      	str	r3, [r7, #0]
}
 80060cc:	bf00      	nop
 80060ce:	e7fe      	b.n	80060ce <vPortEnterCritical+0x4a>
	}
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr
 80060dc:	2000000c 	.word	0x2000000c
 80060e0:	e000ed04 	.word	0xe000ed04

080060e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80060ea:	4b12      	ldr	r3, [pc, #72]	; (8006134 <vPortExitCritical+0x50>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10a      	bne.n	8006108 <vPortExitCritical+0x24>
	__asm volatile
 80060f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f6:	f383 8811 	msr	BASEPRI, r3
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	607b      	str	r3, [r7, #4]
}
 8006104:	bf00      	nop
 8006106:	e7fe      	b.n	8006106 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006108:	4b0a      	ldr	r3, [pc, #40]	; (8006134 <vPortExitCritical+0x50>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	3b01      	subs	r3, #1
 800610e:	4a09      	ldr	r2, [pc, #36]	; (8006134 <vPortExitCritical+0x50>)
 8006110:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006112:	4b08      	ldr	r3, [pc, #32]	; (8006134 <vPortExitCritical+0x50>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d105      	bne.n	8006126 <vPortExitCritical+0x42>
 800611a:	2300      	movs	r3, #0
 800611c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006124:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006126:	bf00      	nop
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	2000000c 	.word	0x2000000c
	...

08006140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006140:	f3ef 8009 	mrs	r0, PSP
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	4b15      	ldr	r3, [pc, #84]	; (80061a0 <pxCurrentTCBConst>)
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	f01e 0f10 	tst.w	lr, #16
 8006150:	bf08      	it	eq
 8006152:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006156:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800615a:	6010      	str	r0, [r2, #0]
 800615c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006160:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006164:	f380 8811 	msr	BASEPRI, r0
 8006168:	f3bf 8f4f 	dsb	sy
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f7ff fcb8 	bl	8005ae4 <vTaskSwitchContext>
 8006174:	f04f 0000 	mov.w	r0, #0
 8006178:	f380 8811 	msr	BASEPRI, r0
 800617c:	bc09      	pop	{r0, r3}
 800617e:	6819      	ldr	r1, [r3, #0]
 8006180:	6808      	ldr	r0, [r1, #0]
 8006182:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006186:	f01e 0f10 	tst.w	lr, #16
 800618a:	bf08      	it	eq
 800618c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006190:	f380 8809 	msr	PSP, r0
 8006194:	f3bf 8f6f 	isb	sy
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	f3af 8000 	nop.w

080061a0 <pxCurrentTCBConst>:
 80061a0:	2000069c 	.word	0x2000069c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80061a4:	bf00      	nop
 80061a6:	bf00      	nop

080061a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	607b      	str	r3, [r7, #4]
}
 80061c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80061c2:	f7ff fbd7 	bl	8005974 <xTaskIncrementTick>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d003      	beq.n	80061d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80061cc:	4b06      	ldr	r3, [pc, #24]	; (80061e8 <SysTick_Handler+0x40>)
 80061ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061d2:	601a      	str	r2, [r3, #0]
 80061d4:	2300      	movs	r3, #0
 80061d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	f383 8811 	msr	BASEPRI, r3
}
 80061de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80061e0:	bf00      	nop
 80061e2:	3708      	adds	r7, #8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	e000ed04 	.word	0xe000ed04

080061ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80061ec:	b480      	push	{r7}
 80061ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80061f0:	4b0b      	ldr	r3, [pc, #44]	; (8006220 <vPortSetupTimerInterrupt+0x34>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80061f6:	4b0b      	ldr	r3, [pc, #44]	; (8006224 <vPortSetupTimerInterrupt+0x38>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80061fc:	4b0a      	ldr	r3, [pc, #40]	; (8006228 <vPortSetupTimerInterrupt+0x3c>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a0a      	ldr	r2, [pc, #40]	; (800622c <vPortSetupTimerInterrupt+0x40>)
 8006202:	fba2 2303 	umull	r2, r3, r2, r3
 8006206:	099b      	lsrs	r3, r3, #6
 8006208:	4a09      	ldr	r2, [pc, #36]	; (8006230 <vPortSetupTimerInterrupt+0x44>)
 800620a:	3b01      	subs	r3, #1
 800620c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800620e:	4b04      	ldr	r3, [pc, #16]	; (8006220 <vPortSetupTimerInterrupt+0x34>)
 8006210:	2207      	movs	r2, #7
 8006212:	601a      	str	r2, [r3, #0]
}
 8006214:	bf00      	nop
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	e000e010 	.word	0xe000e010
 8006224:	e000e018 	.word	0xe000e018
 8006228:	20000000 	.word	0x20000000
 800622c:	10624dd3 	.word	0x10624dd3
 8006230:	e000e014 	.word	0xe000e014

08006234 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006234:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006244 <vPortEnableVFP+0x10>
 8006238:	6801      	ldr	r1, [r0, #0]
 800623a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800623e:	6001      	str	r1, [r0, #0]
 8006240:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006242:	bf00      	nop
 8006244:	e000ed88 	.word	0xe000ed88

08006248 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b08a      	sub	sp, #40	; 0x28
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006250:	2300      	movs	r3, #0
 8006252:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006254:	f7ff fae4 	bl	8005820 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006258:	4b5b      	ldr	r3, [pc, #364]	; (80063c8 <pvPortMalloc+0x180>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d101      	bne.n	8006264 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006260:	f000 f920 	bl	80064a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006264:	4b59      	ldr	r3, [pc, #356]	; (80063cc <pvPortMalloc+0x184>)
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4013      	ands	r3, r2
 800626c:	2b00      	cmp	r3, #0
 800626e:	f040 8093 	bne.w	8006398 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d01d      	beq.n	80062b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006278:	2208      	movs	r2, #8
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4413      	add	r3, r2
 800627e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f003 0307 	and.w	r3, r3, #7
 8006286:	2b00      	cmp	r3, #0
 8006288:	d014      	beq.n	80062b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f023 0307 	bic.w	r3, r3, #7
 8006290:	3308      	adds	r3, #8
 8006292:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f003 0307 	and.w	r3, r3, #7
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00a      	beq.n	80062b4 <pvPortMalloc+0x6c>
	__asm volatile
 800629e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a2:	f383 8811 	msr	BASEPRI, r3
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	617b      	str	r3, [r7, #20]
}
 80062b0:	bf00      	nop
 80062b2:	e7fe      	b.n	80062b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d06e      	beq.n	8006398 <pvPortMalloc+0x150>
 80062ba:	4b45      	ldr	r3, [pc, #276]	; (80063d0 <pvPortMalloc+0x188>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d869      	bhi.n	8006398 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80062c4:	4b43      	ldr	r3, [pc, #268]	; (80063d4 <pvPortMalloc+0x18c>)
 80062c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80062c8:	4b42      	ldr	r3, [pc, #264]	; (80063d4 <pvPortMalloc+0x18c>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062ce:	e004      	b.n	80062da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80062d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d903      	bls.n	80062ec <pvPortMalloc+0xa4>
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1f1      	bne.n	80062d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80062ec:	4b36      	ldr	r3, [pc, #216]	; (80063c8 <pvPortMalloc+0x180>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d050      	beq.n	8006398 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80062f6:	6a3b      	ldr	r3, [r7, #32]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2208      	movs	r2, #8
 80062fc:	4413      	add	r3, r2
 80062fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	1ad2      	subs	r2, r2, r3
 8006310:	2308      	movs	r3, #8
 8006312:	005b      	lsls	r3, r3, #1
 8006314:	429a      	cmp	r2, r3
 8006316:	d91f      	bls.n	8006358 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4413      	add	r3, r2
 800631e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	f003 0307 	and.w	r3, r3, #7
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00a      	beq.n	8006340 <pvPortMalloc+0xf8>
	__asm volatile
 800632a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632e:	f383 8811 	msr	BASEPRI, r3
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	613b      	str	r3, [r7, #16]
}
 800633c:	bf00      	nop
 800633e:	e7fe      	b.n	800633e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006342:	685a      	ldr	r2, [r3, #4]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	1ad2      	subs	r2, r2, r3
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800634c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006352:	69b8      	ldr	r0, [r7, #24]
 8006354:	f000 f908 	bl	8006568 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006358:	4b1d      	ldr	r3, [pc, #116]	; (80063d0 <pvPortMalloc+0x188>)
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	4a1b      	ldr	r2, [pc, #108]	; (80063d0 <pvPortMalloc+0x188>)
 8006364:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006366:	4b1a      	ldr	r3, [pc, #104]	; (80063d0 <pvPortMalloc+0x188>)
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	4b1b      	ldr	r3, [pc, #108]	; (80063d8 <pvPortMalloc+0x190>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	429a      	cmp	r2, r3
 8006370:	d203      	bcs.n	800637a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006372:	4b17      	ldr	r3, [pc, #92]	; (80063d0 <pvPortMalloc+0x188>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a18      	ldr	r2, [pc, #96]	; (80063d8 <pvPortMalloc+0x190>)
 8006378:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800637a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	4b13      	ldr	r3, [pc, #76]	; (80063cc <pvPortMalloc+0x184>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	431a      	orrs	r2, r3
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638a:	2200      	movs	r2, #0
 800638c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800638e:	4b13      	ldr	r3, [pc, #76]	; (80063dc <pvPortMalloc+0x194>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	3301      	adds	r3, #1
 8006394:	4a11      	ldr	r2, [pc, #68]	; (80063dc <pvPortMalloc+0x194>)
 8006396:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006398:	f7ff fa50 	bl	800583c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	f003 0307 	and.w	r3, r3, #7
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00a      	beq.n	80063bc <pvPortMalloc+0x174>
	__asm volatile
 80063a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063aa:	f383 8811 	msr	BASEPRI, r3
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	60fb      	str	r3, [r7, #12]
}
 80063b8:	bf00      	nop
 80063ba:	e7fe      	b.n	80063ba <pvPortMalloc+0x172>
	return pvReturn;
 80063bc:	69fb      	ldr	r3, [r7, #28]
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3728      	adds	r7, #40	; 0x28
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	200047d8 	.word	0x200047d8
 80063cc:	200047ec 	.word	0x200047ec
 80063d0:	200047dc 	.word	0x200047dc
 80063d4:	200047d0 	.word	0x200047d0
 80063d8:	200047e0 	.word	0x200047e0
 80063dc:	200047e4 	.word	0x200047e4

080063e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d04d      	beq.n	800648e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80063f2:	2308      	movs	r3, #8
 80063f4:	425b      	negs	r3, r3
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	4413      	add	r3, r2
 80063fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	4b24      	ldr	r3, [pc, #144]	; (8006498 <vPortFree+0xb8>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4013      	ands	r3, r2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10a      	bne.n	8006424 <vPortFree+0x44>
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	60fb      	str	r3, [r7, #12]
}
 8006420:	bf00      	nop
 8006422:	e7fe      	b.n	8006422 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00a      	beq.n	8006442 <vPortFree+0x62>
	__asm volatile
 800642c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006430:	f383 8811 	msr	BASEPRI, r3
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	60bb      	str	r3, [r7, #8]
}
 800643e:	bf00      	nop
 8006440:	e7fe      	b.n	8006440 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	685a      	ldr	r2, [r3, #4]
 8006446:	4b14      	ldr	r3, [pc, #80]	; (8006498 <vPortFree+0xb8>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4013      	ands	r3, r2
 800644c:	2b00      	cmp	r3, #0
 800644e:	d01e      	beq.n	800648e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d11a      	bne.n	800648e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	4b0e      	ldr	r3, [pc, #56]	; (8006498 <vPortFree+0xb8>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	43db      	mvns	r3, r3
 8006462:	401a      	ands	r2, r3
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006468:	f7ff f9da 	bl	8005820 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	4b0a      	ldr	r3, [pc, #40]	; (800649c <vPortFree+0xbc>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4413      	add	r3, r2
 8006476:	4a09      	ldr	r2, [pc, #36]	; (800649c <vPortFree+0xbc>)
 8006478:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800647a:	6938      	ldr	r0, [r7, #16]
 800647c:	f000 f874 	bl	8006568 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006480:	4b07      	ldr	r3, [pc, #28]	; (80064a0 <vPortFree+0xc0>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	3301      	adds	r3, #1
 8006486:	4a06      	ldr	r2, [pc, #24]	; (80064a0 <vPortFree+0xc0>)
 8006488:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800648a:	f7ff f9d7 	bl	800583c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800648e:	bf00      	nop
 8006490:	3718      	adds	r7, #24
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	200047ec 	.word	0x200047ec
 800649c:	200047dc 	.word	0x200047dc
 80064a0:	200047e8 	.word	0x200047e8

080064a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80064aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80064ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80064b0:	4b27      	ldr	r3, [pc, #156]	; (8006550 <prvHeapInit+0xac>)
 80064b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f003 0307 	and.w	r3, r3, #7
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00c      	beq.n	80064d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	3307      	adds	r3, #7
 80064c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f023 0307 	bic.w	r3, r3, #7
 80064ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	4a1f      	ldr	r2, [pc, #124]	; (8006550 <prvHeapInit+0xac>)
 80064d4:	4413      	add	r3, r2
 80064d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80064dc:	4a1d      	ldr	r2, [pc, #116]	; (8006554 <prvHeapInit+0xb0>)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80064e2:	4b1c      	ldr	r3, [pc, #112]	; (8006554 <prvHeapInit+0xb0>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	4413      	add	r3, r2
 80064ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80064f0:	2208      	movs	r2, #8
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	1a9b      	subs	r3, r3, r2
 80064f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f023 0307 	bic.w	r3, r3, #7
 80064fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	4a15      	ldr	r2, [pc, #84]	; (8006558 <prvHeapInit+0xb4>)
 8006504:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006506:	4b14      	ldr	r3, [pc, #80]	; (8006558 <prvHeapInit+0xb4>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2200      	movs	r2, #0
 800650c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800650e:	4b12      	ldr	r3, [pc, #72]	; (8006558 <prvHeapInit+0xb4>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2200      	movs	r2, #0
 8006514:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	1ad2      	subs	r2, r2, r3
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006524:	4b0c      	ldr	r3, [pc, #48]	; (8006558 <prvHeapInit+0xb4>)
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	4a0a      	ldr	r2, [pc, #40]	; (800655c <prvHeapInit+0xb8>)
 8006532:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	4a09      	ldr	r2, [pc, #36]	; (8006560 <prvHeapInit+0xbc>)
 800653a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800653c:	4b09      	ldr	r3, [pc, #36]	; (8006564 <prvHeapInit+0xc0>)
 800653e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006542:	601a      	str	r2, [r3, #0]
}
 8006544:	bf00      	nop
 8006546:	3714      	adds	r7, #20
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr
 8006550:	200007d0 	.word	0x200007d0
 8006554:	200047d0 	.word	0x200047d0
 8006558:	200047d8 	.word	0x200047d8
 800655c:	200047e0 	.word	0x200047e0
 8006560:	200047dc 	.word	0x200047dc
 8006564:	200047ec 	.word	0x200047ec

08006568 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006570:	4b28      	ldr	r3, [pc, #160]	; (8006614 <prvInsertBlockIntoFreeList+0xac>)
 8006572:	60fb      	str	r3, [r7, #12]
 8006574:	e002      	b.n	800657c <prvInsertBlockIntoFreeList+0x14>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	60fb      	str	r3, [r7, #12]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	429a      	cmp	r2, r3
 8006584:	d8f7      	bhi.n	8006576 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	4413      	add	r3, r2
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	429a      	cmp	r2, r3
 8006596:	d108      	bne.n	80065aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	441a      	add	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	441a      	add	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d118      	bne.n	80065f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	4b15      	ldr	r3, [pc, #84]	; (8006618 <prvInsertBlockIntoFreeList+0xb0>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d00d      	beq.n	80065e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685a      	ldr	r2, [r3, #4]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	441a      	add	r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	601a      	str	r2, [r3, #0]
 80065e4:	e008      	b.n	80065f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80065e6:	4b0c      	ldr	r3, [pc, #48]	; (8006618 <prvInsertBlockIntoFreeList+0xb0>)
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	e003      	b.n	80065f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d002      	beq.n	8006606 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006606:	bf00      	nop
 8006608:	3714      	adds	r7, #20
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	200047d0 	.word	0x200047d0
 8006618:	200047d8 	.word	0x200047d8

0800661c <__errno>:
 800661c:	4b01      	ldr	r3, [pc, #4]	; (8006624 <__errno+0x8>)
 800661e:	6818      	ldr	r0, [r3, #0]
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	20000010 	.word	0x20000010

08006628 <std>:
 8006628:	2300      	movs	r3, #0
 800662a:	b510      	push	{r4, lr}
 800662c:	4604      	mov	r4, r0
 800662e:	e9c0 3300 	strd	r3, r3, [r0]
 8006632:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006636:	6083      	str	r3, [r0, #8]
 8006638:	8181      	strh	r1, [r0, #12]
 800663a:	6643      	str	r3, [r0, #100]	; 0x64
 800663c:	81c2      	strh	r2, [r0, #14]
 800663e:	6183      	str	r3, [r0, #24]
 8006640:	4619      	mov	r1, r3
 8006642:	2208      	movs	r2, #8
 8006644:	305c      	adds	r0, #92	; 0x5c
 8006646:	f000 f923 	bl	8006890 <memset>
 800664a:	4b05      	ldr	r3, [pc, #20]	; (8006660 <std+0x38>)
 800664c:	6263      	str	r3, [r4, #36]	; 0x24
 800664e:	4b05      	ldr	r3, [pc, #20]	; (8006664 <std+0x3c>)
 8006650:	62a3      	str	r3, [r4, #40]	; 0x28
 8006652:	4b05      	ldr	r3, [pc, #20]	; (8006668 <std+0x40>)
 8006654:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006656:	4b05      	ldr	r3, [pc, #20]	; (800666c <std+0x44>)
 8006658:	6224      	str	r4, [r4, #32]
 800665a:	6323      	str	r3, [r4, #48]	; 0x30
 800665c:	bd10      	pop	{r4, pc}
 800665e:	bf00      	nop
 8006660:	08007895 	.word	0x08007895
 8006664:	080078b7 	.word	0x080078b7
 8006668:	080078ef 	.word	0x080078ef
 800666c:	08007913 	.word	0x08007913

08006670 <_cleanup_r>:
 8006670:	4901      	ldr	r1, [pc, #4]	; (8006678 <_cleanup_r+0x8>)
 8006672:	f000 b8af 	b.w	80067d4 <_fwalk_reent>
 8006676:	bf00      	nop
 8006678:	080094e9 	.word	0x080094e9

0800667c <__sfmoreglue>:
 800667c:	b570      	push	{r4, r5, r6, lr}
 800667e:	2268      	movs	r2, #104	; 0x68
 8006680:	1e4d      	subs	r5, r1, #1
 8006682:	4355      	muls	r5, r2
 8006684:	460e      	mov	r6, r1
 8006686:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800668a:	f000 f975 	bl	8006978 <_malloc_r>
 800668e:	4604      	mov	r4, r0
 8006690:	b140      	cbz	r0, 80066a4 <__sfmoreglue+0x28>
 8006692:	2100      	movs	r1, #0
 8006694:	e9c0 1600 	strd	r1, r6, [r0]
 8006698:	300c      	adds	r0, #12
 800669a:	60a0      	str	r0, [r4, #8]
 800669c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80066a0:	f000 f8f6 	bl	8006890 <memset>
 80066a4:	4620      	mov	r0, r4
 80066a6:	bd70      	pop	{r4, r5, r6, pc}

080066a8 <__sfp_lock_acquire>:
 80066a8:	4801      	ldr	r0, [pc, #4]	; (80066b0 <__sfp_lock_acquire+0x8>)
 80066aa:	f000 b8d8 	b.w	800685e <__retarget_lock_acquire_recursive>
 80066ae:	bf00      	nop
 80066b0:	200047f1 	.word	0x200047f1

080066b4 <__sfp_lock_release>:
 80066b4:	4801      	ldr	r0, [pc, #4]	; (80066bc <__sfp_lock_release+0x8>)
 80066b6:	f000 b8d3 	b.w	8006860 <__retarget_lock_release_recursive>
 80066ba:	bf00      	nop
 80066bc:	200047f1 	.word	0x200047f1

080066c0 <__sinit_lock_acquire>:
 80066c0:	4801      	ldr	r0, [pc, #4]	; (80066c8 <__sinit_lock_acquire+0x8>)
 80066c2:	f000 b8cc 	b.w	800685e <__retarget_lock_acquire_recursive>
 80066c6:	bf00      	nop
 80066c8:	200047f2 	.word	0x200047f2

080066cc <__sinit_lock_release>:
 80066cc:	4801      	ldr	r0, [pc, #4]	; (80066d4 <__sinit_lock_release+0x8>)
 80066ce:	f000 b8c7 	b.w	8006860 <__retarget_lock_release_recursive>
 80066d2:	bf00      	nop
 80066d4:	200047f2 	.word	0x200047f2

080066d8 <__sinit>:
 80066d8:	b510      	push	{r4, lr}
 80066da:	4604      	mov	r4, r0
 80066dc:	f7ff fff0 	bl	80066c0 <__sinit_lock_acquire>
 80066e0:	69a3      	ldr	r3, [r4, #24]
 80066e2:	b11b      	cbz	r3, 80066ec <__sinit+0x14>
 80066e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066e8:	f7ff bff0 	b.w	80066cc <__sinit_lock_release>
 80066ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80066f0:	6523      	str	r3, [r4, #80]	; 0x50
 80066f2:	4b13      	ldr	r3, [pc, #76]	; (8006740 <__sinit+0x68>)
 80066f4:	4a13      	ldr	r2, [pc, #76]	; (8006744 <__sinit+0x6c>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80066fa:	42a3      	cmp	r3, r4
 80066fc:	bf04      	itt	eq
 80066fe:	2301      	moveq	r3, #1
 8006700:	61a3      	streq	r3, [r4, #24]
 8006702:	4620      	mov	r0, r4
 8006704:	f000 f820 	bl	8006748 <__sfp>
 8006708:	6060      	str	r0, [r4, #4]
 800670a:	4620      	mov	r0, r4
 800670c:	f000 f81c 	bl	8006748 <__sfp>
 8006710:	60a0      	str	r0, [r4, #8]
 8006712:	4620      	mov	r0, r4
 8006714:	f000 f818 	bl	8006748 <__sfp>
 8006718:	2200      	movs	r2, #0
 800671a:	60e0      	str	r0, [r4, #12]
 800671c:	2104      	movs	r1, #4
 800671e:	6860      	ldr	r0, [r4, #4]
 8006720:	f7ff ff82 	bl	8006628 <std>
 8006724:	68a0      	ldr	r0, [r4, #8]
 8006726:	2201      	movs	r2, #1
 8006728:	2109      	movs	r1, #9
 800672a:	f7ff ff7d 	bl	8006628 <std>
 800672e:	68e0      	ldr	r0, [r4, #12]
 8006730:	2202      	movs	r2, #2
 8006732:	2112      	movs	r1, #18
 8006734:	f7ff ff78 	bl	8006628 <std>
 8006738:	2301      	movs	r3, #1
 800673a:	61a3      	str	r3, [r4, #24]
 800673c:	e7d2      	b.n	80066e4 <__sinit+0xc>
 800673e:	bf00      	nop
 8006740:	0800b240 	.word	0x0800b240
 8006744:	08006671 	.word	0x08006671

08006748 <__sfp>:
 8006748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674a:	4607      	mov	r7, r0
 800674c:	f7ff ffac 	bl	80066a8 <__sfp_lock_acquire>
 8006750:	4b1e      	ldr	r3, [pc, #120]	; (80067cc <__sfp+0x84>)
 8006752:	681e      	ldr	r6, [r3, #0]
 8006754:	69b3      	ldr	r3, [r6, #24]
 8006756:	b913      	cbnz	r3, 800675e <__sfp+0x16>
 8006758:	4630      	mov	r0, r6
 800675a:	f7ff ffbd 	bl	80066d8 <__sinit>
 800675e:	3648      	adds	r6, #72	; 0x48
 8006760:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006764:	3b01      	subs	r3, #1
 8006766:	d503      	bpl.n	8006770 <__sfp+0x28>
 8006768:	6833      	ldr	r3, [r6, #0]
 800676a:	b30b      	cbz	r3, 80067b0 <__sfp+0x68>
 800676c:	6836      	ldr	r6, [r6, #0]
 800676e:	e7f7      	b.n	8006760 <__sfp+0x18>
 8006770:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006774:	b9d5      	cbnz	r5, 80067ac <__sfp+0x64>
 8006776:	4b16      	ldr	r3, [pc, #88]	; (80067d0 <__sfp+0x88>)
 8006778:	60e3      	str	r3, [r4, #12]
 800677a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800677e:	6665      	str	r5, [r4, #100]	; 0x64
 8006780:	f000 f86c 	bl	800685c <__retarget_lock_init_recursive>
 8006784:	f7ff ff96 	bl	80066b4 <__sfp_lock_release>
 8006788:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800678c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006790:	6025      	str	r5, [r4, #0]
 8006792:	61a5      	str	r5, [r4, #24]
 8006794:	2208      	movs	r2, #8
 8006796:	4629      	mov	r1, r5
 8006798:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800679c:	f000 f878 	bl	8006890 <memset>
 80067a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80067a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80067a8:	4620      	mov	r0, r4
 80067aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067ac:	3468      	adds	r4, #104	; 0x68
 80067ae:	e7d9      	b.n	8006764 <__sfp+0x1c>
 80067b0:	2104      	movs	r1, #4
 80067b2:	4638      	mov	r0, r7
 80067b4:	f7ff ff62 	bl	800667c <__sfmoreglue>
 80067b8:	4604      	mov	r4, r0
 80067ba:	6030      	str	r0, [r6, #0]
 80067bc:	2800      	cmp	r0, #0
 80067be:	d1d5      	bne.n	800676c <__sfp+0x24>
 80067c0:	f7ff ff78 	bl	80066b4 <__sfp_lock_release>
 80067c4:	230c      	movs	r3, #12
 80067c6:	603b      	str	r3, [r7, #0]
 80067c8:	e7ee      	b.n	80067a8 <__sfp+0x60>
 80067ca:	bf00      	nop
 80067cc:	0800b240 	.word	0x0800b240
 80067d0:	ffff0001 	.word	0xffff0001

080067d4 <_fwalk_reent>:
 80067d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067d8:	4606      	mov	r6, r0
 80067da:	4688      	mov	r8, r1
 80067dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80067e0:	2700      	movs	r7, #0
 80067e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80067e6:	f1b9 0901 	subs.w	r9, r9, #1
 80067ea:	d505      	bpl.n	80067f8 <_fwalk_reent+0x24>
 80067ec:	6824      	ldr	r4, [r4, #0]
 80067ee:	2c00      	cmp	r4, #0
 80067f0:	d1f7      	bne.n	80067e2 <_fwalk_reent+0xe>
 80067f2:	4638      	mov	r0, r7
 80067f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067f8:	89ab      	ldrh	r3, [r5, #12]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d907      	bls.n	800680e <_fwalk_reent+0x3a>
 80067fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006802:	3301      	adds	r3, #1
 8006804:	d003      	beq.n	800680e <_fwalk_reent+0x3a>
 8006806:	4629      	mov	r1, r5
 8006808:	4630      	mov	r0, r6
 800680a:	47c0      	blx	r8
 800680c:	4307      	orrs	r7, r0
 800680e:	3568      	adds	r5, #104	; 0x68
 8006810:	e7e9      	b.n	80067e6 <_fwalk_reent+0x12>
	...

08006814 <__libc_init_array>:
 8006814:	b570      	push	{r4, r5, r6, lr}
 8006816:	4d0d      	ldr	r5, [pc, #52]	; (800684c <__libc_init_array+0x38>)
 8006818:	4c0d      	ldr	r4, [pc, #52]	; (8006850 <__libc_init_array+0x3c>)
 800681a:	1b64      	subs	r4, r4, r5
 800681c:	10a4      	asrs	r4, r4, #2
 800681e:	2600      	movs	r6, #0
 8006820:	42a6      	cmp	r6, r4
 8006822:	d109      	bne.n	8006838 <__libc_init_array+0x24>
 8006824:	4d0b      	ldr	r5, [pc, #44]	; (8006854 <__libc_init_array+0x40>)
 8006826:	4c0c      	ldr	r4, [pc, #48]	; (8006858 <__libc_init_array+0x44>)
 8006828:	f004 fc04 	bl	800b034 <_init>
 800682c:	1b64      	subs	r4, r4, r5
 800682e:	10a4      	asrs	r4, r4, #2
 8006830:	2600      	movs	r6, #0
 8006832:	42a6      	cmp	r6, r4
 8006834:	d105      	bne.n	8006842 <__libc_init_array+0x2e>
 8006836:	bd70      	pop	{r4, r5, r6, pc}
 8006838:	f855 3b04 	ldr.w	r3, [r5], #4
 800683c:	4798      	blx	r3
 800683e:	3601      	adds	r6, #1
 8006840:	e7ee      	b.n	8006820 <__libc_init_array+0xc>
 8006842:	f855 3b04 	ldr.w	r3, [r5], #4
 8006846:	4798      	blx	r3
 8006848:	3601      	adds	r6, #1
 800684a:	e7f2      	b.n	8006832 <__libc_init_array+0x1e>
 800684c:	0800b68c 	.word	0x0800b68c
 8006850:	0800b68c 	.word	0x0800b68c
 8006854:	0800b68c 	.word	0x0800b68c
 8006858:	0800b690 	.word	0x0800b690

0800685c <__retarget_lock_init_recursive>:
 800685c:	4770      	bx	lr

0800685e <__retarget_lock_acquire_recursive>:
 800685e:	4770      	bx	lr

08006860 <__retarget_lock_release_recursive>:
 8006860:	4770      	bx	lr
	...

08006864 <malloc>:
 8006864:	4b02      	ldr	r3, [pc, #8]	; (8006870 <malloc+0xc>)
 8006866:	4601      	mov	r1, r0
 8006868:	6818      	ldr	r0, [r3, #0]
 800686a:	f000 b885 	b.w	8006978 <_malloc_r>
 800686e:	bf00      	nop
 8006870:	20000010 	.word	0x20000010

08006874 <memcpy>:
 8006874:	440a      	add	r2, r1
 8006876:	4291      	cmp	r1, r2
 8006878:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800687c:	d100      	bne.n	8006880 <memcpy+0xc>
 800687e:	4770      	bx	lr
 8006880:	b510      	push	{r4, lr}
 8006882:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006886:	f803 4f01 	strb.w	r4, [r3, #1]!
 800688a:	4291      	cmp	r1, r2
 800688c:	d1f9      	bne.n	8006882 <memcpy+0xe>
 800688e:	bd10      	pop	{r4, pc}

08006890 <memset>:
 8006890:	4402      	add	r2, r0
 8006892:	4603      	mov	r3, r0
 8006894:	4293      	cmp	r3, r2
 8006896:	d100      	bne.n	800689a <memset+0xa>
 8006898:	4770      	bx	lr
 800689a:	f803 1b01 	strb.w	r1, [r3], #1
 800689e:	e7f9      	b.n	8006894 <memset+0x4>

080068a0 <_free_r>:
 80068a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068a2:	2900      	cmp	r1, #0
 80068a4:	d044      	beq.n	8006930 <_free_r+0x90>
 80068a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068aa:	9001      	str	r0, [sp, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f1a1 0404 	sub.w	r4, r1, #4
 80068b2:	bfb8      	it	lt
 80068b4:	18e4      	addlt	r4, r4, r3
 80068b6:	f003 f9eb 	bl	8009c90 <__malloc_lock>
 80068ba:	4a1e      	ldr	r2, [pc, #120]	; (8006934 <_free_r+0x94>)
 80068bc:	9801      	ldr	r0, [sp, #4]
 80068be:	6813      	ldr	r3, [r2, #0]
 80068c0:	b933      	cbnz	r3, 80068d0 <_free_r+0x30>
 80068c2:	6063      	str	r3, [r4, #4]
 80068c4:	6014      	str	r4, [r2, #0]
 80068c6:	b003      	add	sp, #12
 80068c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068cc:	f003 b9e6 	b.w	8009c9c <__malloc_unlock>
 80068d0:	42a3      	cmp	r3, r4
 80068d2:	d908      	bls.n	80068e6 <_free_r+0x46>
 80068d4:	6825      	ldr	r5, [r4, #0]
 80068d6:	1961      	adds	r1, r4, r5
 80068d8:	428b      	cmp	r3, r1
 80068da:	bf01      	itttt	eq
 80068dc:	6819      	ldreq	r1, [r3, #0]
 80068de:	685b      	ldreq	r3, [r3, #4]
 80068e0:	1949      	addeq	r1, r1, r5
 80068e2:	6021      	streq	r1, [r4, #0]
 80068e4:	e7ed      	b.n	80068c2 <_free_r+0x22>
 80068e6:	461a      	mov	r2, r3
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	b10b      	cbz	r3, 80068f0 <_free_r+0x50>
 80068ec:	42a3      	cmp	r3, r4
 80068ee:	d9fa      	bls.n	80068e6 <_free_r+0x46>
 80068f0:	6811      	ldr	r1, [r2, #0]
 80068f2:	1855      	adds	r5, r2, r1
 80068f4:	42a5      	cmp	r5, r4
 80068f6:	d10b      	bne.n	8006910 <_free_r+0x70>
 80068f8:	6824      	ldr	r4, [r4, #0]
 80068fa:	4421      	add	r1, r4
 80068fc:	1854      	adds	r4, r2, r1
 80068fe:	42a3      	cmp	r3, r4
 8006900:	6011      	str	r1, [r2, #0]
 8006902:	d1e0      	bne.n	80068c6 <_free_r+0x26>
 8006904:	681c      	ldr	r4, [r3, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	6053      	str	r3, [r2, #4]
 800690a:	4421      	add	r1, r4
 800690c:	6011      	str	r1, [r2, #0]
 800690e:	e7da      	b.n	80068c6 <_free_r+0x26>
 8006910:	d902      	bls.n	8006918 <_free_r+0x78>
 8006912:	230c      	movs	r3, #12
 8006914:	6003      	str	r3, [r0, #0]
 8006916:	e7d6      	b.n	80068c6 <_free_r+0x26>
 8006918:	6825      	ldr	r5, [r4, #0]
 800691a:	1961      	adds	r1, r4, r5
 800691c:	428b      	cmp	r3, r1
 800691e:	bf04      	itt	eq
 8006920:	6819      	ldreq	r1, [r3, #0]
 8006922:	685b      	ldreq	r3, [r3, #4]
 8006924:	6063      	str	r3, [r4, #4]
 8006926:	bf04      	itt	eq
 8006928:	1949      	addeq	r1, r1, r5
 800692a:	6021      	streq	r1, [r4, #0]
 800692c:	6054      	str	r4, [r2, #4]
 800692e:	e7ca      	b.n	80068c6 <_free_r+0x26>
 8006930:	b003      	add	sp, #12
 8006932:	bd30      	pop	{r4, r5, pc}
 8006934:	200047f4 	.word	0x200047f4

08006938 <sbrk_aligned>:
 8006938:	b570      	push	{r4, r5, r6, lr}
 800693a:	4e0e      	ldr	r6, [pc, #56]	; (8006974 <sbrk_aligned+0x3c>)
 800693c:	460c      	mov	r4, r1
 800693e:	6831      	ldr	r1, [r6, #0]
 8006940:	4605      	mov	r5, r0
 8006942:	b911      	cbnz	r1, 800694a <sbrk_aligned+0x12>
 8006944:	f000 ff70 	bl	8007828 <_sbrk_r>
 8006948:	6030      	str	r0, [r6, #0]
 800694a:	4621      	mov	r1, r4
 800694c:	4628      	mov	r0, r5
 800694e:	f000 ff6b 	bl	8007828 <_sbrk_r>
 8006952:	1c43      	adds	r3, r0, #1
 8006954:	d00a      	beq.n	800696c <sbrk_aligned+0x34>
 8006956:	1cc4      	adds	r4, r0, #3
 8006958:	f024 0403 	bic.w	r4, r4, #3
 800695c:	42a0      	cmp	r0, r4
 800695e:	d007      	beq.n	8006970 <sbrk_aligned+0x38>
 8006960:	1a21      	subs	r1, r4, r0
 8006962:	4628      	mov	r0, r5
 8006964:	f000 ff60 	bl	8007828 <_sbrk_r>
 8006968:	3001      	adds	r0, #1
 800696a:	d101      	bne.n	8006970 <sbrk_aligned+0x38>
 800696c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006970:	4620      	mov	r0, r4
 8006972:	bd70      	pop	{r4, r5, r6, pc}
 8006974:	200047f8 	.word	0x200047f8

08006978 <_malloc_r>:
 8006978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800697c:	1ccd      	adds	r5, r1, #3
 800697e:	f025 0503 	bic.w	r5, r5, #3
 8006982:	3508      	adds	r5, #8
 8006984:	2d0c      	cmp	r5, #12
 8006986:	bf38      	it	cc
 8006988:	250c      	movcc	r5, #12
 800698a:	2d00      	cmp	r5, #0
 800698c:	4607      	mov	r7, r0
 800698e:	db01      	blt.n	8006994 <_malloc_r+0x1c>
 8006990:	42a9      	cmp	r1, r5
 8006992:	d905      	bls.n	80069a0 <_malloc_r+0x28>
 8006994:	230c      	movs	r3, #12
 8006996:	603b      	str	r3, [r7, #0]
 8006998:	2600      	movs	r6, #0
 800699a:	4630      	mov	r0, r6
 800699c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069a0:	4e2e      	ldr	r6, [pc, #184]	; (8006a5c <_malloc_r+0xe4>)
 80069a2:	f003 f975 	bl	8009c90 <__malloc_lock>
 80069a6:	6833      	ldr	r3, [r6, #0]
 80069a8:	461c      	mov	r4, r3
 80069aa:	bb34      	cbnz	r4, 80069fa <_malloc_r+0x82>
 80069ac:	4629      	mov	r1, r5
 80069ae:	4638      	mov	r0, r7
 80069b0:	f7ff ffc2 	bl	8006938 <sbrk_aligned>
 80069b4:	1c43      	adds	r3, r0, #1
 80069b6:	4604      	mov	r4, r0
 80069b8:	d14d      	bne.n	8006a56 <_malloc_r+0xde>
 80069ba:	6834      	ldr	r4, [r6, #0]
 80069bc:	4626      	mov	r6, r4
 80069be:	2e00      	cmp	r6, #0
 80069c0:	d140      	bne.n	8006a44 <_malloc_r+0xcc>
 80069c2:	6823      	ldr	r3, [r4, #0]
 80069c4:	4631      	mov	r1, r6
 80069c6:	4638      	mov	r0, r7
 80069c8:	eb04 0803 	add.w	r8, r4, r3
 80069cc:	f000 ff2c 	bl	8007828 <_sbrk_r>
 80069d0:	4580      	cmp	r8, r0
 80069d2:	d13a      	bne.n	8006a4a <_malloc_r+0xd2>
 80069d4:	6821      	ldr	r1, [r4, #0]
 80069d6:	3503      	adds	r5, #3
 80069d8:	1a6d      	subs	r5, r5, r1
 80069da:	f025 0503 	bic.w	r5, r5, #3
 80069de:	3508      	adds	r5, #8
 80069e0:	2d0c      	cmp	r5, #12
 80069e2:	bf38      	it	cc
 80069e4:	250c      	movcc	r5, #12
 80069e6:	4629      	mov	r1, r5
 80069e8:	4638      	mov	r0, r7
 80069ea:	f7ff ffa5 	bl	8006938 <sbrk_aligned>
 80069ee:	3001      	adds	r0, #1
 80069f0:	d02b      	beq.n	8006a4a <_malloc_r+0xd2>
 80069f2:	6823      	ldr	r3, [r4, #0]
 80069f4:	442b      	add	r3, r5
 80069f6:	6023      	str	r3, [r4, #0]
 80069f8:	e00e      	b.n	8006a18 <_malloc_r+0xa0>
 80069fa:	6822      	ldr	r2, [r4, #0]
 80069fc:	1b52      	subs	r2, r2, r5
 80069fe:	d41e      	bmi.n	8006a3e <_malloc_r+0xc6>
 8006a00:	2a0b      	cmp	r2, #11
 8006a02:	d916      	bls.n	8006a32 <_malloc_r+0xba>
 8006a04:	1961      	adds	r1, r4, r5
 8006a06:	42a3      	cmp	r3, r4
 8006a08:	6025      	str	r5, [r4, #0]
 8006a0a:	bf18      	it	ne
 8006a0c:	6059      	strne	r1, [r3, #4]
 8006a0e:	6863      	ldr	r3, [r4, #4]
 8006a10:	bf08      	it	eq
 8006a12:	6031      	streq	r1, [r6, #0]
 8006a14:	5162      	str	r2, [r4, r5]
 8006a16:	604b      	str	r3, [r1, #4]
 8006a18:	4638      	mov	r0, r7
 8006a1a:	f104 060b 	add.w	r6, r4, #11
 8006a1e:	f003 f93d 	bl	8009c9c <__malloc_unlock>
 8006a22:	f026 0607 	bic.w	r6, r6, #7
 8006a26:	1d23      	adds	r3, r4, #4
 8006a28:	1af2      	subs	r2, r6, r3
 8006a2a:	d0b6      	beq.n	800699a <_malloc_r+0x22>
 8006a2c:	1b9b      	subs	r3, r3, r6
 8006a2e:	50a3      	str	r3, [r4, r2]
 8006a30:	e7b3      	b.n	800699a <_malloc_r+0x22>
 8006a32:	6862      	ldr	r2, [r4, #4]
 8006a34:	42a3      	cmp	r3, r4
 8006a36:	bf0c      	ite	eq
 8006a38:	6032      	streq	r2, [r6, #0]
 8006a3a:	605a      	strne	r2, [r3, #4]
 8006a3c:	e7ec      	b.n	8006a18 <_malloc_r+0xa0>
 8006a3e:	4623      	mov	r3, r4
 8006a40:	6864      	ldr	r4, [r4, #4]
 8006a42:	e7b2      	b.n	80069aa <_malloc_r+0x32>
 8006a44:	4634      	mov	r4, r6
 8006a46:	6876      	ldr	r6, [r6, #4]
 8006a48:	e7b9      	b.n	80069be <_malloc_r+0x46>
 8006a4a:	230c      	movs	r3, #12
 8006a4c:	603b      	str	r3, [r7, #0]
 8006a4e:	4638      	mov	r0, r7
 8006a50:	f003 f924 	bl	8009c9c <__malloc_unlock>
 8006a54:	e7a1      	b.n	800699a <_malloc_r+0x22>
 8006a56:	6025      	str	r5, [r4, #0]
 8006a58:	e7de      	b.n	8006a18 <_malloc_r+0xa0>
 8006a5a:	bf00      	nop
 8006a5c:	200047f4 	.word	0x200047f4

08006a60 <__cvt>:
 8006a60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a64:	ec55 4b10 	vmov	r4, r5, d0
 8006a68:	2d00      	cmp	r5, #0
 8006a6a:	460e      	mov	r6, r1
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	462b      	mov	r3, r5
 8006a70:	bfbb      	ittet	lt
 8006a72:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006a76:	461d      	movlt	r5, r3
 8006a78:	2300      	movge	r3, #0
 8006a7a:	232d      	movlt	r3, #45	; 0x2d
 8006a7c:	700b      	strb	r3, [r1, #0]
 8006a7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a80:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006a84:	4691      	mov	r9, r2
 8006a86:	f023 0820 	bic.w	r8, r3, #32
 8006a8a:	bfbc      	itt	lt
 8006a8c:	4622      	movlt	r2, r4
 8006a8e:	4614      	movlt	r4, r2
 8006a90:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a94:	d005      	beq.n	8006aa2 <__cvt+0x42>
 8006a96:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006a9a:	d100      	bne.n	8006a9e <__cvt+0x3e>
 8006a9c:	3601      	adds	r6, #1
 8006a9e:	2102      	movs	r1, #2
 8006aa0:	e000      	b.n	8006aa4 <__cvt+0x44>
 8006aa2:	2103      	movs	r1, #3
 8006aa4:	ab03      	add	r3, sp, #12
 8006aa6:	9301      	str	r3, [sp, #4]
 8006aa8:	ab02      	add	r3, sp, #8
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	ec45 4b10 	vmov	d0, r4, r5
 8006ab0:	4653      	mov	r3, sl
 8006ab2:	4632      	mov	r2, r6
 8006ab4:	f001 fea4 	bl	8008800 <_dtoa_r>
 8006ab8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006abc:	4607      	mov	r7, r0
 8006abe:	d102      	bne.n	8006ac6 <__cvt+0x66>
 8006ac0:	f019 0f01 	tst.w	r9, #1
 8006ac4:	d022      	beq.n	8006b0c <__cvt+0xac>
 8006ac6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006aca:	eb07 0906 	add.w	r9, r7, r6
 8006ace:	d110      	bne.n	8006af2 <__cvt+0x92>
 8006ad0:	783b      	ldrb	r3, [r7, #0]
 8006ad2:	2b30      	cmp	r3, #48	; 0x30
 8006ad4:	d10a      	bne.n	8006aec <__cvt+0x8c>
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	2300      	movs	r3, #0
 8006ada:	4620      	mov	r0, r4
 8006adc:	4629      	mov	r1, r5
 8006ade:	f7f9 fff3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ae2:	b918      	cbnz	r0, 8006aec <__cvt+0x8c>
 8006ae4:	f1c6 0601 	rsb	r6, r6, #1
 8006ae8:	f8ca 6000 	str.w	r6, [sl]
 8006aec:	f8da 3000 	ldr.w	r3, [sl]
 8006af0:	4499      	add	r9, r3
 8006af2:	2200      	movs	r2, #0
 8006af4:	2300      	movs	r3, #0
 8006af6:	4620      	mov	r0, r4
 8006af8:	4629      	mov	r1, r5
 8006afa:	f7f9 ffe5 	bl	8000ac8 <__aeabi_dcmpeq>
 8006afe:	b108      	cbz	r0, 8006b04 <__cvt+0xa4>
 8006b00:	f8cd 900c 	str.w	r9, [sp, #12]
 8006b04:	2230      	movs	r2, #48	; 0x30
 8006b06:	9b03      	ldr	r3, [sp, #12]
 8006b08:	454b      	cmp	r3, r9
 8006b0a:	d307      	bcc.n	8006b1c <__cvt+0xbc>
 8006b0c:	9b03      	ldr	r3, [sp, #12]
 8006b0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b10:	1bdb      	subs	r3, r3, r7
 8006b12:	4638      	mov	r0, r7
 8006b14:	6013      	str	r3, [r2, #0]
 8006b16:	b004      	add	sp, #16
 8006b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b1c:	1c59      	adds	r1, r3, #1
 8006b1e:	9103      	str	r1, [sp, #12]
 8006b20:	701a      	strb	r2, [r3, #0]
 8006b22:	e7f0      	b.n	8006b06 <__cvt+0xa6>

08006b24 <__exponent>:
 8006b24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b26:	4603      	mov	r3, r0
 8006b28:	2900      	cmp	r1, #0
 8006b2a:	bfb8      	it	lt
 8006b2c:	4249      	neglt	r1, r1
 8006b2e:	f803 2b02 	strb.w	r2, [r3], #2
 8006b32:	bfb4      	ite	lt
 8006b34:	222d      	movlt	r2, #45	; 0x2d
 8006b36:	222b      	movge	r2, #43	; 0x2b
 8006b38:	2909      	cmp	r1, #9
 8006b3a:	7042      	strb	r2, [r0, #1]
 8006b3c:	dd2a      	ble.n	8006b94 <__exponent+0x70>
 8006b3e:	f10d 0407 	add.w	r4, sp, #7
 8006b42:	46a4      	mov	ip, r4
 8006b44:	270a      	movs	r7, #10
 8006b46:	46a6      	mov	lr, r4
 8006b48:	460a      	mov	r2, r1
 8006b4a:	fb91 f6f7 	sdiv	r6, r1, r7
 8006b4e:	fb07 1516 	mls	r5, r7, r6, r1
 8006b52:	3530      	adds	r5, #48	; 0x30
 8006b54:	2a63      	cmp	r2, #99	; 0x63
 8006b56:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006b5a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006b5e:	4631      	mov	r1, r6
 8006b60:	dcf1      	bgt.n	8006b46 <__exponent+0x22>
 8006b62:	3130      	adds	r1, #48	; 0x30
 8006b64:	f1ae 0502 	sub.w	r5, lr, #2
 8006b68:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006b6c:	1c44      	adds	r4, r0, #1
 8006b6e:	4629      	mov	r1, r5
 8006b70:	4561      	cmp	r1, ip
 8006b72:	d30a      	bcc.n	8006b8a <__exponent+0x66>
 8006b74:	f10d 0209 	add.w	r2, sp, #9
 8006b78:	eba2 020e 	sub.w	r2, r2, lr
 8006b7c:	4565      	cmp	r5, ip
 8006b7e:	bf88      	it	hi
 8006b80:	2200      	movhi	r2, #0
 8006b82:	4413      	add	r3, r2
 8006b84:	1a18      	subs	r0, r3, r0
 8006b86:	b003      	add	sp, #12
 8006b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b8e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006b92:	e7ed      	b.n	8006b70 <__exponent+0x4c>
 8006b94:	2330      	movs	r3, #48	; 0x30
 8006b96:	3130      	adds	r1, #48	; 0x30
 8006b98:	7083      	strb	r3, [r0, #2]
 8006b9a:	70c1      	strb	r1, [r0, #3]
 8006b9c:	1d03      	adds	r3, r0, #4
 8006b9e:	e7f1      	b.n	8006b84 <__exponent+0x60>

08006ba0 <_printf_float>:
 8006ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba4:	ed2d 8b02 	vpush	{d8}
 8006ba8:	b08d      	sub	sp, #52	; 0x34
 8006baa:	460c      	mov	r4, r1
 8006bac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006bb0:	4616      	mov	r6, r2
 8006bb2:	461f      	mov	r7, r3
 8006bb4:	4605      	mov	r5, r0
 8006bb6:	f003 f843 	bl	8009c40 <_localeconv_r>
 8006bba:	f8d0 a000 	ldr.w	sl, [r0]
 8006bbe:	4650      	mov	r0, sl
 8006bc0:	f7f9 fb06 	bl	80001d0 <strlen>
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	930a      	str	r3, [sp, #40]	; 0x28
 8006bc8:	6823      	ldr	r3, [r4, #0]
 8006bca:	9305      	str	r3, [sp, #20]
 8006bcc:	f8d8 3000 	ldr.w	r3, [r8]
 8006bd0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006bd4:	3307      	adds	r3, #7
 8006bd6:	f023 0307 	bic.w	r3, r3, #7
 8006bda:	f103 0208 	add.w	r2, r3, #8
 8006bde:	f8c8 2000 	str.w	r2, [r8]
 8006be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006bea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006bee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006bf2:	9307      	str	r3, [sp, #28]
 8006bf4:	f8cd 8018 	str.w	r8, [sp, #24]
 8006bf8:	ee08 0a10 	vmov	s16, r0
 8006bfc:	4b9f      	ldr	r3, [pc, #636]	; (8006e7c <_printf_float+0x2dc>)
 8006bfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c06:	f7f9 ff91 	bl	8000b2c <__aeabi_dcmpun>
 8006c0a:	bb88      	cbnz	r0, 8006c70 <_printf_float+0xd0>
 8006c0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c10:	4b9a      	ldr	r3, [pc, #616]	; (8006e7c <_printf_float+0x2dc>)
 8006c12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c16:	f7f9 ff6b 	bl	8000af0 <__aeabi_dcmple>
 8006c1a:	bb48      	cbnz	r0, 8006c70 <_printf_float+0xd0>
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	2300      	movs	r3, #0
 8006c20:	4640      	mov	r0, r8
 8006c22:	4649      	mov	r1, r9
 8006c24:	f7f9 ff5a 	bl	8000adc <__aeabi_dcmplt>
 8006c28:	b110      	cbz	r0, 8006c30 <_printf_float+0x90>
 8006c2a:	232d      	movs	r3, #45	; 0x2d
 8006c2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c30:	4b93      	ldr	r3, [pc, #588]	; (8006e80 <_printf_float+0x2e0>)
 8006c32:	4894      	ldr	r0, [pc, #592]	; (8006e84 <_printf_float+0x2e4>)
 8006c34:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006c38:	bf94      	ite	ls
 8006c3a:	4698      	movls	r8, r3
 8006c3c:	4680      	movhi	r8, r0
 8006c3e:	2303      	movs	r3, #3
 8006c40:	6123      	str	r3, [r4, #16]
 8006c42:	9b05      	ldr	r3, [sp, #20]
 8006c44:	f023 0204 	bic.w	r2, r3, #4
 8006c48:	6022      	str	r2, [r4, #0]
 8006c4a:	f04f 0900 	mov.w	r9, #0
 8006c4e:	9700      	str	r7, [sp, #0]
 8006c50:	4633      	mov	r3, r6
 8006c52:	aa0b      	add	r2, sp, #44	; 0x2c
 8006c54:	4621      	mov	r1, r4
 8006c56:	4628      	mov	r0, r5
 8006c58:	f000 f9d8 	bl	800700c <_printf_common>
 8006c5c:	3001      	adds	r0, #1
 8006c5e:	f040 8090 	bne.w	8006d82 <_printf_float+0x1e2>
 8006c62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c66:	b00d      	add	sp, #52	; 0x34
 8006c68:	ecbd 8b02 	vpop	{d8}
 8006c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c70:	4642      	mov	r2, r8
 8006c72:	464b      	mov	r3, r9
 8006c74:	4640      	mov	r0, r8
 8006c76:	4649      	mov	r1, r9
 8006c78:	f7f9 ff58 	bl	8000b2c <__aeabi_dcmpun>
 8006c7c:	b140      	cbz	r0, 8006c90 <_printf_float+0xf0>
 8006c7e:	464b      	mov	r3, r9
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	bfbc      	itt	lt
 8006c84:	232d      	movlt	r3, #45	; 0x2d
 8006c86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c8a:	487f      	ldr	r0, [pc, #508]	; (8006e88 <_printf_float+0x2e8>)
 8006c8c:	4b7f      	ldr	r3, [pc, #508]	; (8006e8c <_printf_float+0x2ec>)
 8006c8e:	e7d1      	b.n	8006c34 <_printf_float+0x94>
 8006c90:	6863      	ldr	r3, [r4, #4]
 8006c92:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006c96:	9206      	str	r2, [sp, #24]
 8006c98:	1c5a      	adds	r2, r3, #1
 8006c9a:	d13f      	bne.n	8006d1c <_printf_float+0x17c>
 8006c9c:	2306      	movs	r3, #6
 8006c9e:	6063      	str	r3, [r4, #4]
 8006ca0:	9b05      	ldr	r3, [sp, #20]
 8006ca2:	6861      	ldr	r1, [r4, #4]
 8006ca4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006ca8:	2300      	movs	r3, #0
 8006caa:	9303      	str	r3, [sp, #12]
 8006cac:	ab0a      	add	r3, sp, #40	; 0x28
 8006cae:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006cb2:	ab09      	add	r3, sp, #36	; 0x24
 8006cb4:	ec49 8b10 	vmov	d0, r8, r9
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	6022      	str	r2, [r4, #0]
 8006cbc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006cc0:	4628      	mov	r0, r5
 8006cc2:	f7ff fecd 	bl	8006a60 <__cvt>
 8006cc6:	9b06      	ldr	r3, [sp, #24]
 8006cc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cca:	2b47      	cmp	r3, #71	; 0x47
 8006ccc:	4680      	mov	r8, r0
 8006cce:	d108      	bne.n	8006ce2 <_printf_float+0x142>
 8006cd0:	1cc8      	adds	r0, r1, #3
 8006cd2:	db02      	blt.n	8006cda <_printf_float+0x13a>
 8006cd4:	6863      	ldr	r3, [r4, #4]
 8006cd6:	4299      	cmp	r1, r3
 8006cd8:	dd41      	ble.n	8006d5e <_printf_float+0x1be>
 8006cda:	f1ab 0b02 	sub.w	fp, fp, #2
 8006cde:	fa5f fb8b 	uxtb.w	fp, fp
 8006ce2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ce6:	d820      	bhi.n	8006d2a <_printf_float+0x18a>
 8006ce8:	3901      	subs	r1, #1
 8006cea:	465a      	mov	r2, fp
 8006cec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006cf0:	9109      	str	r1, [sp, #36]	; 0x24
 8006cf2:	f7ff ff17 	bl	8006b24 <__exponent>
 8006cf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cf8:	1813      	adds	r3, r2, r0
 8006cfa:	2a01      	cmp	r2, #1
 8006cfc:	4681      	mov	r9, r0
 8006cfe:	6123      	str	r3, [r4, #16]
 8006d00:	dc02      	bgt.n	8006d08 <_printf_float+0x168>
 8006d02:	6822      	ldr	r2, [r4, #0]
 8006d04:	07d2      	lsls	r2, r2, #31
 8006d06:	d501      	bpl.n	8006d0c <_printf_float+0x16c>
 8006d08:	3301      	adds	r3, #1
 8006d0a:	6123      	str	r3, [r4, #16]
 8006d0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d09c      	beq.n	8006c4e <_printf_float+0xae>
 8006d14:	232d      	movs	r3, #45	; 0x2d
 8006d16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d1a:	e798      	b.n	8006c4e <_printf_float+0xae>
 8006d1c:	9a06      	ldr	r2, [sp, #24]
 8006d1e:	2a47      	cmp	r2, #71	; 0x47
 8006d20:	d1be      	bne.n	8006ca0 <_printf_float+0x100>
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1bc      	bne.n	8006ca0 <_printf_float+0x100>
 8006d26:	2301      	movs	r3, #1
 8006d28:	e7b9      	b.n	8006c9e <_printf_float+0xfe>
 8006d2a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006d2e:	d118      	bne.n	8006d62 <_printf_float+0x1c2>
 8006d30:	2900      	cmp	r1, #0
 8006d32:	6863      	ldr	r3, [r4, #4]
 8006d34:	dd0b      	ble.n	8006d4e <_printf_float+0x1ae>
 8006d36:	6121      	str	r1, [r4, #16]
 8006d38:	b913      	cbnz	r3, 8006d40 <_printf_float+0x1a0>
 8006d3a:	6822      	ldr	r2, [r4, #0]
 8006d3c:	07d0      	lsls	r0, r2, #31
 8006d3e:	d502      	bpl.n	8006d46 <_printf_float+0x1a6>
 8006d40:	3301      	adds	r3, #1
 8006d42:	440b      	add	r3, r1
 8006d44:	6123      	str	r3, [r4, #16]
 8006d46:	65a1      	str	r1, [r4, #88]	; 0x58
 8006d48:	f04f 0900 	mov.w	r9, #0
 8006d4c:	e7de      	b.n	8006d0c <_printf_float+0x16c>
 8006d4e:	b913      	cbnz	r3, 8006d56 <_printf_float+0x1b6>
 8006d50:	6822      	ldr	r2, [r4, #0]
 8006d52:	07d2      	lsls	r2, r2, #31
 8006d54:	d501      	bpl.n	8006d5a <_printf_float+0x1ba>
 8006d56:	3302      	adds	r3, #2
 8006d58:	e7f4      	b.n	8006d44 <_printf_float+0x1a4>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e7f2      	b.n	8006d44 <_printf_float+0x1a4>
 8006d5e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d64:	4299      	cmp	r1, r3
 8006d66:	db05      	blt.n	8006d74 <_printf_float+0x1d4>
 8006d68:	6823      	ldr	r3, [r4, #0]
 8006d6a:	6121      	str	r1, [r4, #16]
 8006d6c:	07d8      	lsls	r0, r3, #31
 8006d6e:	d5ea      	bpl.n	8006d46 <_printf_float+0x1a6>
 8006d70:	1c4b      	adds	r3, r1, #1
 8006d72:	e7e7      	b.n	8006d44 <_printf_float+0x1a4>
 8006d74:	2900      	cmp	r1, #0
 8006d76:	bfd4      	ite	le
 8006d78:	f1c1 0202 	rsble	r2, r1, #2
 8006d7c:	2201      	movgt	r2, #1
 8006d7e:	4413      	add	r3, r2
 8006d80:	e7e0      	b.n	8006d44 <_printf_float+0x1a4>
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	055a      	lsls	r2, r3, #21
 8006d86:	d407      	bmi.n	8006d98 <_printf_float+0x1f8>
 8006d88:	6923      	ldr	r3, [r4, #16]
 8006d8a:	4642      	mov	r2, r8
 8006d8c:	4631      	mov	r1, r6
 8006d8e:	4628      	mov	r0, r5
 8006d90:	47b8      	blx	r7
 8006d92:	3001      	adds	r0, #1
 8006d94:	d12c      	bne.n	8006df0 <_printf_float+0x250>
 8006d96:	e764      	b.n	8006c62 <_printf_float+0xc2>
 8006d98:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d9c:	f240 80e0 	bls.w	8006f60 <_printf_float+0x3c0>
 8006da0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006da4:	2200      	movs	r2, #0
 8006da6:	2300      	movs	r3, #0
 8006da8:	f7f9 fe8e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006dac:	2800      	cmp	r0, #0
 8006dae:	d034      	beq.n	8006e1a <_printf_float+0x27a>
 8006db0:	4a37      	ldr	r2, [pc, #220]	; (8006e90 <_printf_float+0x2f0>)
 8006db2:	2301      	movs	r3, #1
 8006db4:	4631      	mov	r1, r6
 8006db6:	4628      	mov	r0, r5
 8006db8:	47b8      	blx	r7
 8006dba:	3001      	adds	r0, #1
 8006dbc:	f43f af51 	beq.w	8006c62 <_printf_float+0xc2>
 8006dc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	db02      	blt.n	8006dce <_printf_float+0x22e>
 8006dc8:	6823      	ldr	r3, [r4, #0]
 8006dca:	07d8      	lsls	r0, r3, #31
 8006dcc:	d510      	bpl.n	8006df0 <_printf_float+0x250>
 8006dce:	ee18 3a10 	vmov	r3, s16
 8006dd2:	4652      	mov	r2, sl
 8006dd4:	4631      	mov	r1, r6
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	47b8      	blx	r7
 8006dda:	3001      	adds	r0, #1
 8006ddc:	f43f af41 	beq.w	8006c62 <_printf_float+0xc2>
 8006de0:	f04f 0800 	mov.w	r8, #0
 8006de4:	f104 091a 	add.w	r9, r4, #26
 8006de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dea:	3b01      	subs	r3, #1
 8006dec:	4543      	cmp	r3, r8
 8006dee:	dc09      	bgt.n	8006e04 <_printf_float+0x264>
 8006df0:	6823      	ldr	r3, [r4, #0]
 8006df2:	079b      	lsls	r3, r3, #30
 8006df4:	f100 8105 	bmi.w	8007002 <_printf_float+0x462>
 8006df8:	68e0      	ldr	r0, [r4, #12]
 8006dfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dfc:	4298      	cmp	r0, r3
 8006dfe:	bfb8      	it	lt
 8006e00:	4618      	movlt	r0, r3
 8006e02:	e730      	b.n	8006c66 <_printf_float+0xc6>
 8006e04:	2301      	movs	r3, #1
 8006e06:	464a      	mov	r2, r9
 8006e08:	4631      	mov	r1, r6
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	47b8      	blx	r7
 8006e0e:	3001      	adds	r0, #1
 8006e10:	f43f af27 	beq.w	8006c62 <_printf_float+0xc2>
 8006e14:	f108 0801 	add.w	r8, r8, #1
 8006e18:	e7e6      	b.n	8006de8 <_printf_float+0x248>
 8006e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	dc39      	bgt.n	8006e94 <_printf_float+0x2f4>
 8006e20:	4a1b      	ldr	r2, [pc, #108]	; (8006e90 <_printf_float+0x2f0>)
 8006e22:	2301      	movs	r3, #1
 8006e24:	4631      	mov	r1, r6
 8006e26:	4628      	mov	r0, r5
 8006e28:	47b8      	blx	r7
 8006e2a:	3001      	adds	r0, #1
 8006e2c:	f43f af19 	beq.w	8006c62 <_printf_float+0xc2>
 8006e30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e34:	4313      	orrs	r3, r2
 8006e36:	d102      	bne.n	8006e3e <_printf_float+0x29e>
 8006e38:	6823      	ldr	r3, [r4, #0]
 8006e3a:	07d9      	lsls	r1, r3, #31
 8006e3c:	d5d8      	bpl.n	8006df0 <_printf_float+0x250>
 8006e3e:	ee18 3a10 	vmov	r3, s16
 8006e42:	4652      	mov	r2, sl
 8006e44:	4631      	mov	r1, r6
 8006e46:	4628      	mov	r0, r5
 8006e48:	47b8      	blx	r7
 8006e4a:	3001      	adds	r0, #1
 8006e4c:	f43f af09 	beq.w	8006c62 <_printf_float+0xc2>
 8006e50:	f04f 0900 	mov.w	r9, #0
 8006e54:	f104 0a1a 	add.w	sl, r4, #26
 8006e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e5a:	425b      	negs	r3, r3
 8006e5c:	454b      	cmp	r3, r9
 8006e5e:	dc01      	bgt.n	8006e64 <_printf_float+0x2c4>
 8006e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e62:	e792      	b.n	8006d8a <_printf_float+0x1ea>
 8006e64:	2301      	movs	r3, #1
 8006e66:	4652      	mov	r2, sl
 8006e68:	4631      	mov	r1, r6
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	47b8      	blx	r7
 8006e6e:	3001      	adds	r0, #1
 8006e70:	f43f aef7 	beq.w	8006c62 <_printf_float+0xc2>
 8006e74:	f109 0901 	add.w	r9, r9, #1
 8006e78:	e7ee      	b.n	8006e58 <_printf_float+0x2b8>
 8006e7a:	bf00      	nop
 8006e7c:	7fefffff 	.word	0x7fefffff
 8006e80:	0800b244 	.word	0x0800b244
 8006e84:	0800b248 	.word	0x0800b248
 8006e88:	0800b250 	.word	0x0800b250
 8006e8c:	0800b24c 	.word	0x0800b24c
 8006e90:	0800b254 	.word	0x0800b254
 8006e94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	bfa8      	it	ge
 8006e9c:	461a      	movge	r2, r3
 8006e9e:	2a00      	cmp	r2, #0
 8006ea0:	4691      	mov	r9, r2
 8006ea2:	dc37      	bgt.n	8006f14 <_printf_float+0x374>
 8006ea4:	f04f 0b00 	mov.w	fp, #0
 8006ea8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006eac:	f104 021a 	add.w	r2, r4, #26
 8006eb0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006eb2:	9305      	str	r3, [sp, #20]
 8006eb4:	eba3 0309 	sub.w	r3, r3, r9
 8006eb8:	455b      	cmp	r3, fp
 8006eba:	dc33      	bgt.n	8006f24 <_printf_float+0x384>
 8006ebc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	db3b      	blt.n	8006f3c <_printf_float+0x39c>
 8006ec4:	6823      	ldr	r3, [r4, #0]
 8006ec6:	07da      	lsls	r2, r3, #31
 8006ec8:	d438      	bmi.n	8006f3c <_printf_float+0x39c>
 8006eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ecc:	9a05      	ldr	r2, [sp, #20]
 8006ece:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ed0:	1a9a      	subs	r2, r3, r2
 8006ed2:	eba3 0901 	sub.w	r9, r3, r1
 8006ed6:	4591      	cmp	r9, r2
 8006ed8:	bfa8      	it	ge
 8006eda:	4691      	movge	r9, r2
 8006edc:	f1b9 0f00 	cmp.w	r9, #0
 8006ee0:	dc35      	bgt.n	8006f4e <_printf_float+0x3ae>
 8006ee2:	f04f 0800 	mov.w	r8, #0
 8006ee6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006eea:	f104 0a1a 	add.w	sl, r4, #26
 8006eee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ef2:	1a9b      	subs	r3, r3, r2
 8006ef4:	eba3 0309 	sub.w	r3, r3, r9
 8006ef8:	4543      	cmp	r3, r8
 8006efa:	f77f af79 	ble.w	8006df0 <_printf_float+0x250>
 8006efe:	2301      	movs	r3, #1
 8006f00:	4652      	mov	r2, sl
 8006f02:	4631      	mov	r1, r6
 8006f04:	4628      	mov	r0, r5
 8006f06:	47b8      	blx	r7
 8006f08:	3001      	adds	r0, #1
 8006f0a:	f43f aeaa 	beq.w	8006c62 <_printf_float+0xc2>
 8006f0e:	f108 0801 	add.w	r8, r8, #1
 8006f12:	e7ec      	b.n	8006eee <_printf_float+0x34e>
 8006f14:	4613      	mov	r3, r2
 8006f16:	4631      	mov	r1, r6
 8006f18:	4642      	mov	r2, r8
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	47b8      	blx	r7
 8006f1e:	3001      	adds	r0, #1
 8006f20:	d1c0      	bne.n	8006ea4 <_printf_float+0x304>
 8006f22:	e69e      	b.n	8006c62 <_printf_float+0xc2>
 8006f24:	2301      	movs	r3, #1
 8006f26:	4631      	mov	r1, r6
 8006f28:	4628      	mov	r0, r5
 8006f2a:	9205      	str	r2, [sp, #20]
 8006f2c:	47b8      	blx	r7
 8006f2e:	3001      	adds	r0, #1
 8006f30:	f43f ae97 	beq.w	8006c62 <_printf_float+0xc2>
 8006f34:	9a05      	ldr	r2, [sp, #20]
 8006f36:	f10b 0b01 	add.w	fp, fp, #1
 8006f3a:	e7b9      	b.n	8006eb0 <_printf_float+0x310>
 8006f3c:	ee18 3a10 	vmov	r3, s16
 8006f40:	4652      	mov	r2, sl
 8006f42:	4631      	mov	r1, r6
 8006f44:	4628      	mov	r0, r5
 8006f46:	47b8      	blx	r7
 8006f48:	3001      	adds	r0, #1
 8006f4a:	d1be      	bne.n	8006eca <_printf_float+0x32a>
 8006f4c:	e689      	b.n	8006c62 <_printf_float+0xc2>
 8006f4e:	9a05      	ldr	r2, [sp, #20]
 8006f50:	464b      	mov	r3, r9
 8006f52:	4442      	add	r2, r8
 8006f54:	4631      	mov	r1, r6
 8006f56:	4628      	mov	r0, r5
 8006f58:	47b8      	blx	r7
 8006f5a:	3001      	adds	r0, #1
 8006f5c:	d1c1      	bne.n	8006ee2 <_printf_float+0x342>
 8006f5e:	e680      	b.n	8006c62 <_printf_float+0xc2>
 8006f60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f62:	2a01      	cmp	r2, #1
 8006f64:	dc01      	bgt.n	8006f6a <_printf_float+0x3ca>
 8006f66:	07db      	lsls	r3, r3, #31
 8006f68:	d538      	bpl.n	8006fdc <_printf_float+0x43c>
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	4642      	mov	r2, r8
 8006f6e:	4631      	mov	r1, r6
 8006f70:	4628      	mov	r0, r5
 8006f72:	47b8      	blx	r7
 8006f74:	3001      	adds	r0, #1
 8006f76:	f43f ae74 	beq.w	8006c62 <_printf_float+0xc2>
 8006f7a:	ee18 3a10 	vmov	r3, s16
 8006f7e:	4652      	mov	r2, sl
 8006f80:	4631      	mov	r1, r6
 8006f82:	4628      	mov	r0, r5
 8006f84:	47b8      	blx	r7
 8006f86:	3001      	adds	r0, #1
 8006f88:	f43f ae6b 	beq.w	8006c62 <_printf_float+0xc2>
 8006f8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f90:	2200      	movs	r2, #0
 8006f92:	2300      	movs	r3, #0
 8006f94:	f7f9 fd98 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f98:	b9d8      	cbnz	r0, 8006fd2 <_printf_float+0x432>
 8006f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f9c:	f108 0201 	add.w	r2, r8, #1
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	4631      	mov	r1, r6
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	47b8      	blx	r7
 8006fa8:	3001      	adds	r0, #1
 8006faa:	d10e      	bne.n	8006fca <_printf_float+0x42a>
 8006fac:	e659      	b.n	8006c62 <_printf_float+0xc2>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	4652      	mov	r2, sl
 8006fb2:	4631      	mov	r1, r6
 8006fb4:	4628      	mov	r0, r5
 8006fb6:	47b8      	blx	r7
 8006fb8:	3001      	adds	r0, #1
 8006fba:	f43f ae52 	beq.w	8006c62 <_printf_float+0xc2>
 8006fbe:	f108 0801 	add.w	r8, r8, #1
 8006fc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	4543      	cmp	r3, r8
 8006fc8:	dcf1      	bgt.n	8006fae <_printf_float+0x40e>
 8006fca:	464b      	mov	r3, r9
 8006fcc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006fd0:	e6dc      	b.n	8006d8c <_printf_float+0x1ec>
 8006fd2:	f04f 0800 	mov.w	r8, #0
 8006fd6:	f104 0a1a 	add.w	sl, r4, #26
 8006fda:	e7f2      	b.n	8006fc2 <_printf_float+0x422>
 8006fdc:	2301      	movs	r3, #1
 8006fde:	4642      	mov	r2, r8
 8006fe0:	e7df      	b.n	8006fa2 <_printf_float+0x402>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	464a      	mov	r2, r9
 8006fe6:	4631      	mov	r1, r6
 8006fe8:	4628      	mov	r0, r5
 8006fea:	47b8      	blx	r7
 8006fec:	3001      	adds	r0, #1
 8006fee:	f43f ae38 	beq.w	8006c62 <_printf_float+0xc2>
 8006ff2:	f108 0801 	add.w	r8, r8, #1
 8006ff6:	68e3      	ldr	r3, [r4, #12]
 8006ff8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ffa:	1a5b      	subs	r3, r3, r1
 8006ffc:	4543      	cmp	r3, r8
 8006ffe:	dcf0      	bgt.n	8006fe2 <_printf_float+0x442>
 8007000:	e6fa      	b.n	8006df8 <_printf_float+0x258>
 8007002:	f04f 0800 	mov.w	r8, #0
 8007006:	f104 0919 	add.w	r9, r4, #25
 800700a:	e7f4      	b.n	8006ff6 <_printf_float+0x456>

0800700c <_printf_common>:
 800700c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007010:	4616      	mov	r6, r2
 8007012:	4699      	mov	r9, r3
 8007014:	688a      	ldr	r2, [r1, #8]
 8007016:	690b      	ldr	r3, [r1, #16]
 8007018:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800701c:	4293      	cmp	r3, r2
 800701e:	bfb8      	it	lt
 8007020:	4613      	movlt	r3, r2
 8007022:	6033      	str	r3, [r6, #0]
 8007024:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007028:	4607      	mov	r7, r0
 800702a:	460c      	mov	r4, r1
 800702c:	b10a      	cbz	r2, 8007032 <_printf_common+0x26>
 800702e:	3301      	adds	r3, #1
 8007030:	6033      	str	r3, [r6, #0]
 8007032:	6823      	ldr	r3, [r4, #0]
 8007034:	0699      	lsls	r1, r3, #26
 8007036:	bf42      	ittt	mi
 8007038:	6833      	ldrmi	r3, [r6, #0]
 800703a:	3302      	addmi	r3, #2
 800703c:	6033      	strmi	r3, [r6, #0]
 800703e:	6825      	ldr	r5, [r4, #0]
 8007040:	f015 0506 	ands.w	r5, r5, #6
 8007044:	d106      	bne.n	8007054 <_printf_common+0x48>
 8007046:	f104 0a19 	add.w	sl, r4, #25
 800704a:	68e3      	ldr	r3, [r4, #12]
 800704c:	6832      	ldr	r2, [r6, #0]
 800704e:	1a9b      	subs	r3, r3, r2
 8007050:	42ab      	cmp	r3, r5
 8007052:	dc26      	bgt.n	80070a2 <_printf_common+0x96>
 8007054:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007058:	1e13      	subs	r3, r2, #0
 800705a:	6822      	ldr	r2, [r4, #0]
 800705c:	bf18      	it	ne
 800705e:	2301      	movne	r3, #1
 8007060:	0692      	lsls	r2, r2, #26
 8007062:	d42b      	bmi.n	80070bc <_printf_common+0xb0>
 8007064:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007068:	4649      	mov	r1, r9
 800706a:	4638      	mov	r0, r7
 800706c:	47c0      	blx	r8
 800706e:	3001      	adds	r0, #1
 8007070:	d01e      	beq.n	80070b0 <_printf_common+0xa4>
 8007072:	6823      	ldr	r3, [r4, #0]
 8007074:	68e5      	ldr	r5, [r4, #12]
 8007076:	6832      	ldr	r2, [r6, #0]
 8007078:	f003 0306 	and.w	r3, r3, #6
 800707c:	2b04      	cmp	r3, #4
 800707e:	bf08      	it	eq
 8007080:	1aad      	subeq	r5, r5, r2
 8007082:	68a3      	ldr	r3, [r4, #8]
 8007084:	6922      	ldr	r2, [r4, #16]
 8007086:	bf0c      	ite	eq
 8007088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800708c:	2500      	movne	r5, #0
 800708e:	4293      	cmp	r3, r2
 8007090:	bfc4      	itt	gt
 8007092:	1a9b      	subgt	r3, r3, r2
 8007094:	18ed      	addgt	r5, r5, r3
 8007096:	2600      	movs	r6, #0
 8007098:	341a      	adds	r4, #26
 800709a:	42b5      	cmp	r5, r6
 800709c:	d11a      	bne.n	80070d4 <_printf_common+0xc8>
 800709e:	2000      	movs	r0, #0
 80070a0:	e008      	b.n	80070b4 <_printf_common+0xa8>
 80070a2:	2301      	movs	r3, #1
 80070a4:	4652      	mov	r2, sl
 80070a6:	4649      	mov	r1, r9
 80070a8:	4638      	mov	r0, r7
 80070aa:	47c0      	blx	r8
 80070ac:	3001      	adds	r0, #1
 80070ae:	d103      	bne.n	80070b8 <_printf_common+0xac>
 80070b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070b8:	3501      	adds	r5, #1
 80070ba:	e7c6      	b.n	800704a <_printf_common+0x3e>
 80070bc:	18e1      	adds	r1, r4, r3
 80070be:	1c5a      	adds	r2, r3, #1
 80070c0:	2030      	movs	r0, #48	; 0x30
 80070c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070c6:	4422      	add	r2, r4
 80070c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070d0:	3302      	adds	r3, #2
 80070d2:	e7c7      	b.n	8007064 <_printf_common+0x58>
 80070d4:	2301      	movs	r3, #1
 80070d6:	4622      	mov	r2, r4
 80070d8:	4649      	mov	r1, r9
 80070da:	4638      	mov	r0, r7
 80070dc:	47c0      	blx	r8
 80070de:	3001      	adds	r0, #1
 80070e0:	d0e6      	beq.n	80070b0 <_printf_common+0xa4>
 80070e2:	3601      	adds	r6, #1
 80070e4:	e7d9      	b.n	800709a <_printf_common+0x8e>
	...

080070e8 <_printf_i>:
 80070e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070ec:	7e0f      	ldrb	r7, [r1, #24]
 80070ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80070f0:	2f78      	cmp	r7, #120	; 0x78
 80070f2:	4691      	mov	r9, r2
 80070f4:	4680      	mov	r8, r0
 80070f6:	460c      	mov	r4, r1
 80070f8:	469a      	mov	sl, r3
 80070fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80070fe:	d807      	bhi.n	8007110 <_printf_i+0x28>
 8007100:	2f62      	cmp	r7, #98	; 0x62
 8007102:	d80a      	bhi.n	800711a <_printf_i+0x32>
 8007104:	2f00      	cmp	r7, #0
 8007106:	f000 80d8 	beq.w	80072ba <_printf_i+0x1d2>
 800710a:	2f58      	cmp	r7, #88	; 0x58
 800710c:	f000 80a3 	beq.w	8007256 <_printf_i+0x16e>
 8007110:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007114:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007118:	e03a      	b.n	8007190 <_printf_i+0xa8>
 800711a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800711e:	2b15      	cmp	r3, #21
 8007120:	d8f6      	bhi.n	8007110 <_printf_i+0x28>
 8007122:	a101      	add	r1, pc, #4	; (adr r1, 8007128 <_printf_i+0x40>)
 8007124:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007128:	08007181 	.word	0x08007181
 800712c:	08007195 	.word	0x08007195
 8007130:	08007111 	.word	0x08007111
 8007134:	08007111 	.word	0x08007111
 8007138:	08007111 	.word	0x08007111
 800713c:	08007111 	.word	0x08007111
 8007140:	08007195 	.word	0x08007195
 8007144:	08007111 	.word	0x08007111
 8007148:	08007111 	.word	0x08007111
 800714c:	08007111 	.word	0x08007111
 8007150:	08007111 	.word	0x08007111
 8007154:	080072a1 	.word	0x080072a1
 8007158:	080071c5 	.word	0x080071c5
 800715c:	08007283 	.word	0x08007283
 8007160:	08007111 	.word	0x08007111
 8007164:	08007111 	.word	0x08007111
 8007168:	080072c3 	.word	0x080072c3
 800716c:	08007111 	.word	0x08007111
 8007170:	080071c5 	.word	0x080071c5
 8007174:	08007111 	.word	0x08007111
 8007178:	08007111 	.word	0x08007111
 800717c:	0800728b 	.word	0x0800728b
 8007180:	682b      	ldr	r3, [r5, #0]
 8007182:	1d1a      	adds	r2, r3, #4
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	602a      	str	r2, [r5, #0]
 8007188:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800718c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007190:	2301      	movs	r3, #1
 8007192:	e0a3      	b.n	80072dc <_printf_i+0x1f4>
 8007194:	6820      	ldr	r0, [r4, #0]
 8007196:	6829      	ldr	r1, [r5, #0]
 8007198:	0606      	lsls	r6, r0, #24
 800719a:	f101 0304 	add.w	r3, r1, #4
 800719e:	d50a      	bpl.n	80071b6 <_printf_i+0xce>
 80071a0:	680e      	ldr	r6, [r1, #0]
 80071a2:	602b      	str	r3, [r5, #0]
 80071a4:	2e00      	cmp	r6, #0
 80071a6:	da03      	bge.n	80071b0 <_printf_i+0xc8>
 80071a8:	232d      	movs	r3, #45	; 0x2d
 80071aa:	4276      	negs	r6, r6
 80071ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071b0:	485e      	ldr	r0, [pc, #376]	; (800732c <_printf_i+0x244>)
 80071b2:	230a      	movs	r3, #10
 80071b4:	e019      	b.n	80071ea <_printf_i+0x102>
 80071b6:	680e      	ldr	r6, [r1, #0]
 80071b8:	602b      	str	r3, [r5, #0]
 80071ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80071be:	bf18      	it	ne
 80071c0:	b236      	sxthne	r6, r6
 80071c2:	e7ef      	b.n	80071a4 <_printf_i+0xbc>
 80071c4:	682b      	ldr	r3, [r5, #0]
 80071c6:	6820      	ldr	r0, [r4, #0]
 80071c8:	1d19      	adds	r1, r3, #4
 80071ca:	6029      	str	r1, [r5, #0]
 80071cc:	0601      	lsls	r1, r0, #24
 80071ce:	d501      	bpl.n	80071d4 <_printf_i+0xec>
 80071d0:	681e      	ldr	r6, [r3, #0]
 80071d2:	e002      	b.n	80071da <_printf_i+0xf2>
 80071d4:	0646      	lsls	r6, r0, #25
 80071d6:	d5fb      	bpl.n	80071d0 <_printf_i+0xe8>
 80071d8:	881e      	ldrh	r6, [r3, #0]
 80071da:	4854      	ldr	r0, [pc, #336]	; (800732c <_printf_i+0x244>)
 80071dc:	2f6f      	cmp	r7, #111	; 0x6f
 80071de:	bf0c      	ite	eq
 80071e0:	2308      	moveq	r3, #8
 80071e2:	230a      	movne	r3, #10
 80071e4:	2100      	movs	r1, #0
 80071e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071ea:	6865      	ldr	r5, [r4, #4]
 80071ec:	60a5      	str	r5, [r4, #8]
 80071ee:	2d00      	cmp	r5, #0
 80071f0:	bfa2      	ittt	ge
 80071f2:	6821      	ldrge	r1, [r4, #0]
 80071f4:	f021 0104 	bicge.w	r1, r1, #4
 80071f8:	6021      	strge	r1, [r4, #0]
 80071fa:	b90e      	cbnz	r6, 8007200 <_printf_i+0x118>
 80071fc:	2d00      	cmp	r5, #0
 80071fe:	d04d      	beq.n	800729c <_printf_i+0x1b4>
 8007200:	4615      	mov	r5, r2
 8007202:	fbb6 f1f3 	udiv	r1, r6, r3
 8007206:	fb03 6711 	mls	r7, r3, r1, r6
 800720a:	5dc7      	ldrb	r7, [r0, r7]
 800720c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007210:	4637      	mov	r7, r6
 8007212:	42bb      	cmp	r3, r7
 8007214:	460e      	mov	r6, r1
 8007216:	d9f4      	bls.n	8007202 <_printf_i+0x11a>
 8007218:	2b08      	cmp	r3, #8
 800721a:	d10b      	bne.n	8007234 <_printf_i+0x14c>
 800721c:	6823      	ldr	r3, [r4, #0]
 800721e:	07de      	lsls	r6, r3, #31
 8007220:	d508      	bpl.n	8007234 <_printf_i+0x14c>
 8007222:	6923      	ldr	r3, [r4, #16]
 8007224:	6861      	ldr	r1, [r4, #4]
 8007226:	4299      	cmp	r1, r3
 8007228:	bfde      	ittt	le
 800722a:	2330      	movle	r3, #48	; 0x30
 800722c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007230:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007234:	1b52      	subs	r2, r2, r5
 8007236:	6122      	str	r2, [r4, #16]
 8007238:	f8cd a000 	str.w	sl, [sp]
 800723c:	464b      	mov	r3, r9
 800723e:	aa03      	add	r2, sp, #12
 8007240:	4621      	mov	r1, r4
 8007242:	4640      	mov	r0, r8
 8007244:	f7ff fee2 	bl	800700c <_printf_common>
 8007248:	3001      	adds	r0, #1
 800724a:	d14c      	bne.n	80072e6 <_printf_i+0x1fe>
 800724c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007250:	b004      	add	sp, #16
 8007252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007256:	4835      	ldr	r0, [pc, #212]	; (800732c <_printf_i+0x244>)
 8007258:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800725c:	6829      	ldr	r1, [r5, #0]
 800725e:	6823      	ldr	r3, [r4, #0]
 8007260:	f851 6b04 	ldr.w	r6, [r1], #4
 8007264:	6029      	str	r1, [r5, #0]
 8007266:	061d      	lsls	r5, r3, #24
 8007268:	d514      	bpl.n	8007294 <_printf_i+0x1ac>
 800726a:	07df      	lsls	r7, r3, #31
 800726c:	bf44      	itt	mi
 800726e:	f043 0320 	orrmi.w	r3, r3, #32
 8007272:	6023      	strmi	r3, [r4, #0]
 8007274:	b91e      	cbnz	r6, 800727e <_printf_i+0x196>
 8007276:	6823      	ldr	r3, [r4, #0]
 8007278:	f023 0320 	bic.w	r3, r3, #32
 800727c:	6023      	str	r3, [r4, #0]
 800727e:	2310      	movs	r3, #16
 8007280:	e7b0      	b.n	80071e4 <_printf_i+0xfc>
 8007282:	6823      	ldr	r3, [r4, #0]
 8007284:	f043 0320 	orr.w	r3, r3, #32
 8007288:	6023      	str	r3, [r4, #0]
 800728a:	2378      	movs	r3, #120	; 0x78
 800728c:	4828      	ldr	r0, [pc, #160]	; (8007330 <_printf_i+0x248>)
 800728e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007292:	e7e3      	b.n	800725c <_printf_i+0x174>
 8007294:	0659      	lsls	r1, r3, #25
 8007296:	bf48      	it	mi
 8007298:	b2b6      	uxthmi	r6, r6
 800729a:	e7e6      	b.n	800726a <_printf_i+0x182>
 800729c:	4615      	mov	r5, r2
 800729e:	e7bb      	b.n	8007218 <_printf_i+0x130>
 80072a0:	682b      	ldr	r3, [r5, #0]
 80072a2:	6826      	ldr	r6, [r4, #0]
 80072a4:	6961      	ldr	r1, [r4, #20]
 80072a6:	1d18      	adds	r0, r3, #4
 80072a8:	6028      	str	r0, [r5, #0]
 80072aa:	0635      	lsls	r5, r6, #24
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	d501      	bpl.n	80072b4 <_printf_i+0x1cc>
 80072b0:	6019      	str	r1, [r3, #0]
 80072b2:	e002      	b.n	80072ba <_printf_i+0x1d2>
 80072b4:	0670      	lsls	r0, r6, #25
 80072b6:	d5fb      	bpl.n	80072b0 <_printf_i+0x1c8>
 80072b8:	8019      	strh	r1, [r3, #0]
 80072ba:	2300      	movs	r3, #0
 80072bc:	6123      	str	r3, [r4, #16]
 80072be:	4615      	mov	r5, r2
 80072c0:	e7ba      	b.n	8007238 <_printf_i+0x150>
 80072c2:	682b      	ldr	r3, [r5, #0]
 80072c4:	1d1a      	adds	r2, r3, #4
 80072c6:	602a      	str	r2, [r5, #0]
 80072c8:	681d      	ldr	r5, [r3, #0]
 80072ca:	6862      	ldr	r2, [r4, #4]
 80072cc:	2100      	movs	r1, #0
 80072ce:	4628      	mov	r0, r5
 80072d0:	f7f8 ff86 	bl	80001e0 <memchr>
 80072d4:	b108      	cbz	r0, 80072da <_printf_i+0x1f2>
 80072d6:	1b40      	subs	r0, r0, r5
 80072d8:	6060      	str	r0, [r4, #4]
 80072da:	6863      	ldr	r3, [r4, #4]
 80072dc:	6123      	str	r3, [r4, #16]
 80072de:	2300      	movs	r3, #0
 80072e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072e4:	e7a8      	b.n	8007238 <_printf_i+0x150>
 80072e6:	6923      	ldr	r3, [r4, #16]
 80072e8:	462a      	mov	r2, r5
 80072ea:	4649      	mov	r1, r9
 80072ec:	4640      	mov	r0, r8
 80072ee:	47d0      	blx	sl
 80072f0:	3001      	adds	r0, #1
 80072f2:	d0ab      	beq.n	800724c <_printf_i+0x164>
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	079b      	lsls	r3, r3, #30
 80072f8:	d413      	bmi.n	8007322 <_printf_i+0x23a>
 80072fa:	68e0      	ldr	r0, [r4, #12]
 80072fc:	9b03      	ldr	r3, [sp, #12]
 80072fe:	4298      	cmp	r0, r3
 8007300:	bfb8      	it	lt
 8007302:	4618      	movlt	r0, r3
 8007304:	e7a4      	b.n	8007250 <_printf_i+0x168>
 8007306:	2301      	movs	r3, #1
 8007308:	4632      	mov	r2, r6
 800730a:	4649      	mov	r1, r9
 800730c:	4640      	mov	r0, r8
 800730e:	47d0      	blx	sl
 8007310:	3001      	adds	r0, #1
 8007312:	d09b      	beq.n	800724c <_printf_i+0x164>
 8007314:	3501      	adds	r5, #1
 8007316:	68e3      	ldr	r3, [r4, #12]
 8007318:	9903      	ldr	r1, [sp, #12]
 800731a:	1a5b      	subs	r3, r3, r1
 800731c:	42ab      	cmp	r3, r5
 800731e:	dcf2      	bgt.n	8007306 <_printf_i+0x21e>
 8007320:	e7eb      	b.n	80072fa <_printf_i+0x212>
 8007322:	2500      	movs	r5, #0
 8007324:	f104 0619 	add.w	r6, r4, #25
 8007328:	e7f5      	b.n	8007316 <_printf_i+0x22e>
 800732a:	bf00      	nop
 800732c:	0800b256 	.word	0x0800b256
 8007330:	0800b267 	.word	0x0800b267

08007334 <_scanf_float>:
 8007334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007338:	b087      	sub	sp, #28
 800733a:	4617      	mov	r7, r2
 800733c:	9303      	str	r3, [sp, #12]
 800733e:	688b      	ldr	r3, [r1, #8]
 8007340:	1e5a      	subs	r2, r3, #1
 8007342:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007346:	bf83      	ittte	hi
 8007348:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800734c:	195b      	addhi	r3, r3, r5
 800734e:	9302      	strhi	r3, [sp, #8]
 8007350:	2300      	movls	r3, #0
 8007352:	bf86      	itte	hi
 8007354:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007358:	608b      	strhi	r3, [r1, #8]
 800735a:	9302      	strls	r3, [sp, #8]
 800735c:	680b      	ldr	r3, [r1, #0]
 800735e:	468b      	mov	fp, r1
 8007360:	2500      	movs	r5, #0
 8007362:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007366:	f84b 3b1c 	str.w	r3, [fp], #28
 800736a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800736e:	4680      	mov	r8, r0
 8007370:	460c      	mov	r4, r1
 8007372:	465e      	mov	r6, fp
 8007374:	46aa      	mov	sl, r5
 8007376:	46a9      	mov	r9, r5
 8007378:	9501      	str	r5, [sp, #4]
 800737a:	68a2      	ldr	r2, [r4, #8]
 800737c:	b152      	cbz	r2, 8007394 <_scanf_float+0x60>
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	2b4e      	cmp	r3, #78	; 0x4e
 8007384:	d864      	bhi.n	8007450 <_scanf_float+0x11c>
 8007386:	2b40      	cmp	r3, #64	; 0x40
 8007388:	d83c      	bhi.n	8007404 <_scanf_float+0xd0>
 800738a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800738e:	b2c8      	uxtb	r0, r1
 8007390:	280e      	cmp	r0, #14
 8007392:	d93a      	bls.n	800740a <_scanf_float+0xd6>
 8007394:	f1b9 0f00 	cmp.w	r9, #0
 8007398:	d003      	beq.n	80073a2 <_scanf_float+0x6e>
 800739a:	6823      	ldr	r3, [r4, #0]
 800739c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073a0:	6023      	str	r3, [r4, #0]
 80073a2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80073a6:	f1ba 0f01 	cmp.w	sl, #1
 80073aa:	f200 8113 	bhi.w	80075d4 <_scanf_float+0x2a0>
 80073ae:	455e      	cmp	r6, fp
 80073b0:	f200 8105 	bhi.w	80075be <_scanf_float+0x28a>
 80073b4:	2501      	movs	r5, #1
 80073b6:	4628      	mov	r0, r5
 80073b8:	b007      	add	sp, #28
 80073ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073be:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80073c2:	2a0d      	cmp	r2, #13
 80073c4:	d8e6      	bhi.n	8007394 <_scanf_float+0x60>
 80073c6:	a101      	add	r1, pc, #4	; (adr r1, 80073cc <_scanf_float+0x98>)
 80073c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80073cc:	0800750b 	.word	0x0800750b
 80073d0:	08007395 	.word	0x08007395
 80073d4:	08007395 	.word	0x08007395
 80073d8:	08007395 	.word	0x08007395
 80073dc:	0800756b 	.word	0x0800756b
 80073e0:	08007543 	.word	0x08007543
 80073e4:	08007395 	.word	0x08007395
 80073e8:	08007395 	.word	0x08007395
 80073ec:	08007519 	.word	0x08007519
 80073f0:	08007395 	.word	0x08007395
 80073f4:	08007395 	.word	0x08007395
 80073f8:	08007395 	.word	0x08007395
 80073fc:	08007395 	.word	0x08007395
 8007400:	080074d1 	.word	0x080074d1
 8007404:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007408:	e7db      	b.n	80073c2 <_scanf_float+0x8e>
 800740a:	290e      	cmp	r1, #14
 800740c:	d8c2      	bhi.n	8007394 <_scanf_float+0x60>
 800740e:	a001      	add	r0, pc, #4	; (adr r0, 8007414 <_scanf_float+0xe0>)
 8007410:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007414:	080074c3 	.word	0x080074c3
 8007418:	08007395 	.word	0x08007395
 800741c:	080074c3 	.word	0x080074c3
 8007420:	08007557 	.word	0x08007557
 8007424:	08007395 	.word	0x08007395
 8007428:	08007471 	.word	0x08007471
 800742c:	080074ad 	.word	0x080074ad
 8007430:	080074ad 	.word	0x080074ad
 8007434:	080074ad 	.word	0x080074ad
 8007438:	080074ad 	.word	0x080074ad
 800743c:	080074ad 	.word	0x080074ad
 8007440:	080074ad 	.word	0x080074ad
 8007444:	080074ad 	.word	0x080074ad
 8007448:	080074ad 	.word	0x080074ad
 800744c:	080074ad 	.word	0x080074ad
 8007450:	2b6e      	cmp	r3, #110	; 0x6e
 8007452:	d809      	bhi.n	8007468 <_scanf_float+0x134>
 8007454:	2b60      	cmp	r3, #96	; 0x60
 8007456:	d8b2      	bhi.n	80073be <_scanf_float+0x8a>
 8007458:	2b54      	cmp	r3, #84	; 0x54
 800745a:	d077      	beq.n	800754c <_scanf_float+0x218>
 800745c:	2b59      	cmp	r3, #89	; 0x59
 800745e:	d199      	bne.n	8007394 <_scanf_float+0x60>
 8007460:	2d07      	cmp	r5, #7
 8007462:	d197      	bne.n	8007394 <_scanf_float+0x60>
 8007464:	2508      	movs	r5, #8
 8007466:	e029      	b.n	80074bc <_scanf_float+0x188>
 8007468:	2b74      	cmp	r3, #116	; 0x74
 800746a:	d06f      	beq.n	800754c <_scanf_float+0x218>
 800746c:	2b79      	cmp	r3, #121	; 0x79
 800746e:	e7f6      	b.n	800745e <_scanf_float+0x12a>
 8007470:	6821      	ldr	r1, [r4, #0]
 8007472:	05c8      	lsls	r0, r1, #23
 8007474:	d51a      	bpl.n	80074ac <_scanf_float+0x178>
 8007476:	9b02      	ldr	r3, [sp, #8]
 8007478:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800747c:	6021      	str	r1, [r4, #0]
 800747e:	f109 0901 	add.w	r9, r9, #1
 8007482:	b11b      	cbz	r3, 800748c <_scanf_float+0x158>
 8007484:	3b01      	subs	r3, #1
 8007486:	3201      	adds	r2, #1
 8007488:	9302      	str	r3, [sp, #8]
 800748a:	60a2      	str	r2, [r4, #8]
 800748c:	68a3      	ldr	r3, [r4, #8]
 800748e:	3b01      	subs	r3, #1
 8007490:	60a3      	str	r3, [r4, #8]
 8007492:	6923      	ldr	r3, [r4, #16]
 8007494:	3301      	adds	r3, #1
 8007496:	6123      	str	r3, [r4, #16]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	3b01      	subs	r3, #1
 800749c:	2b00      	cmp	r3, #0
 800749e:	607b      	str	r3, [r7, #4]
 80074a0:	f340 8084 	ble.w	80075ac <_scanf_float+0x278>
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	3301      	adds	r3, #1
 80074a8:	603b      	str	r3, [r7, #0]
 80074aa:	e766      	b.n	800737a <_scanf_float+0x46>
 80074ac:	eb1a 0f05 	cmn.w	sl, r5
 80074b0:	f47f af70 	bne.w	8007394 <_scanf_float+0x60>
 80074b4:	6822      	ldr	r2, [r4, #0]
 80074b6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80074ba:	6022      	str	r2, [r4, #0]
 80074bc:	f806 3b01 	strb.w	r3, [r6], #1
 80074c0:	e7e4      	b.n	800748c <_scanf_float+0x158>
 80074c2:	6822      	ldr	r2, [r4, #0]
 80074c4:	0610      	lsls	r0, r2, #24
 80074c6:	f57f af65 	bpl.w	8007394 <_scanf_float+0x60>
 80074ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074ce:	e7f4      	b.n	80074ba <_scanf_float+0x186>
 80074d0:	f1ba 0f00 	cmp.w	sl, #0
 80074d4:	d10e      	bne.n	80074f4 <_scanf_float+0x1c0>
 80074d6:	f1b9 0f00 	cmp.w	r9, #0
 80074da:	d10e      	bne.n	80074fa <_scanf_float+0x1c6>
 80074dc:	6822      	ldr	r2, [r4, #0]
 80074de:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80074e2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80074e6:	d108      	bne.n	80074fa <_scanf_float+0x1c6>
 80074e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80074ec:	6022      	str	r2, [r4, #0]
 80074ee:	f04f 0a01 	mov.w	sl, #1
 80074f2:	e7e3      	b.n	80074bc <_scanf_float+0x188>
 80074f4:	f1ba 0f02 	cmp.w	sl, #2
 80074f8:	d055      	beq.n	80075a6 <_scanf_float+0x272>
 80074fa:	2d01      	cmp	r5, #1
 80074fc:	d002      	beq.n	8007504 <_scanf_float+0x1d0>
 80074fe:	2d04      	cmp	r5, #4
 8007500:	f47f af48 	bne.w	8007394 <_scanf_float+0x60>
 8007504:	3501      	adds	r5, #1
 8007506:	b2ed      	uxtb	r5, r5
 8007508:	e7d8      	b.n	80074bc <_scanf_float+0x188>
 800750a:	f1ba 0f01 	cmp.w	sl, #1
 800750e:	f47f af41 	bne.w	8007394 <_scanf_float+0x60>
 8007512:	f04f 0a02 	mov.w	sl, #2
 8007516:	e7d1      	b.n	80074bc <_scanf_float+0x188>
 8007518:	b97d      	cbnz	r5, 800753a <_scanf_float+0x206>
 800751a:	f1b9 0f00 	cmp.w	r9, #0
 800751e:	f47f af3c 	bne.w	800739a <_scanf_float+0x66>
 8007522:	6822      	ldr	r2, [r4, #0]
 8007524:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007528:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800752c:	f47f af39 	bne.w	80073a2 <_scanf_float+0x6e>
 8007530:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007534:	6022      	str	r2, [r4, #0]
 8007536:	2501      	movs	r5, #1
 8007538:	e7c0      	b.n	80074bc <_scanf_float+0x188>
 800753a:	2d03      	cmp	r5, #3
 800753c:	d0e2      	beq.n	8007504 <_scanf_float+0x1d0>
 800753e:	2d05      	cmp	r5, #5
 8007540:	e7de      	b.n	8007500 <_scanf_float+0x1cc>
 8007542:	2d02      	cmp	r5, #2
 8007544:	f47f af26 	bne.w	8007394 <_scanf_float+0x60>
 8007548:	2503      	movs	r5, #3
 800754a:	e7b7      	b.n	80074bc <_scanf_float+0x188>
 800754c:	2d06      	cmp	r5, #6
 800754e:	f47f af21 	bne.w	8007394 <_scanf_float+0x60>
 8007552:	2507      	movs	r5, #7
 8007554:	e7b2      	b.n	80074bc <_scanf_float+0x188>
 8007556:	6822      	ldr	r2, [r4, #0]
 8007558:	0591      	lsls	r1, r2, #22
 800755a:	f57f af1b 	bpl.w	8007394 <_scanf_float+0x60>
 800755e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007562:	6022      	str	r2, [r4, #0]
 8007564:	f8cd 9004 	str.w	r9, [sp, #4]
 8007568:	e7a8      	b.n	80074bc <_scanf_float+0x188>
 800756a:	6822      	ldr	r2, [r4, #0]
 800756c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007570:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007574:	d006      	beq.n	8007584 <_scanf_float+0x250>
 8007576:	0550      	lsls	r0, r2, #21
 8007578:	f57f af0c 	bpl.w	8007394 <_scanf_float+0x60>
 800757c:	f1b9 0f00 	cmp.w	r9, #0
 8007580:	f43f af0f 	beq.w	80073a2 <_scanf_float+0x6e>
 8007584:	0591      	lsls	r1, r2, #22
 8007586:	bf58      	it	pl
 8007588:	9901      	ldrpl	r1, [sp, #4]
 800758a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800758e:	bf58      	it	pl
 8007590:	eba9 0101 	subpl.w	r1, r9, r1
 8007594:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007598:	bf58      	it	pl
 800759a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800759e:	6022      	str	r2, [r4, #0]
 80075a0:	f04f 0900 	mov.w	r9, #0
 80075a4:	e78a      	b.n	80074bc <_scanf_float+0x188>
 80075a6:	f04f 0a03 	mov.w	sl, #3
 80075aa:	e787      	b.n	80074bc <_scanf_float+0x188>
 80075ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80075b0:	4639      	mov	r1, r7
 80075b2:	4640      	mov	r0, r8
 80075b4:	4798      	blx	r3
 80075b6:	2800      	cmp	r0, #0
 80075b8:	f43f aedf 	beq.w	800737a <_scanf_float+0x46>
 80075bc:	e6ea      	b.n	8007394 <_scanf_float+0x60>
 80075be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075c6:	463a      	mov	r2, r7
 80075c8:	4640      	mov	r0, r8
 80075ca:	4798      	blx	r3
 80075cc:	6923      	ldr	r3, [r4, #16]
 80075ce:	3b01      	subs	r3, #1
 80075d0:	6123      	str	r3, [r4, #16]
 80075d2:	e6ec      	b.n	80073ae <_scanf_float+0x7a>
 80075d4:	1e6b      	subs	r3, r5, #1
 80075d6:	2b06      	cmp	r3, #6
 80075d8:	d825      	bhi.n	8007626 <_scanf_float+0x2f2>
 80075da:	2d02      	cmp	r5, #2
 80075dc:	d836      	bhi.n	800764c <_scanf_float+0x318>
 80075de:	455e      	cmp	r6, fp
 80075e0:	f67f aee8 	bls.w	80073b4 <_scanf_float+0x80>
 80075e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075e8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075ec:	463a      	mov	r2, r7
 80075ee:	4640      	mov	r0, r8
 80075f0:	4798      	blx	r3
 80075f2:	6923      	ldr	r3, [r4, #16]
 80075f4:	3b01      	subs	r3, #1
 80075f6:	6123      	str	r3, [r4, #16]
 80075f8:	e7f1      	b.n	80075de <_scanf_float+0x2aa>
 80075fa:	9802      	ldr	r0, [sp, #8]
 80075fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007600:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007604:	9002      	str	r0, [sp, #8]
 8007606:	463a      	mov	r2, r7
 8007608:	4640      	mov	r0, r8
 800760a:	4798      	blx	r3
 800760c:	6923      	ldr	r3, [r4, #16]
 800760e:	3b01      	subs	r3, #1
 8007610:	6123      	str	r3, [r4, #16]
 8007612:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007616:	fa5f fa8a 	uxtb.w	sl, sl
 800761a:	f1ba 0f02 	cmp.w	sl, #2
 800761e:	d1ec      	bne.n	80075fa <_scanf_float+0x2c6>
 8007620:	3d03      	subs	r5, #3
 8007622:	b2ed      	uxtb	r5, r5
 8007624:	1b76      	subs	r6, r6, r5
 8007626:	6823      	ldr	r3, [r4, #0]
 8007628:	05da      	lsls	r2, r3, #23
 800762a:	d52f      	bpl.n	800768c <_scanf_float+0x358>
 800762c:	055b      	lsls	r3, r3, #21
 800762e:	d510      	bpl.n	8007652 <_scanf_float+0x31e>
 8007630:	455e      	cmp	r6, fp
 8007632:	f67f aebf 	bls.w	80073b4 <_scanf_float+0x80>
 8007636:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800763a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800763e:	463a      	mov	r2, r7
 8007640:	4640      	mov	r0, r8
 8007642:	4798      	blx	r3
 8007644:	6923      	ldr	r3, [r4, #16]
 8007646:	3b01      	subs	r3, #1
 8007648:	6123      	str	r3, [r4, #16]
 800764a:	e7f1      	b.n	8007630 <_scanf_float+0x2fc>
 800764c:	46aa      	mov	sl, r5
 800764e:	9602      	str	r6, [sp, #8]
 8007650:	e7df      	b.n	8007612 <_scanf_float+0x2de>
 8007652:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007656:	6923      	ldr	r3, [r4, #16]
 8007658:	2965      	cmp	r1, #101	; 0x65
 800765a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800765e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8007662:	6123      	str	r3, [r4, #16]
 8007664:	d00c      	beq.n	8007680 <_scanf_float+0x34c>
 8007666:	2945      	cmp	r1, #69	; 0x45
 8007668:	d00a      	beq.n	8007680 <_scanf_float+0x34c>
 800766a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800766e:	463a      	mov	r2, r7
 8007670:	4640      	mov	r0, r8
 8007672:	4798      	blx	r3
 8007674:	6923      	ldr	r3, [r4, #16]
 8007676:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800767a:	3b01      	subs	r3, #1
 800767c:	1eb5      	subs	r5, r6, #2
 800767e:	6123      	str	r3, [r4, #16]
 8007680:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007684:	463a      	mov	r2, r7
 8007686:	4640      	mov	r0, r8
 8007688:	4798      	blx	r3
 800768a:	462e      	mov	r6, r5
 800768c:	6825      	ldr	r5, [r4, #0]
 800768e:	f015 0510 	ands.w	r5, r5, #16
 8007692:	d159      	bne.n	8007748 <_scanf_float+0x414>
 8007694:	7035      	strb	r5, [r6, #0]
 8007696:	6823      	ldr	r3, [r4, #0]
 8007698:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800769c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076a0:	d11b      	bne.n	80076da <_scanf_float+0x3a6>
 80076a2:	9b01      	ldr	r3, [sp, #4]
 80076a4:	454b      	cmp	r3, r9
 80076a6:	eba3 0209 	sub.w	r2, r3, r9
 80076aa:	d123      	bne.n	80076f4 <_scanf_float+0x3c0>
 80076ac:	2200      	movs	r2, #0
 80076ae:	4659      	mov	r1, fp
 80076b0:	4640      	mov	r0, r8
 80076b2:	f000 ff6b 	bl	800858c <_strtod_r>
 80076b6:	6822      	ldr	r2, [r4, #0]
 80076b8:	9b03      	ldr	r3, [sp, #12]
 80076ba:	f012 0f02 	tst.w	r2, #2
 80076be:	ec57 6b10 	vmov	r6, r7, d0
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	d021      	beq.n	800770a <_scanf_float+0x3d6>
 80076c6:	9903      	ldr	r1, [sp, #12]
 80076c8:	1d1a      	adds	r2, r3, #4
 80076ca:	600a      	str	r2, [r1, #0]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	e9c3 6700 	strd	r6, r7, [r3]
 80076d2:	68e3      	ldr	r3, [r4, #12]
 80076d4:	3301      	adds	r3, #1
 80076d6:	60e3      	str	r3, [r4, #12]
 80076d8:	e66d      	b.n	80073b6 <_scanf_float+0x82>
 80076da:	9b04      	ldr	r3, [sp, #16]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d0e5      	beq.n	80076ac <_scanf_float+0x378>
 80076e0:	9905      	ldr	r1, [sp, #20]
 80076e2:	230a      	movs	r3, #10
 80076e4:	462a      	mov	r2, r5
 80076e6:	3101      	adds	r1, #1
 80076e8:	4640      	mov	r0, r8
 80076ea:	f000 ffd7 	bl	800869c <_strtol_r>
 80076ee:	9b04      	ldr	r3, [sp, #16]
 80076f0:	9e05      	ldr	r6, [sp, #20]
 80076f2:	1ac2      	subs	r2, r0, r3
 80076f4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80076f8:	429e      	cmp	r6, r3
 80076fa:	bf28      	it	cs
 80076fc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007700:	4912      	ldr	r1, [pc, #72]	; (800774c <_scanf_float+0x418>)
 8007702:	4630      	mov	r0, r6
 8007704:	f000 f8a6 	bl	8007854 <siprintf>
 8007708:	e7d0      	b.n	80076ac <_scanf_float+0x378>
 800770a:	9903      	ldr	r1, [sp, #12]
 800770c:	f012 0f04 	tst.w	r2, #4
 8007710:	f103 0204 	add.w	r2, r3, #4
 8007714:	600a      	str	r2, [r1, #0]
 8007716:	d1d9      	bne.n	80076cc <_scanf_float+0x398>
 8007718:	f8d3 8000 	ldr.w	r8, [r3]
 800771c:	ee10 2a10 	vmov	r2, s0
 8007720:	ee10 0a10 	vmov	r0, s0
 8007724:	463b      	mov	r3, r7
 8007726:	4639      	mov	r1, r7
 8007728:	f7f9 fa00 	bl	8000b2c <__aeabi_dcmpun>
 800772c:	b128      	cbz	r0, 800773a <_scanf_float+0x406>
 800772e:	4808      	ldr	r0, [pc, #32]	; (8007750 <_scanf_float+0x41c>)
 8007730:	f000 f88a 	bl	8007848 <nanf>
 8007734:	ed88 0a00 	vstr	s0, [r8]
 8007738:	e7cb      	b.n	80076d2 <_scanf_float+0x39e>
 800773a:	4630      	mov	r0, r6
 800773c:	4639      	mov	r1, r7
 800773e:	f7f9 fa53 	bl	8000be8 <__aeabi_d2f>
 8007742:	f8c8 0000 	str.w	r0, [r8]
 8007746:	e7c4      	b.n	80076d2 <_scanf_float+0x39e>
 8007748:	2500      	movs	r5, #0
 800774a:	e634      	b.n	80073b6 <_scanf_float+0x82>
 800774c:	0800b278 	.word	0x0800b278
 8007750:	0800b680 	.word	0x0800b680

08007754 <cleanup_glue>:
 8007754:	b538      	push	{r3, r4, r5, lr}
 8007756:	460c      	mov	r4, r1
 8007758:	6809      	ldr	r1, [r1, #0]
 800775a:	4605      	mov	r5, r0
 800775c:	b109      	cbz	r1, 8007762 <cleanup_glue+0xe>
 800775e:	f7ff fff9 	bl	8007754 <cleanup_glue>
 8007762:	4621      	mov	r1, r4
 8007764:	4628      	mov	r0, r5
 8007766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800776a:	f7ff b899 	b.w	80068a0 <_free_r>
	...

08007770 <_reclaim_reent>:
 8007770:	4b2c      	ldr	r3, [pc, #176]	; (8007824 <_reclaim_reent+0xb4>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4283      	cmp	r3, r0
 8007776:	b570      	push	{r4, r5, r6, lr}
 8007778:	4604      	mov	r4, r0
 800777a:	d051      	beq.n	8007820 <_reclaim_reent+0xb0>
 800777c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800777e:	b143      	cbz	r3, 8007792 <_reclaim_reent+0x22>
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d14a      	bne.n	800781c <_reclaim_reent+0xac>
 8007786:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007788:	6819      	ldr	r1, [r3, #0]
 800778a:	b111      	cbz	r1, 8007792 <_reclaim_reent+0x22>
 800778c:	4620      	mov	r0, r4
 800778e:	f7ff f887 	bl	80068a0 <_free_r>
 8007792:	6961      	ldr	r1, [r4, #20]
 8007794:	b111      	cbz	r1, 800779c <_reclaim_reent+0x2c>
 8007796:	4620      	mov	r0, r4
 8007798:	f7ff f882 	bl	80068a0 <_free_r>
 800779c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800779e:	b111      	cbz	r1, 80077a6 <_reclaim_reent+0x36>
 80077a0:	4620      	mov	r0, r4
 80077a2:	f7ff f87d 	bl	80068a0 <_free_r>
 80077a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80077a8:	b111      	cbz	r1, 80077b0 <_reclaim_reent+0x40>
 80077aa:	4620      	mov	r0, r4
 80077ac:	f7ff f878 	bl	80068a0 <_free_r>
 80077b0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80077b2:	b111      	cbz	r1, 80077ba <_reclaim_reent+0x4a>
 80077b4:	4620      	mov	r0, r4
 80077b6:	f7ff f873 	bl	80068a0 <_free_r>
 80077ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80077bc:	b111      	cbz	r1, 80077c4 <_reclaim_reent+0x54>
 80077be:	4620      	mov	r0, r4
 80077c0:	f7ff f86e 	bl	80068a0 <_free_r>
 80077c4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80077c6:	b111      	cbz	r1, 80077ce <_reclaim_reent+0x5e>
 80077c8:	4620      	mov	r0, r4
 80077ca:	f7ff f869 	bl	80068a0 <_free_r>
 80077ce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80077d0:	b111      	cbz	r1, 80077d8 <_reclaim_reent+0x68>
 80077d2:	4620      	mov	r0, r4
 80077d4:	f7ff f864 	bl	80068a0 <_free_r>
 80077d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077da:	b111      	cbz	r1, 80077e2 <_reclaim_reent+0x72>
 80077dc:	4620      	mov	r0, r4
 80077de:	f7ff f85f 	bl	80068a0 <_free_r>
 80077e2:	69a3      	ldr	r3, [r4, #24]
 80077e4:	b1e3      	cbz	r3, 8007820 <_reclaim_reent+0xb0>
 80077e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80077e8:	4620      	mov	r0, r4
 80077ea:	4798      	blx	r3
 80077ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80077ee:	b1b9      	cbz	r1, 8007820 <_reclaim_reent+0xb0>
 80077f0:	4620      	mov	r0, r4
 80077f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80077f6:	f7ff bfad 	b.w	8007754 <cleanup_glue>
 80077fa:	5949      	ldr	r1, [r1, r5]
 80077fc:	b941      	cbnz	r1, 8007810 <_reclaim_reent+0xa0>
 80077fe:	3504      	adds	r5, #4
 8007800:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007802:	2d80      	cmp	r5, #128	; 0x80
 8007804:	68d9      	ldr	r1, [r3, #12]
 8007806:	d1f8      	bne.n	80077fa <_reclaim_reent+0x8a>
 8007808:	4620      	mov	r0, r4
 800780a:	f7ff f849 	bl	80068a0 <_free_r>
 800780e:	e7ba      	b.n	8007786 <_reclaim_reent+0x16>
 8007810:	680e      	ldr	r6, [r1, #0]
 8007812:	4620      	mov	r0, r4
 8007814:	f7ff f844 	bl	80068a0 <_free_r>
 8007818:	4631      	mov	r1, r6
 800781a:	e7ef      	b.n	80077fc <_reclaim_reent+0x8c>
 800781c:	2500      	movs	r5, #0
 800781e:	e7ef      	b.n	8007800 <_reclaim_reent+0x90>
 8007820:	bd70      	pop	{r4, r5, r6, pc}
 8007822:	bf00      	nop
 8007824:	20000010 	.word	0x20000010

08007828 <_sbrk_r>:
 8007828:	b538      	push	{r3, r4, r5, lr}
 800782a:	4d06      	ldr	r5, [pc, #24]	; (8007844 <_sbrk_r+0x1c>)
 800782c:	2300      	movs	r3, #0
 800782e:	4604      	mov	r4, r0
 8007830:	4608      	mov	r0, r1
 8007832:	602b      	str	r3, [r5, #0]
 8007834:	f7f9 ff36 	bl	80016a4 <_sbrk>
 8007838:	1c43      	adds	r3, r0, #1
 800783a:	d102      	bne.n	8007842 <_sbrk_r+0x1a>
 800783c:	682b      	ldr	r3, [r5, #0]
 800783e:	b103      	cbz	r3, 8007842 <_sbrk_r+0x1a>
 8007840:	6023      	str	r3, [r4, #0]
 8007842:	bd38      	pop	{r3, r4, r5, pc}
 8007844:	200047fc 	.word	0x200047fc

08007848 <nanf>:
 8007848:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007850 <nanf+0x8>
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop
 8007850:	7fc00000 	.word	0x7fc00000

08007854 <siprintf>:
 8007854:	b40e      	push	{r1, r2, r3}
 8007856:	b500      	push	{lr}
 8007858:	b09c      	sub	sp, #112	; 0x70
 800785a:	ab1d      	add	r3, sp, #116	; 0x74
 800785c:	9002      	str	r0, [sp, #8]
 800785e:	9006      	str	r0, [sp, #24]
 8007860:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007864:	4809      	ldr	r0, [pc, #36]	; (800788c <siprintf+0x38>)
 8007866:	9107      	str	r1, [sp, #28]
 8007868:	9104      	str	r1, [sp, #16]
 800786a:	4909      	ldr	r1, [pc, #36]	; (8007890 <siprintf+0x3c>)
 800786c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007870:	9105      	str	r1, [sp, #20]
 8007872:	6800      	ldr	r0, [r0, #0]
 8007874:	9301      	str	r3, [sp, #4]
 8007876:	a902      	add	r1, sp, #8
 8007878:	f002 ff48 	bl	800a70c <_svfiprintf_r>
 800787c:	9b02      	ldr	r3, [sp, #8]
 800787e:	2200      	movs	r2, #0
 8007880:	701a      	strb	r2, [r3, #0]
 8007882:	b01c      	add	sp, #112	; 0x70
 8007884:	f85d eb04 	ldr.w	lr, [sp], #4
 8007888:	b003      	add	sp, #12
 800788a:	4770      	bx	lr
 800788c:	20000010 	.word	0x20000010
 8007890:	ffff0208 	.word	0xffff0208

08007894 <__sread>:
 8007894:	b510      	push	{r4, lr}
 8007896:	460c      	mov	r4, r1
 8007898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800789c:	f003 f836 	bl	800a90c <_read_r>
 80078a0:	2800      	cmp	r0, #0
 80078a2:	bfab      	itete	ge
 80078a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80078a6:	89a3      	ldrhlt	r3, [r4, #12]
 80078a8:	181b      	addge	r3, r3, r0
 80078aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80078ae:	bfac      	ite	ge
 80078b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80078b2:	81a3      	strhlt	r3, [r4, #12]
 80078b4:	bd10      	pop	{r4, pc}

080078b6 <__swrite>:
 80078b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078ba:	461f      	mov	r7, r3
 80078bc:	898b      	ldrh	r3, [r1, #12]
 80078be:	05db      	lsls	r3, r3, #23
 80078c0:	4605      	mov	r5, r0
 80078c2:	460c      	mov	r4, r1
 80078c4:	4616      	mov	r6, r2
 80078c6:	d505      	bpl.n	80078d4 <__swrite+0x1e>
 80078c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078cc:	2302      	movs	r3, #2
 80078ce:	2200      	movs	r2, #0
 80078d0:	f002 f9ba 	bl	8009c48 <_lseek_r>
 80078d4:	89a3      	ldrh	r3, [r4, #12]
 80078d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078de:	81a3      	strh	r3, [r4, #12]
 80078e0:	4632      	mov	r2, r6
 80078e2:	463b      	mov	r3, r7
 80078e4:	4628      	mov	r0, r5
 80078e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078ea:	f000 bed9 	b.w	80086a0 <_write_r>

080078ee <__sseek>:
 80078ee:	b510      	push	{r4, lr}
 80078f0:	460c      	mov	r4, r1
 80078f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078f6:	f002 f9a7 	bl	8009c48 <_lseek_r>
 80078fa:	1c43      	adds	r3, r0, #1
 80078fc:	89a3      	ldrh	r3, [r4, #12]
 80078fe:	bf15      	itete	ne
 8007900:	6560      	strne	r0, [r4, #84]	; 0x54
 8007902:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007906:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800790a:	81a3      	strheq	r3, [r4, #12]
 800790c:	bf18      	it	ne
 800790e:	81a3      	strhne	r3, [r4, #12]
 8007910:	bd10      	pop	{r4, pc}

08007912 <__sclose>:
 8007912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007916:	f000 bed5 	b.w	80086c4 <_close_r>

0800791a <strncmp>:
 800791a:	b510      	push	{r4, lr}
 800791c:	b17a      	cbz	r2, 800793e <strncmp+0x24>
 800791e:	4603      	mov	r3, r0
 8007920:	3901      	subs	r1, #1
 8007922:	1884      	adds	r4, r0, r2
 8007924:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007928:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800792c:	4290      	cmp	r0, r2
 800792e:	d101      	bne.n	8007934 <strncmp+0x1a>
 8007930:	42a3      	cmp	r3, r4
 8007932:	d101      	bne.n	8007938 <strncmp+0x1e>
 8007934:	1a80      	subs	r0, r0, r2
 8007936:	bd10      	pop	{r4, pc}
 8007938:	2800      	cmp	r0, #0
 800793a:	d1f3      	bne.n	8007924 <strncmp+0xa>
 800793c:	e7fa      	b.n	8007934 <strncmp+0x1a>
 800793e:	4610      	mov	r0, r2
 8007940:	e7f9      	b.n	8007936 <strncmp+0x1c>

08007942 <sulp>:
 8007942:	b570      	push	{r4, r5, r6, lr}
 8007944:	4604      	mov	r4, r0
 8007946:	460d      	mov	r5, r1
 8007948:	ec45 4b10 	vmov	d0, r4, r5
 800794c:	4616      	mov	r6, r2
 800794e:	f002 fd1d 	bl	800a38c <__ulp>
 8007952:	ec51 0b10 	vmov	r0, r1, d0
 8007956:	b17e      	cbz	r6, 8007978 <sulp+0x36>
 8007958:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800795c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007960:	2b00      	cmp	r3, #0
 8007962:	dd09      	ble.n	8007978 <sulp+0x36>
 8007964:	051b      	lsls	r3, r3, #20
 8007966:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800796a:	2400      	movs	r4, #0
 800796c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007970:	4622      	mov	r2, r4
 8007972:	462b      	mov	r3, r5
 8007974:	f7f8 fe40 	bl	80005f8 <__aeabi_dmul>
 8007978:	bd70      	pop	{r4, r5, r6, pc}
 800797a:	0000      	movs	r0, r0
 800797c:	0000      	movs	r0, r0
	...

08007980 <_strtod_l>:
 8007980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007984:	ed2d 8b02 	vpush	{d8}
 8007988:	b09d      	sub	sp, #116	; 0x74
 800798a:	461f      	mov	r7, r3
 800798c:	2300      	movs	r3, #0
 800798e:	9318      	str	r3, [sp, #96]	; 0x60
 8007990:	4ba2      	ldr	r3, [pc, #648]	; (8007c1c <_strtod_l+0x29c>)
 8007992:	9213      	str	r2, [sp, #76]	; 0x4c
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	9305      	str	r3, [sp, #20]
 8007998:	4604      	mov	r4, r0
 800799a:	4618      	mov	r0, r3
 800799c:	4688      	mov	r8, r1
 800799e:	f7f8 fc17 	bl	80001d0 <strlen>
 80079a2:	f04f 0a00 	mov.w	sl, #0
 80079a6:	4605      	mov	r5, r0
 80079a8:	f04f 0b00 	mov.w	fp, #0
 80079ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80079b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80079b2:	781a      	ldrb	r2, [r3, #0]
 80079b4:	2a2b      	cmp	r2, #43	; 0x2b
 80079b6:	d04e      	beq.n	8007a56 <_strtod_l+0xd6>
 80079b8:	d83b      	bhi.n	8007a32 <_strtod_l+0xb2>
 80079ba:	2a0d      	cmp	r2, #13
 80079bc:	d834      	bhi.n	8007a28 <_strtod_l+0xa8>
 80079be:	2a08      	cmp	r2, #8
 80079c0:	d834      	bhi.n	8007a2c <_strtod_l+0xac>
 80079c2:	2a00      	cmp	r2, #0
 80079c4:	d03e      	beq.n	8007a44 <_strtod_l+0xc4>
 80079c6:	2300      	movs	r3, #0
 80079c8:	930a      	str	r3, [sp, #40]	; 0x28
 80079ca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80079cc:	7833      	ldrb	r3, [r6, #0]
 80079ce:	2b30      	cmp	r3, #48	; 0x30
 80079d0:	f040 80b0 	bne.w	8007b34 <_strtod_l+0x1b4>
 80079d4:	7873      	ldrb	r3, [r6, #1]
 80079d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80079da:	2b58      	cmp	r3, #88	; 0x58
 80079dc:	d168      	bne.n	8007ab0 <_strtod_l+0x130>
 80079de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079e0:	9301      	str	r3, [sp, #4]
 80079e2:	ab18      	add	r3, sp, #96	; 0x60
 80079e4:	9702      	str	r7, [sp, #8]
 80079e6:	9300      	str	r3, [sp, #0]
 80079e8:	4a8d      	ldr	r2, [pc, #564]	; (8007c20 <_strtod_l+0x2a0>)
 80079ea:	ab19      	add	r3, sp, #100	; 0x64
 80079ec:	a917      	add	r1, sp, #92	; 0x5c
 80079ee:	4620      	mov	r0, r4
 80079f0:	f001 fe1e 	bl	8009630 <__gethex>
 80079f4:	f010 0707 	ands.w	r7, r0, #7
 80079f8:	4605      	mov	r5, r0
 80079fa:	d005      	beq.n	8007a08 <_strtod_l+0x88>
 80079fc:	2f06      	cmp	r7, #6
 80079fe:	d12c      	bne.n	8007a5a <_strtod_l+0xda>
 8007a00:	3601      	adds	r6, #1
 8007a02:	2300      	movs	r3, #0
 8007a04:	9617      	str	r6, [sp, #92]	; 0x5c
 8007a06:	930a      	str	r3, [sp, #40]	; 0x28
 8007a08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f040 8590 	bne.w	8008530 <_strtod_l+0xbb0>
 8007a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a12:	b1eb      	cbz	r3, 8007a50 <_strtod_l+0xd0>
 8007a14:	4652      	mov	r2, sl
 8007a16:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007a1a:	ec43 2b10 	vmov	d0, r2, r3
 8007a1e:	b01d      	add	sp, #116	; 0x74
 8007a20:	ecbd 8b02 	vpop	{d8}
 8007a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a28:	2a20      	cmp	r2, #32
 8007a2a:	d1cc      	bne.n	80079c6 <_strtod_l+0x46>
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007a30:	e7be      	b.n	80079b0 <_strtod_l+0x30>
 8007a32:	2a2d      	cmp	r2, #45	; 0x2d
 8007a34:	d1c7      	bne.n	80079c6 <_strtod_l+0x46>
 8007a36:	2201      	movs	r2, #1
 8007a38:	920a      	str	r2, [sp, #40]	; 0x28
 8007a3a:	1c5a      	adds	r2, r3, #1
 8007a3c:	9217      	str	r2, [sp, #92]	; 0x5c
 8007a3e:	785b      	ldrb	r3, [r3, #1]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1c2      	bne.n	80079ca <_strtod_l+0x4a>
 8007a44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007a46:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f040 856e 	bne.w	800852c <_strtod_l+0xbac>
 8007a50:	4652      	mov	r2, sl
 8007a52:	465b      	mov	r3, fp
 8007a54:	e7e1      	b.n	8007a1a <_strtod_l+0x9a>
 8007a56:	2200      	movs	r2, #0
 8007a58:	e7ee      	b.n	8007a38 <_strtod_l+0xb8>
 8007a5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007a5c:	b13a      	cbz	r2, 8007a6e <_strtod_l+0xee>
 8007a5e:	2135      	movs	r1, #53	; 0x35
 8007a60:	a81a      	add	r0, sp, #104	; 0x68
 8007a62:	f002 fd9e 	bl	800a5a2 <__copybits>
 8007a66:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007a68:	4620      	mov	r0, r4
 8007a6a:	f002 f95d 	bl	8009d28 <_Bfree>
 8007a6e:	3f01      	subs	r7, #1
 8007a70:	2f04      	cmp	r7, #4
 8007a72:	d806      	bhi.n	8007a82 <_strtod_l+0x102>
 8007a74:	e8df f007 	tbb	[pc, r7]
 8007a78:	1714030a 	.word	0x1714030a
 8007a7c:	0a          	.byte	0x0a
 8007a7d:	00          	.byte	0x00
 8007a7e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007a82:	0728      	lsls	r0, r5, #28
 8007a84:	d5c0      	bpl.n	8007a08 <_strtod_l+0x88>
 8007a86:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007a8a:	e7bd      	b.n	8007a08 <_strtod_l+0x88>
 8007a8c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007a90:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007a92:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007a96:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007a9a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007a9e:	e7f0      	b.n	8007a82 <_strtod_l+0x102>
 8007aa0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007c24 <_strtod_l+0x2a4>
 8007aa4:	e7ed      	b.n	8007a82 <_strtod_l+0x102>
 8007aa6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007aaa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007aae:	e7e8      	b.n	8007a82 <_strtod_l+0x102>
 8007ab0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ab2:	1c5a      	adds	r2, r3, #1
 8007ab4:	9217      	str	r2, [sp, #92]	; 0x5c
 8007ab6:	785b      	ldrb	r3, [r3, #1]
 8007ab8:	2b30      	cmp	r3, #48	; 0x30
 8007aba:	d0f9      	beq.n	8007ab0 <_strtod_l+0x130>
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d0a3      	beq.n	8007a08 <_strtod_l+0x88>
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	f04f 0900 	mov.w	r9, #0
 8007ac6:	9304      	str	r3, [sp, #16]
 8007ac8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007aca:	9308      	str	r3, [sp, #32]
 8007acc:	f8cd 901c 	str.w	r9, [sp, #28]
 8007ad0:	464f      	mov	r7, r9
 8007ad2:	220a      	movs	r2, #10
 8007ad4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007ad6:	7806      	ldrb	r6, [r0, #0]
 8007ad8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007adc:	b2d9      	uxtb	r1, r3
 8007ade:	2909      	cmp	r1, #9
 8007ae0:	d92a      	bls.n	8007b38 <_strtod_l+0x1b8>
 8007ae2:	9905      	ldr	r1, [sp, #20]
 8007ae4:	462a      	mov	r2, r5
 8007ae6:	f7ff ff18 	bl	800791a <strncmp>
 8007aea:	b398      	cbz	r0, 8007b54 <_strtod_l+0x1d4>
 8007aec:	2000      	movs	r0, #0
 8007aee:	4632      	mov	r2, r6
 8007af0:	463d      	mov	r5, r7
 8007af2:	9005      	str	r0, [sp, #20]
 8007af4:	4603      	mov	r3, r0
 8007af6:	2a65      	cmp	r2, #101	; 0x65
 8007af8:	d001      	beq.n	8007afe <_strtod_l+0x17e>
 8007afa:	2a45      	cmp	r2, #69	; 0x45
 8007afc:	d118      	bne.n	8007b30 <_strtod_l+0x1b0>
 8007afe:	b91d      	cbnz	r5, 8007b08 <_strtod_l+0x188>
 8007b00:	9a04      	ldr	r2, [sp, #16]
 8007b02:	4302      	orrs	r2, r0
 8007b04:	d09e      	beq.n	8007a44 <_strtod_l+0xc4>
 8007b06:	2500      	movs	r5, #0
 8007b08:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007b0c:	f108 0201 	add.w	r2, r8, #1
 8007b10:	9217      	str	r2, [sp, #92]	; 0x5c
 8007b12:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007b16:	2a2b      	cmp	r2, #43	; 0x2b
 8007b18:	d075      	beq.n	8007c06 <_strtod_l+0x286>
 8007b1a:	2a2d      	cmp	r2, #45	; 0x2d
 8007b1c:	d07b      	beq.n	8007c16 <_strtod_l+0x296>
 8007b1e:	f04f 0c00 	mov.w	ip, #0
 8007b22:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007b26:	2909      	cmp	r1, #9
 8007b28:	f240 8082 	bls.w	8007c30 <_strtod_l+0x2b0>
 8007b2c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007b30:	2600      	movs	r6, #0
 8007b32:	e09d      	b.n	8007c70 <_strtod_l+0x2f0>
 8007b34:	2300      	movs	r3, #0
 8007b36:	e7c4      	b.n	8007ac2 <_strtod_l+0x142>
 8007b38:	2f08      	cmp	r7, #8
 8007b3a:	bfd8      	it	le
 8007b3c:	9907      	ldrle	r1, [sp, #28]
 8007b3e:	f100 0001 	add.w	r0, r0, #1
 8007b42:	bfda      	itte	le
 8007b44:	fb02 3301 	mlale	r3, r2, r1, r3
 8007b48:	9307      	strle	r3, [sp, #28]
 8007b4a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007b4e:	3701      	adds	r7, #1
 8007b50:	9017      	str	r0, [sp, #92]	; 0x5c
 8007b52:	e7bf      	b.n	8007ad4 <_strtod_l+0x154>
 8007b54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b56:	195a      	adds	r2, r3, r5
 8007b58:	9217      	str	r2, [sp, #92]	; 0x5c
 8007b5a:	5d5a      	ldrb	r2, [r3, r5]
 8007b5c:	2f00      	cmp	r7, #0
 8007b5e:	d037      	beq.n	8007bd0 <_strtod_l+0x250>
 8007b60:	9005      	str	r0, [sp, #20]
 8007b62:	463d      	mov	r5, r7
 8007b64:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007b68:	2b09      	cmp	r3, #9
 8007b6a:	d912      	bls.n	8007b92 <_strtod_l+0x212>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e7c2      	b.n	8007af6 <_strtod_l+0x176>
 8007b70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b72:	1c5a      	adds	r2, r3, #1
 8007b74:	9217      	str	r2, [sp, #92]	; 0x5c
 8007b76:	785a      	ldrb	r2, [r3, #1]
 8007b78:	3001      	adds	r0, #1
 8007b7a:	2a30      	cmp	r2, #48	; 0x30
 8007b7c:	d0f8      	beq.n	8007b70 <_strtod_l+0x1f0>
 8007b7e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007b82:	2b08      	cmp	r3, #8
 8007b84:	f200 84d9 	bhi.w	800853a <_strtod_l+0xbba>
 8007b88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b8a:	9005      	str	r0, [sp, #20]
 8007b8c:	2000      	movs	r0, #0
 8007b8e:	9308      	str	r3, [sp, #32]
 8007b90:	4605      	mov	r5, r0
 8007b92:	3a30      	subs	r2, #48	; 0x30
 8007b94:	f100 0301 	add.w	r3, r0, #1
 8007b98:	d014      	beq.n	8007bc4 <_strtod_l+0x244>
 8007b9a:	9905      	ldr	r1, [sp, #20]
 8007b9c:	4419      	add	r1, r3
 8007b9e:	9105      	str	r1, [sp, #20]
 8007ba0:	462b      	mov	r3, r5
 8007ba2:	eb00 0e05 	add.w	lr, r0, r5
 8007ba6:	210a      	movs	r1, #10
 8007ba8:	4573      	cmp	r3, lr
 8007baa:	d113      	bne.n	8007bd4 <_strtod_l+0x254>
 8007bac:	182b      	adds	r3, r5, r0
 8007bae:	2b08      	cmp	r3, #8
 8007bb0:	f105 0501 	add.w	r5, r5, #1
 8007bb4:	4405      	add	r5, r0
 8007bb6:	dc1c      	bgt.n	8007bf2 <_strtod_l+0x272>
 8007bb8:	9907      	ldr	r1, [sp, #28]
 8007bba:	230a      	movs	r3, #10
 8007bbc:	fb03 2301 	mla	r3, r3, r1, r2
 8007bc0:	9307      	str	r3, [sp, #28]
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007bc6:	1c51      	adds	r1, r2, #1
 8007bc8:	9117      	str	r1, [sp, #92]	; 0x5c
 8007bca:	7852      	ldrb	r2, [r2, #1]
 8007bcc:	4618      	mov	r0, r3
 8007bce:	e7c9      	b.n	8007b64 <_strtod_l+0x1e4>
 8007bd0:	4638      	mov	r0, r7
 8007bd2:	e7d2      	b.n	8007b7a <_strtod_l+0x1fa>
 8007bd4:	2b08      	cmp	r3, #8
 8007bd6:	dc04      	bgt.n	8007be2 <_strtod_l+0x262>
 8007bd8:	9e07      	ldr	r6, [sp, #28]
 8007bda:	434e      	muls	r6, r1
 8007bdc:	9607      	str	r6, [sp, #28]
 8007bde:	3301      	adds	r3, #1
 8007be0:	e7e2      	b.n	8007ba8 <_strtod_l+0x228>
 8007be2:	f103 0c01 	add.w	ip, r3, #1
 8007be6:	f1bc 0f10 	cmp.w	ip, #16
 8007bea:	bfd8      	it	le
 8007bec:	fb01 f909 	mulle.w	r9, r1, r9
 8007bf0:	e7f5      	b.n	8007bde <_strtod_l+0x25e>
 8007bf2:	2d10      	cmp	r5, #16
 8007bf4:	bfdc      	itt	le
 8007bf6:	230a      	movle	r3, #10
 8007bf8:	fb03 2909 	mlale	r9, r3, r9, r2
 8007bfc:	e7e1      	b.n	8007bc2 <_strtod_l+0x242>
 8007bfe:	2300      	movs	r3, #0
 8007c00:	9305      	str	r3, [sp, #20]
 8007c02:	2301      	movs	r3, #1
 8007c04:	e77c      	b.n	8007b00 <_strtod_l+0x180>
 8007c06:	f04f 0c00 	mov.w	ip, #0
 8007c0a:	f108 0202 	add.w	r2, r8, #2
 8007c0e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007c10:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007c14:	e785      	b.n	8007b22 <_strtod_l+0x1a2>
 8007c16:	f04f 0c01 	mov.w	ip, #1
 8007c1a:	e7f6      	b.n	8007c0a <_strtod_l+0x28a>
 8007c1c:	0800b4c8 	.word	0x0800b4c8
 8007c20:	0800b280 	.word	0x0800b280
 8007c24:	7ff00000 	.word	0x7ff00000
 8007c28:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007c2a:	1c51      	adds	r1, r2, #1
 8007c2c:	9117      	str	r1, [sp, #92]	; 0x5c
 8007c2e:	7852      	ldrb	r2, [r2, #1]
 8007c30:	2a30      	cmp	r2, #48	; 0x30
 8007c32:	d0f9      	beq.n	8007c28 <_strtod_l+0x2a8>
 8007c34:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007c38:	2908      	cmp	r1, #8
 8007c3a:	f63f af79 	bhi.w	8007b30 <_strtod_l+0x1b0>
 8007c3e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007c42:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007c44:	9206      	str	r2, [sp, #24]
 8007c46:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007c48:	1c51      	adds	r1, r2, #1
 8007c4a:	9117      	str	r1, [sp, #92]	; 0x5c
 8007c4c:	7852      	ldrb	r2, [r2, #1]
 8007c4e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007c52:	2e09      	cmp	r6, #9
 8007c54:	d937      	bls.n	8007cc6 <_strtod_l+0x346>
 8007c56:	9e06      	ldr	r6, [sp, #24]
 8007c58:	1b89      	subs	r1, r1, r6
 8007c5a:	2908      	cmp	r1, #8
 8007c5c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007c60:	dc02      	bgt.n	8007c68 <_strtod_l+0x2e8>
 8007c62:	4576      	cmp	r6, lr
 8007c64:	bfa8      	it	ge
 8007c66:	4676      	movge	r6, lr
 8007c68:	f1bc 0f00 	cmp.w	ip, #0
 8007c6c:	d000      	beq.n	8007c70 <_strtod_l+0x2f0>
 8007c6e:	4276      	negs	r6, r6
 8007c70:	2d00      	cmp	r5, #0
 8007c72:	d14d      	bne.n	8007d10 <_strtod_l+0x390>
 8007c74:	9904      	ldr	r1, [sp, #16]
 8007c76:	4301      	orrs	r1, r0
 8007c78:	f47f aec6 	bne.w	8007a08 <_strtod_l+0x88>
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f47f aee1 	bne.w	8007a44 <_strtod_l+0xc4>
 8007c82:	2a69      	cmp	r2, #105	; 0x69
 8007c84:	d027      	beq.n	8007cd6 <_strtod_l+0x356>
 8007c86:	dc24      	bgt.n	8007cd2 <_strtod_l+0x352>
 8007c88:	2a49      	cmp	r2, #73	; 0x49
 8007c8a:	d024      	beq.n	8007cd6 <_strtod_l+0x356>
 8007c8c:	2a4e      	cmp	r2, #78	; 0x4e
 8007c8e:	f47f aed9 	bne.w	8007a44 <_strtod_l+0xc4>
 8007c92:	499f      	ldr	r1, [pc, #636]	; (8007f10 <_strtod_l+0x590>)
 8007c94:	a817      	add	r0, sp, #92	; 0x5c
 8007c96:	f001 ff23 	bl	8009ae0 <__match>
 8007c9a:	2800      	cmp	r0, #0
 8007c9c:	f43f aed2 	beq.w	8007a44 <_strtod_l+0xc4>
 8007ca0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	2b28      	cmp	r3, #40	; 0x28
 8007ca6:	d12d      	bne.n	8007d04 <_strtod_l+0x384>
 8007ca8:	499a      	ldr	r1, [pc, #616]	; (8007f14 <_strtod_l+0x594>)
 8007caa:	aa1a      	add	r2, sp, #104	; 0x68
 8007cac:	a817      	add	r0, sp, #92	; 0x5c
 8007cae:	f001 ff2b 	bl	8009b08 <__hexnan>
 8007cb2:	2805      	cmp	r0, #5
 8007cb4:	d126      	bne.n	8007d04 <_strtod_l+0x384>
 8007cb6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007cb8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007cbc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007cc0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007cc4:	e6a0      	b.n	8007a08 <_strtod_l+0x88>
 8007cc6:	210a      	movs	r1, #10
 8007cc8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007ccc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007cd0:	e7b9      	b.n	8007c46 <_strtod_l+0x2c6>
 8007cd2:	2a6e      	cmp	r2, #110	; 0x6e
 8007cd4:	e7db      	b.n	8007c8e <_strtod_l+0x30e>
 8007cd6:	4990      	ldr	r1, [pc, #576]	; (8007f18 <_strtod_l+0x598>)
 8007cd8:	a817      	add	r0, sp, #92	; 0x5c
 8007cda:	f001 ff01 	bl	8009ae0 <__match>
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	f43f aeb0 	beq.w	8007a44 <_strtod_l+0xc4>
 8007ce4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ce6:	498d      	ldr	r1, [pc, #564]	; (8007f1c <_strtod_l+0x59c>)
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	a817      	add	r0, sp, #92	; 0x5c
 8007cec:	9317      	str	r3, [sp, #92]	; 0x5c
 8007cee:	f001 fef7 	bl	8009ae0 <__match>
 8007cf2:	b910      	cbnz	r0, 8007cfa <_strtod_l+0x37a>
 8007cf4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	9317      	str	r3, [sp, #92]	; 0x5c
 8007cfa:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007f2c <_strtod_l+0x5ac>
 8007cfe:	f04f 0a00 	mov.w	sl, #0
 8007d02:	e681      	b.n	8007a08 <_strtod_l+0x88>
 8007d04:	4886      	ldr	r0, [pc, #536]	; (8007f20 <_strtod_l+0x5a0>)
 8007d06:	f002 fe13 	bl	800a930 <nan>
 8007d0a:	ec5b ab10 	vmov	sl, fp, d0
 8007d0e:	e67b      	b.n	8007a08 <_strtod_l+0x88>
 8007d10:	9b05      	ldr	r3, [sp, #20]
 8007d12:	9807      	ldr	r0, [sp, #28]
 8007d14:	1af3      	subs	r3, r6, r3
 8007d16:	2f00      	cmp	r7, #0
 8007d18:	bf08      	it	eq
 8007d1a:	462f      	moveq	r7, r5
 8007d1c:	2d10      	cmp	r5, #16
 8007d1e:	9306      	str	r3, [sp, #24]
 8007d20:	46a8      	mov	r8, r5
 8007d22:	bfa8      	it	ge
 8007d24:	f04f 0810 	movge.w	r8, #16
 8007d28:	f7f8 fbec 	bl	8000504 <__aeabi_ui2d>
 8007d2c:	2d09      	cmp	r5, #9
 8007d2e:	4682      	mov	sl, r0
 8007d30:	468b      	mov	fp, r1
 8007d32:	dd13      	ble.n	8007d5c <_strtod_l+0x3dc>
 8007d34:	4b7b      	ldr	r3, [pc, #492]	; (8007f24 <_strtod_l+0x5a4>)
 8007d36:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007d3a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007d3e:	f7f8 fc5b 	bl	80005f8 <__aeabi_dmul>
 8007d42:	4682      	mov	sl, r0
 8007d44:	4648      	mov	r0, r9
 8007d46:	468b      	mov	fp, r1
 8007d48:	f7f8 fbdc 	bl	8000504 <__aeabi_ui2d>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	460b      	mov	r3, r1
 8007d50:	4650      	mov	r0, sl
 8007d52:	4659      	mov	r1, fp
 8007d54:	f7f8 fa9a 	bl	800028c <__adddf3>
 8007d58:	4682      	mov	sl, r0
 8007d5a:	468b      	mov	fp, r1
 8007d5c:	2d0f      	cmp	r5, #15
 8007d5e:	dc38      	bgt.n	8007dd2 <_strtod_l+0x452>
 8007d60:	9b06      	ldr	r3, [sp, #24]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f43f ae50 	beq.w	8007a08 <_strtod_l+0x88>
 8007d68:	dd24      	ble.n	8007db4 <_strtod_l+0x434>
 8007d6a:	2b16      	cmp	r3, #22
 8007d6c:	dc0b      	bgt.n	8007d86 <_strtod_l+0x406>
 8007d6e:	496d      	ldr	r1, [pc, #436]	; (8007f24 <_strtod_l+0x5a4>)
 8007d70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007d74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d78:	4652      	mov	r2, sl
 8007d7a:	465b      	mov	r3, fp
 8007d7c:	f7f8 fc3c 	bl	80005f8 <__aeabi_dmul>
 8007d80:	4682      	mov	sl, r0
 8007d82:	468b      	mov	fp, r1
 8007d84:	e640      	b.n	8007a08 <_strtod_l+0x88>
 8007d86:	9a06      	ldr	r2, [sp, #24]
 8007d88:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	db20      	blt.n	8007dd2 <_strtod_l+0x452>
 8007d90:	4c64      	ldr	r4, [pc, #400]	; (8007f24 <_strtod_l+0x5a4>)
 8007d92:	f1c5 050f 	rsb	r5, r5, #15
 8007d96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007d9a:	4652      	mov	r2, sl
 8007d9c:	465b      	mov	r3, fp
 8007d9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007da2:	f7f8 fc29 	bl	80005f8 <__aeabi_dmul>
 8007da6:	9b06      	ldr	r3, [sp, #24]
 8007da8:	1b5d      	subs	r5, r3, r5
 8007daa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007dae:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007db2:	e7e3      	b.n	8007d7c <_strtod_l+0x3fc>
 8007db4:	9b06      	ldr	r3, [sp, #24]
 8007db6:	3316      	adds	r3, #22
 8007db8:	db0b      	blt.n	8007dd2 <_strtod_l+0x452>
 8007dba:	9b05      	ldr	r3, [sp, #20]
 8007dbc:	1b9e      	subs	r6, r3, r6
 8007dbe:	4b59      	ldr	r3, [pc, #356]	; (8007f24 <_strtod_l+0x5a4>)
 8007dc0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007dc4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007dc8:	4650      	mov	r0, sl
 8007dca:	4659      	mov	r1, fp
 8007dcc:	f7f8 fd3e 	bl	800084c <__aeabi_ddiv>
 8007dd0:	e7d6      	b.n	8007d80 <_strtod_l+0x400>
 8007dd2:	9b06      	ldr	r3, [sp, #24]
 8007dd4:	eba5 0808 	sub.w	r8, r5, r8
 8007dd8:	4498      	add	r8, r3
 8007dda:	f1b8 0f00 	cmp.w	r8, #0
 8007dde:	dd74      	ble.n	8007eca <_strtod_l+0x54a>
 8007de0:	f018 030f 	ands.w	r3, r8, #15
 8007de4:	d00a      	beq.n	8007dfc <_strtod_l+0x47c>
 8007de6:	494f      	ldr	r1, [pc, #316]	; (8007f24 <_strtod_l+0x5a4>)
 8007de8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007dec:	4652      	mov	r2, sl
 8007dee:	465b      	mov	r3, fp
 8007df0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007df4:	f7f8 fc00 	bl	80005f8 <__aeabi_dmul>
 8007df8:	4682      	mov	sl, r0
 8007dfa:	468b      	mov	fp, r1
 8007dfc:	f038 080f 	bics.w	r8, r8, #15
 8007e00:	d04f      	beq.n	8007ea2 <_strtod_l+0x522>
 8007e02:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007e06:	dd22      	ble.n	8007e4e <_strtod_l+0x4ce>
 8007e08:	2500      	movs	r5, #0
 8007e0a:	462e      	mov	r6, r5
 8007e0c:	9507      	str	r5, [sp, #28]
 8007e0e:	9505      	str	r5, [sp, #20]
 8007e10:	2322      	movs	r3, #34	; 0x22
 8007e12:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007f2c <_strtod_l+0x5ac>
 8007e16:	6023      	str	r3, [r4, #0]
 8007e18:	f04f 0a00 	mov.w	sl, #0
 8007e1c:	9b07      	ldr	r3, [sp, #28]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f43f adf2 	beq.w	8007a08 <_strtod_l+0x88>
 8007e24:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007e26:	4620      	mov	r0, r4
 8007e28:	f001 ff7e 	bl	8009d28 <_Bfree>
 8007e2c:	9905      	ldr	r1, [sp, #20]
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f001 ff7a 	bl	8009d28 <_Bfree>
 8007e34:	4631      	mov	r1, r6
 8007e36:	4620      	mov	r0, r4
 8007e38:	f001 ff76 	bl	8009d28 <_Bfree>
 8007e3c:	9907      	ldr	r1, [sp, #28]
 8007e3e:	4620      	mov	r0, r4
 8007e40:	f001 ff72 	bl	8009d28 <_Bfree>
 8007e44:	4629      	mov	r1, r5
 8007e46:	4620      	mov	r0, r4
 8007e48:	f001 ff6e 	bl	8009d28 <_Bfree>
 8007e4c:	e5dc      	b.n	8007a08 <_strtod_l+0x88>
 8007e4e:	4b36      	ldr	r3, [pc, #216]	; (8007f28 <_strtod_l+0x5a8>)
 8007e50:	9304      	str	r3, [sp, #16]
 8007e52:	2300      	movs	r3, #0
 8007e54:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007e58:	4650      	mov	r0, sl
 8007e5a:	4659      	mov	r1, fp
 8007e5c:	4699      	mov	r9, r3
 8007e5e:	f1b8 0f01 	cmp.w	r8, #1
 8007e62:	dc21      	bgt.n	8007ea8 <_strtod_l+0x528>
 8007e64:	b10b      	cbz	r3, 8007e6a <_strtod_l+0x4ea>
 8007e66:	4682      	mov	sl, r0
 8007e68:	468b      	mov	fp, r1
 8007e6a:	4b2f      	ldr	r3, [pc, #188]	; (8007f28 <_strtod_l+0x5a8>)
 8007e6c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007e70:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007e74:	4652      	mov	r2, sl
 8007e76:	465b      	mov	r3, fp
 8007e78:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007e7c:	f7f8 fbbc 	bl	80005f8 <__aeabi_dmul>
 8007e80:	4b2a      	ldr	r3, [pc, #168]	; (8007f2c <_strtod_l+0x5ac>)
 8007e82:	460a      	mov	r2, r1
 8007e84:	400b      	ands	r3, r1
 8007e86:	492a      	ldr	r1, [pc, #168]	; (8007f30 <_strtod_l+0x5b0>)
 8007e88:	428b      	cmp	r3, r1
 8007e8a:	4682      	mov	sl, r0
 8007e8c:	d8bc      	bhi.n	8007e08 <_strtod_l+0x488>
 8007e8e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007e92:	428b      	cmp	r3, r1
 8007e94:	bf86      	itte	hi
 8007e96:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007f34 <_strtod_l+0x5b4>
 8007e9a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8007e9e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	9304      	str	r3, [sp, #16]
 8007ea6:	e084      	b.n	8007fb2 <_strtod_l+0x632>
 8007ea8:	f018 0f01 	tst.w	r8, #1
 8007eac:	d005      	beq.n	8007eba <_strtod_l+0x53a>
 8007eae:	9b04      	ldr	r3, [sp, #16]
 8007eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb4:	f7f8 fba0 	bl	80005f8 <__aeabi_dmul>
 8007eb8:	2301      	movs	r3, #1
 8007eba:	9a04      	ldr	r2, [sp, #16]
 8007ebc:	3208      	adds	r2, #8
 8007ebe:	f109 0901 	add.w	r9, r9, #1
 8007ec2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007ec6:	9204      	str	r2, [sp, #16]
 8007ec8:	e7c9      	b.n	8007e5e <_strtod_l+0x4de>
 8007eca:	d0ea      	beq.n	8007ea2 <_strtod_l+0x522>
 8007ecc:	f1c8 0800 	rsb	r8, r8, #0
 8007ed0:	f018 020f 	ands.w	r2, r8, #15
 8007ed4:	d00a      	beq.n	8007eec <_strtod_l+0x56c>
 8007ed6:	4b13      	ldr	r3, [pc, #76]	; (8007f24 <_strtod_l+0x5a4>)
 8007ed8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007edc:	4650      	mov	r0, sl
 8007ede:	4659      	mov	r1, fp
 8007ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee4:	f7f8 fcb2 	bl	800084c <__aeabi_ddiv>
 8007ee8:	4682      	mov	sl, r0
 8007eea:	468b      	mov	fp, r1
 8007eec:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007ef0:	d0d7      	beq.n	8007ea2 <_strtod_l+0x522>
 8007ef2:	f1b8 0f1f 	cmp.w	r8, #31
 8007ef6:	dd1f      	ble.n	8007f38 <_strtod_l+0x5b8>
 8007ef8:	2500      	movs	r5, #0
 8007efa:	462e      	mov	r6, r5
 8007efc:	9507      	str	r5, [sp, #28]
 8007efe:	9505      	str	r5, [sp, #20]
 8007f00:	2322      	movs	r3, #34	; 0x22
 8007f02:	f04f 0a00 	mov.w	sl, #0
 8007f06:	f04f 0b00 	mov.w	fp, #0
 8007f0a:	6023      	str	r3, [r4, #0]
 8007f0c:	e786      	b.n	8007e1c <_strtod_l+0x49c>
 8007f0e:	bf00      	nop
 8007f10:	0800b251 	.word	0x0800b251
 8007f14:	0800b294 	.word	0x0800b294
 8007f18:	0800b249 	.word	0x0800b249
 8007f1c:	0800b3d4 	.word	0x0800b3d4
 8007f20:	0800b680 	.word	0x0800b680
 8007f24:	0800b560 	.word	0x0800b560
 8007f28:	0800b538 	.word	0x0800b538
 8007f2c:	7ff00000 	.word	0x7ff00000
 8007f30:	7ca00000 	.word	0x7ca00000
 8007f34:	7fefffff 	.word	0x7fefffff
 8007f38:	f018 0310 	ands.w	r3, r8, #16
 8007f3c:	bf18      	it	ne
 8007f3e:	236a      	movne	r3, #106	; 0x6a
 8007f40:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80082f0 <_strtod_l+0x970>
 8007f44:	9304      	str	r3, [sp, #16]
 8007f46:	4650      	mov	r0, sl
 8007f48:	4659      	mov	r1, fp
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	f018 0f01 	tst.w	r8, #1
 8007f50:	d004      	beq.n	8007f5c <_strtod_l+0x5dc>
 8007f52:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007f56:	f7f8 fb4f 	bl	80005f8 <__aeabi_dmul>
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007f60:	f109 0908 	add.w	r9, r9, #8
 8007f64:	d1f2      	bne.n	8007f4c <_strtod_l+0x5cc>
 8007f66:	b10b      	cbz	r3, 8007f6c <_strtod_l+0x5ec>
 8007f68:	4682      	mov	sl, r0
 8007f6a:	468b      	mov	fp, r1
 8007f6c:	9b04      	ldr	r3, [sp, #16]
 8007f6e:	b1c3      	cbz	r3, 8007fa2 <_strtod_l+0x622>
 8007f70:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007f74:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	4659      	mov	r1, fp
 8007f7c:	dd11      	ble.n	8007fa2 <_strtod_l+0x622>
 8007f7e:	2b1f      	cmp	r3, #31
 8007f80:	f340 8124 	ble.w	80081cc <_strtod_l+0x84c>
 8007f84:	2b34      	cmp	r3, #52	; 0x34
 8007f86:	bfde      	ittt	le
 8007f88:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007f8c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8007f90:	fa03 f202 	lslle.w	r2, r3, r2
 8007f94:	f04f 0a00 	mov.w	sl, #0
 8007f98:	bfcc      	ite	gt
 8007f9a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007f9e:	ea02 0b01 	andle.w	fp, r2, r1
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	4650      	mov	r0, sl
 8007fa8:	4659      	mov	r1, fp
 8007faa:	f7f8 fd8d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	d1a2      	bne.n	8007ef8 <_strtod_l+0x578>
 8007fb2:	9b07      	ldr	r3, [sp, #28]
 8007fb4:	9300      	str	r3, [sp, #0]
 8007fb6:	9908      	ldr	r1, [sp, #32]
 8007fb8:	462b      	mov	r3, r5
 8007fba:	463a      	mov	r2, r7
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	f001 ff1b 	bl	8009df8 <__s2b>
 8007fc2:	9007      	str	r0, [sp, #28]
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	f43f af1f 	beq.w	8007e08 <_strtod_l+0x488>
 8007fca:	9b05      	ldr	r3, [sp, #20]
 8007fcc:	1b9e      	subs	r6, r3, r6
 8007fce:	9b06      	ldr	r3, [sp, #24]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	bfb4      	ite	lt
 8007fd4:	4633      	movlt	r3, r6
 8007fd6:	2300      	movge	r3, #0
 8007fd8:	930c      	str	r3, [sp, #48]	; 0x30
 8007fda:	9b06      	ldr	r3, [sp, #24]
 8007fdc:	2500      	movs	r5, #0
 8007fde:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007fe2:	9312      	str	r3, [sp, #72]	; 0x48
 8007fe4:	462e      	mov	r6, r5
 8007fe6:	9b07      	ldr	r3, [sp, #28]
 8007fe8:	4620      	mov	r0, r4
 8007fea:	6859      	ldr	r1, [r3, #4]
 8007fec:	f001 fe5c 	bl	8009ca8 <_Balloc>
 8007ff0:	9005      	str	r0, [sp, #20]
 8007ff2:	2800      	cmp	r0, #0
 8007ff4:	f43f af0c 	beq.w	8007e10 <_strtod_l+0x490>
 8007ff8:	9b07      	ldr	r3, [sp, #28]
 8007ffa:	691a      	ldr	r2, [r3, #16]
 8007ffc:	3202      	adds	r2, #2
 8007ffe:	f103 010c 	add.w	r1, r3, #12
 8008002:	0092      	lsls	r2, r2, #2
 8008004:	300c      	adds	r0, #12
 8008006:	f7fe fc35 	bl	8006874 <memcpy>
 800800a:	ec4b ab10 	vmov	d0, sl, fp
 800800e:	aa1a      	add	r2, sp, #104	; 0x68
 8008010:	a919      	add	r1, sp, #100	; 0x64
 8008012:	4620      	mov	r0, r4
 8008014:	f002 fa36 	bl	800a484 <__d2b>
 8008018:	ec4b ab18 	vmov	d8, sl, fp
 800801c:	9018      	str	r0, [sp, #96]	; 0x60
 800801e:	2800      	cmp	r0, #0
 8008020:	f43f aef6 	beq.w	8007e10 <_strtod_l+0x490>
 8008024:	2101      	movs	r1, #1
 8008026:	4620      	mov	r0, r4
 8008028:	f001 ff80 	bl	8009f2c <__i2b>
 800802c:	4606      	mov	r6, r0
 800802e:	2800      	cmp	r0, #0
 8008030:	f43f aeee 	beq.w	8007e10 <_strtod_l+0x490>
 8008034:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008036:	9904      	ldr	r1, [sp, #16]
 8008038:	2b00      	cmp	r3, #0
 800803a:	bfab      	itete	ge
 800803c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800803e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008040:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008042:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8008046:	bfac      	ite	ge
 8008048:	eb03 0902 	addge.w	r9, r3, r2
 800804c:	1ad7      	sublt	r7, r2, r3
 800804e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008050:	eba3 0801 	sub.w	r8, r3, r1
 8008054:	4490      	add	r8, r2
 8008056:	4ba1      	ldr	r3, [pc, #644]	; (80082dc <_strtod_l+0x95c>)
 8008058:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800805c:	4598      	cmp	r8, r3
 800805e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008062:	f280 80c7 	bge.w	80081f4 <_strtod_l+0x874>
 8008066:	eba3 0308 	sub.w	r3, r3, r8
 800806a:	2b1f      	cmp	r3, #31
 800806c:	eba2 0203 	sub.w	r2, r2, r3
 8008070:	f04f 0101 	mov.w	r1, #1
 8008074:	f300 80b1 	bgt.w	80081da <_strtod_l+0x85a>
 8008078:	fa01 f303 	lsl.w	r3, r1, r3
 800807c:	930d      	str	r3, [sp, #52]	; 0x34
 800807e:	2300      	movs	r3, #0
 8008080:	9308      	str	r3, [sp, #32]
 8008082:	eb09 0802 	add.w	r8, r9, r2
 8008086:	9b04      	ldr	r3, [sp, #16]
 8008088:	45c1      	cmp	r9, r8
 800808a:	4417      	add	r7, r2
 800808c:	441f      	add	r7, r3
 800808e:	464b      	mov	r3, r9
 8008090:	bfa8      	it	ge
 8008092:	4643      	movge	r3, r8
 8008094:	42bb      	cmp	r3, r7
 8008096:	bfa8      	it	ge
 8008098:	463b      	movge	r3, r7
 800809a:	2b00      	cmp	r3, #0
 800809c:	bfc2      	ittt	gt
 800809e:	eba8 0803 	subgt.w	r8, r8, r3
 80080a2:	1aff      	subgt	r7, r7, r3
 80080a4:	eba9 0903 	subgt.w	r9, r9, r3
 80080a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	dd17      	ble.n	80080de <_strtod_l+0x75e>
 80080ae:	4631      	mov	r1, r6
 80080b0:	461a      	mov	r2, r3
 80080b2:	4620      	mov	r0, r4
 80080b4:	f001 fffa 	bl	800a0ac <__pow5mult>
 80080b8:	4606      	mov	r6, r0
 80080ba:	2800      	cmp	r0, #0
 80080bc:	f43f aea8 	beq.w	8007e10 <_strtod_l+0x490>
 80080c0:	4601      	mov	r1, r0
 80080c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80080c4:	4620      	mov	r0, r4
 80080c6:	f001 ff47 	bl	8009f58 <__multiply>
 80080ca:	900b      	str	r0, [sp, #44]	; 0x2c
 80080cc:	2800      	cmp	r0, #0
 80080ce:	f43f ae9f 	beq.w	8007e10 <_strtod_l+0x490>
 80080d2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80080d4:	4620      	mov	r0, r4
 80080d6:	f001 fe27 	bl	8009d28 <_Bfree>
 80080da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080dc:	9318      	str	r3, [sp, #96]	; 0x60
 80080de:	f1b8 0f00 	cmp.w	r8, #0
 80080e2:	f300 808c 	bgt.w	80081fe <_strtod_l+0x87e>
 80080e6:	9b06      	ldr	r3, [sp, #24]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	dd08      	ble.n	80080fe <_strtod_l+0x77e>
 80080ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80080ee:	9905      	ldr	r1, [sp, #20]
 80080f0:	4620      	mov	r0, r4
 80080f2:	f001 ffdb 	bl	800a0ac <__pow5mult>
 80080f6:	9005      	str	r0, [sp, #20]
 80080f8:	2800      	cmp	r0, #0
 80080fa:	f43f ae89 	beq.w	8007e10 <_strtod_l+0x490>
 80080fe:	2f00      	cmp	r7, #0
 8008100:	dd08      	ble.n	8008114 <_strtod_l+0x794>
 8008102:	9905      	ldr	r1, [sp, #20]
 8008104:	463a      	mov	r2, r7
 8008106:	4620      	mov	r0, r4
 8008108:	f002 f82a 	bl	800a160 <__lshift>
 800810c:	9005      	str	r0, [sp, #20]
 800810e:	2800      	cmp	r0, #0
 8008110:	f43f ae7e 	beq.w	8007e10 <_strtod_l+0x490>
 8008114:	f1b9 0f00 	cmp.w	r9, #0
 8008118:	dd08      	ble.n	800812c <_strtod_l+0x7ac>
 800811a:	4631      	mov	r1, r6
 800811c:	464a      	mov	r2, r9
 800811e:	4620      	mov	r0, r4
 8008120:	f002 f81e 	bl	800a160 <__lshift>
 8008124:	4606      	mov	r6, r0
 8008126:	2800      	cmp	r0, #0
 8008128:	f43f ae72 	beq.w	8007e10 <_strtod_l+0x490>
 800812c:	9a05      	ldr	r2, [sp, #20]
 800812e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008130:	4620      	mov	r0, r4
 8008132:	f002 f8a1 	bl	800a278 <__mdiff>
 8008136:	4605      	mov	r5, r0
 8008138:	2800      	cmp	r0, #0
 800813a:	f43f ae69 	beq.w	8007e10 <_strtod_l+0x490>
 800813e:	68c3      	ldr	r3, [r0, #12]
 8008140:	930b      	str	r3, [sp, #44]	; 0x2c
 8008142:	2300      	movs	r3, #0
 8008144:	60c3      	str	r3, [r0, #12]
 8008146:	4631      	mov	r1, r6
 8008148:	f002 f87a 	bl	800a240 <__mcmp>
 800814c:	2800      	cmp	r0, #0
 800814e:	da60      	bge.n	8008212 <_strtod_l+0x892>
 8008150:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008152:	ea53 030a 	orrs.w	r3, r3, sl
 8008156:	f040 8082 	bne.w	800825e <_strtod_l+0x8de>
 800815a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800815e:	2b00      	cmp	r3, #0
 8008160:	d17d      	bne.n	800825e <_strtod_l+0x8de>
 8008162:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008166:	0d1b      	lsrs	r3, r3, #20
 8008168:	051b      	lsls	r3, r3, #20
 800816a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800816e:	d976      	bls.n	800825e <_strtod_l+0x8de>
 8008170:	696b      	ldr	r3, [r5, #20]
 8008172:	b913      	cbnz	r3, 800817a <_strtod_l+0x7fa>
 8008174:	692b      	ldr	r3, [r5, #16]
 8008176:	2b01      	cmp	r3, #1
 8008178:	dd71      	ble.n	800825e <_strtod_l+0x8de>
 800817a:	4629      	mov	r1, r5
 800817c:	2201      	movs	r2, #1
 800817e:	4620      	mov	r0, r4
 8008180:	f001 ffee 	bl	800a160 <__lshift>
 8008184:	4631      	mov	r1, r6
 8008186:	4605      	mov	r5, r0
 8008188:	f002 f85a 	bl	800a240 <__mcmp>
 800818c:	2800      	cmp	r0, #0
 800818e:	dd66      	ble.n	800825e <_strtod_l+0x8de>
 8008190:	9904      	ldr	r1, [sp, #16]
 8008192:	4a53      	ldr	r2, [pc, #332]	; (80082e0 <_strtod_l+0x960>)
 8008194:	465b      	mov	r3, fp
 8008196:	2900      	cmp	r1, #0
 8008198:	f000 8081 	beq.w	800829e <_strtod_l+0x91e>
 800819c:	ea02 010b 	and.w	r1, r2, fp
 80081a0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80081a4:	dc7b      	bgt.n	800829e <_strtod_l+0x91e>
 80081a6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80081aa:	f77f aea9 	ble.w	8007f00 <_strtod_l+0x580>
 80081ae:	4b4d      	ldr	r3, [pc, #308]	; (80082e4 <_strtod_l+0x964>)
 80081b0:	4650      	mov	r0, sl
 80081b2:	4659      	mov	r1, fp
 80081b4:	2200      	movs	r2, #0
 80081b6:	f7f8 fa1f 	bl	80005f8 <__aeabi_dmul>
 80081ba:	460b      	mov	r3, r1
 80081bc:	4303      	orrs	r3, r0
 80081be:	bf08      	it	eq
 80081c0:	2322      	moveq	r3, #34	; 0x22
 80081c2:	4682      	mov	sl, r0
 80081c4:	468b      	mov	fp, r1
 80081c6:	bf08      	it	eq
 80081c8:	6023      	streq	r3, [r4, #0]
 80081ca:	e62b      	b.n	8007e24 <_strtod_l+0x4a4>
 80081cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081d0:	fa02 f303 	lsl.w	r3, r2, r3
 80081d4:	ea03 0a0a 	and.w	sl, r3, sl
 80081d8:	e6e3      	b.n	8007fa2 <_strtod_l+0x622>
 80081da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80081de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80081e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80081e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80081ea:	fa01 f308 	lsl.w	r3, r1, r8
 80081ee:	9308      	str	r3, [sp, #32]
 80081f0:	910d      	str	r1, [sp, #52]	; 0x34
 80081f2:	e746      	b.n	8008082 <_strtod_l+0x702>
 80081f4:	2300      	movs	r3, #0
 80081f6:	9308      	str	r3, [sp, #32]
 80081f8:	2301      	movs	r3, #1
 80081fa:	930d      	str	r3, [sp, #52]	; 0x34
 80081fc:	e741      	b.n	8008082 <_strtod_l+0x702>
 80081fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008200:	4642      	mov	r2, r8
 8008202:	4620      	mov	r0, r4
 8008204:	f001 ffac 	bl	800a160 <__lshift>
 8008208:	9018      	str	r0, [sp, #96]	; 0x60
 800820a:	2800      	cmp	r0, #0
 800820c:	f47f af6b 	bne.w	80080e6 <_strtod_l+0x766>
 8008210:	e5fe      	b.n	8007e10 <_strtod_l+0x490>
 8008212:	465f      	mov	r7, fp
 8008214:	d16e      	bne.n	80082f4 <_strtod_l+0x974>
 8008216:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008218:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800821c:	b342      	cbz	r2, 8008270 <_strtod_l+0x8f0>
 800821e:	4a32      	ldr	r2, [pc, #200]	; (80082e8 <_strtod_l+0x968>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d128      	bne.n	8008276 <_strtod_l+0x8f6>
 8008224:	9b04      	ldr	r3, [sp, #16]
 8008226:	4651      	mov	r1, sl
 8008228:	b1eb      	cbz	r3, 8008266 <_strtod_l+0x8e6>
 800822a:	4b2d      	ldr	r3, [pc, #180]	; (80082e0 <_strtod_l+0x960>)
 800822c:	403b      	ands	r3, r7
 800822e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008232:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008236:	d819      	bhi.n	800826c <_strtod_l+0x8ec>
 8008238:	0d1b      	lsrs	r3, r3, #20
 800823a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800823e:	fa02 f303 	lsl.w	r3, r2, r3
 8008242:	4299      	cmp	r1, r3
 8008244:	d117      	bne.n	8008276 <_strtod_l+0x8f6>
 8008246:	4b29      	ldr	r3, [pc, #164]	; (80082ec <_strtod_l+0x96c>)
 8008248:	429f      	cmp	r7, r3
 800824a:	d102      	bne.n	8008252 <_strtod_l+0x8d2>
 800824c:	3101      	adds	r1, #1
 800824e:	f43f addf 	beq.w	8007e10 <_strtod_l+0x490>
 8008252:	4b23      	ldr	r3, [pc, #140]	; (80082e0 <_strtod_l+0x960>)
 8008254:	403b      	ands	r3, r7
 8008256:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800825a:	f04f 0a00 	mov.w	sl, #0
 800825e:	9b04      	ldr	r3, [sp, #16]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d1a4      	bne.n	80081ae <_strtod_l+0x82e>
 8008264:	e5de      	b.n	8007e24 <_strtod_l+0x4a4>
 8008266:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800826a:	e7ea      	b.n	8008242 <_strtod_l+0x8c2>
 800826c:	4613      	mov	r3, r2
 800826e:	e7e8      	b.n	8008242 <_strtod_l+0x8c2>
 8008270:	ea53 030a 	orrs.w	r3, r3, sl
 8008274:	d08c      	beq.n	8008190 <_strtod_l+0x810>
 8008276:	9b08      	ldr	r3, [sp, #32]
 8008278:	b1db      	cbz	r3, 80082b2 <_strtod_l+0x932>
 800827a:	423b      	tst	r3, r7
 800827c:	d0ef      	beq.n	800825e <_strtod_l+0x8de>
 800827e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008280:	9a04      	ldr	r2, [sp, #16]
 8008282:	4650      	mov	r0, sl
 8008284:	4659      	mov	r1, fp
 8008286:	b1c3      	cbz	r3, 80082ba <_strtod_l+0x93a>
 8008288:	f7ff fb5b 	bl	8007942 <sulp>
 800828c:	4602      	mov	r2, r0
 800828e:	460b      	mov	r3, r1
 8008290:	ec51 0b18 	vmov	r0, r1, d8
 8008294:	f7f7 fffa 	bl	800028c <__adddf3>
 8008298:	4682      	mov	sl, r0
 800829a:	468b      	mov	fp, r1
 800829c:	e7df      	b.n	800825e <_strtod_l+0x8de>
 800829e:	4013      	ands	r3, r2
 80082a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80082a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80082a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80082ac:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80082b0:	e7d5      	b.n	800825e <_strtod_l+0x8de>
 80082b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082b4:	ea13 0f0a 	tst.w	r3, sl
 80082b8:	e7e0      	b.n	800827c <_strtod_l+0x8fc>
 80082ba:	f7ff fb42 	bl	8007942 <sulp>
 80082be:	4602      	mov	r2, r0
 80082c0:	460b      	mov	r3, r1
 80082c2:	ec51 0b18 	vmov	r0, r1, d8
 80082c6:	f7f7 ffdf 	bl	8000288 <__aeabi_dsub>
 80082ca:	2200      	movs	r2, #0
 80082cc:	2300      	movs	r3, #0
 80082ce:	4682      	mov	sl, r0
 80082d0:	468b      	mov	fp, r1
 80082d2:	f7f8 fbf9 	bl	8000ac8 <__aeabi_dcmpeq>
 80082d6:	2800      	cmp	r0, #0
 80082d8:	d0c1      	beq.n	800825e <_strtod_l+0x8de>
 80082da:	e611      	b.n	8007f00 <_strtod_l+0x580>
 80082dc:	fffffc02 	.word	0xfffffc02
 80082e0:	7ff00000 	.word	0x7ff00000
 80082e4:	39500000 	.word	0x39500000
 80082e8:	000fffff 	.word	0x000fffff
 80082ec:	7fefffff 	.word	0x7fefffff
 80082f0:	0800b2a8 	.word	0x0800b2a8
 80082f4:	4631      	mov	r1, r6
 80082f6:	4628      	mov	r0, r5
 80082f8:	f002 f920 	bl	800a53c <__ratio>
 80082fc:	ec59 8b10 	vmov	r8, r9, d0
 8008300:	ee10 0a10 	vmov	r0, s0
 8008304:	2200      	movs	r2, #0
 8008306:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800830a:	4649      	mov	r1, r9
 800830c:	f7f8 fbf0 	bl	8000af0 <__aeabi_dcmple>
 8008310:	2800      	cmp	r0, #0
 8008312:	d07a      	beq.n	800840a <_strtod_l+0xa8a>
 8008314:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008316:	2b00      	cmp	r3, #0
 8008318:	d04a      	beq.n	80083b0 <_strtod_l+0xa30>
 800831a:	4b95      	ldr	r3, [pc, #596]	; (8008570 <_strtod_l+0xbf0>)
 800831c:	2200      	movs	r2, #0
 800831e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008322:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008570 <_strtod_l+0xbf0>
 8008326:	f04f 0800 	mov.w	r8, #0
 800832a:	4b92      	ldr	r3, [pc, #584]	; (8008574 <_strtod_l+0xbf4>)
 800832c:	403b      	ands	r3, r7
 800832e:	930d      	str	r3, [sp, #52]	; 0x34
 8008330:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008332:	4b91      	ldr	r3, [pc, #580]	; (8008578 <_strtod_l+0xbf8>)
 8008334:	429a      	cmp	r2, r3
 8008336:	f040 80b0 	bne.w	800849a <_strtod_l+0xb1a>
 800833a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800833e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008342:	ec4b ab10 	vmov	d0, sl, fp
 8008346:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800834a:	f002 f81f 	bl	800a38c <__ulp>
 800834e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008352:	ec53 2b10 	vmov	r2, r3, d0
 8008356:	f7f8 f94f 	bl	80005f8 <__aeabi_dmul>
 800835a:	4652      	mov	r2, sl
 800835c:	465b      	mov	r3, fp
 800835e:	f7f7 ff95 	bl	800028c <__adddf3>
 8008362:	460b      	mov	r3, r1
 8008364:	4983      	ldr	r1, [pc, #524]	; (8008574 <_strtod_l+0xbf4>)
 8008366:	4a85      	ldr	r2, [pc, #532]	; (800857c <_strtod_l+0xbfc>)
 8008368:	4019      	ands	r1, r3
 800836a:	4291      	cmp	r1, r2
 800836c:	4682      	mov	sl, r0
 800836e:	d960      	bls.n	8008432 <_strtod_l+0xab2>
 8008370:	ee18 3a90 	vmov	r3, s17
 8008374:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008378:	4293      	cmp	r3, r2
 800837a:	d104      	bne.n	8008386 <_strtod_l+0xa06>
 800837c:	ee18 3a10 	vmov	r3, s16
 8008380:	3301      	adds	r3, #1
 8008382:	f43f ad45 	beq.w	8007e10 <_strtod_l+0x490>
 8008386:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008588 <_strtod_l+0xc08>
 800838a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800838e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008390:	4620      	mov	r0, r4
 8008392:	f001 fcc9 	bl	8009d28 <_Bfree>
 8008396:	9905      	ldr	r1, [sp, #20]
 8008398:	4620      	mov	r0, r4
 800839a:	f001 fcc5 	bl	8009d28 <_Bfree>
 800839e:	4631      	mov	r1, r6
 80083a0:	4620      	mov	r0, r4
 80083a2:	f001 fcc1 	bl	8009d28 <_Bfree>
 80083a6:	4629      	mov	r1, r5
 80083a8:	4620      	mov	r0, r4
 80083aa:	f001 fcbd 	bl	8009d28 <_Bfree>
 80083ae:	e61a      	b.n	8007fe6 <_strtod_l+0x666>
 80083b0:	f1ba 0f00 	cmp.w	sl, #0
 80083b4:	d11b      	bne.n	80083ee <_strtod_l+0xa6e>
 80083b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083ba:	b9f3      	cbnz	r3, 80083fa <_strtod_l+0xa7a>
 80083bc:	4b6c      	ldr	r3, [pc, #432]	; (8008570 <_strtod_l+0xbf0>)
 80083be:	2200      	movs	r2, #0
 80083c0:	4640      	mov	r0, r8
 80083c2:	4649      	mov	r1, r9
 80083c4:	f7f8 fb8a 	bl	8000adc <__aeabi_dcmplt>
 80083c8:	b9d0      	cbnz	r0, 8008400 <_strtod_l+0xa80>
 80083ca:	4640      	mov	r0, r8
 80083cc:	4649      	mov	r1, r9
 80083ce:	4b6c      	ldr	r3, [pc, #432]	; (8008580 <_strtod_l+0xc00>)
 80083d0:	2200      	movs	r2, #0
 80083d2:	f7f8 f911 	bl	80005f8 <__aeabi_dmul>
 80083d6:	4680      	mov	r8, r0
 80083d8:	4689      	mov	r9, r1
 80083da:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80083de:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80083e2:	9315      	str	r3, [sp, #84]	; 0x54
 80083e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80083e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80083ec:	e79d      	b.n	800832a <_strtod_l+0x9aa>
 80083ee:	f1ba 0f01 	cmp.w	sl, #1
 80083f2:	d102      	bne.n	80083fa <_strtod_l+0xa7a>
 80083f4:	2f00      	cmp	r7, #0
 80083f6:	f43f ad83 	beq.w	8007f00 <_strtod_l+0x580>
 80083fa:	4b62      	ldr	r3, [pc, #392]	; (8008584 <_strtod_l+0xc04>)
 80083fc:	2200      	movs	r2, #0
 80083fe:	e78e      	b.n	800831e <_strtod_l+0x99e>
 8008400:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008580 <_strtod_l+0xc00>
 8008404:	f04f 0800 	mov.w	r8, #0
 8008408:	e7e7      	b.n	80083da <_strtod_l+0xa5a>
 800840a:	4b5d      	ldr	r3, [pc, #372]	; (8008580 <_strtod_l+0xc00>)
 800840c:	4640      	mov	r0, r8
 800840e:	4649      	mov	r1, r9
 8008410:	2200      	movs	r2, #0
 8008412:	f7f8 f8f1 	bl	80005f8 <__aeabi_dmul>
 8008416:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008418:	4680      	mov	r8, r0
 800841a:	4689      	mov	r9, r1
 800841c:	b933      	cbnz	r3, 800842c <_strtod_l+0xaac>
 800841e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008422:	900e      	str	r0, [sp, #56]	; 0x38
 8008424:	930f      	str	r3, [sp, #60]	; 0x3c
 8008426:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800842a:	e7dd      	b.n	80083e8 <_strtod_l+0xa68>
 800842c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008430:	e7f9      	b.n	8008426 <_strtod_l+0xaa6>
 8008432:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008436:	9b04      	ldr	r3, [sp, #16]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d1a8      	bne.n	800838e <_strtod_l+0xa0e>
 800843c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008440:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008442:	0d1b      	lsrs	r3, r3, #20
 8008444:	051b      	lsls	r3, r3, #20
 8008446:	429a      	cmp	r2, r3
 8008448:	d1a1      	bne.n	800838e <_strtod_l+0xa0e>
 800844a:	4640      	mov	r0, r8
 800844c:	4649      	mov	r1, r9
 800844e:	f7f8 fc33 	bl	8000cb8 <__aeabi_d2lz>
 8008452:	f7f8 f8a3 	bl	800059c <__aeabi_l2d>
 8008456:	4602      	mov	r2, r0
 8008458:	460b      	mov	r3, r1
 800845a:	4640      	mov	r0, r8
 800845c:	4649      	mov	r1, r9
 800845e:	f7f7 ff13 	bl	8000288 <__aeabi_dsub>
 8008462:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008464:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008468:	ea43 030a 	orr.w	r3, r3, sl
 800846c:	4313      	orrs	r3, r2
 800846e:	4680      	mov	r8, r0
 8008470:	4689      	mov	r9, r1
 8008472:	d055      	beq.n	8008520 <_strtod_l+0xba0>
 8008474:	a336      	add	r3, pc, #216	; (adr r3, 8008550 <_strtod_l+0xbd0>)
 8008476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800847a:	f7f8 fb2f 	bl	8000adc <__aeabi_dcmplt>
 800847e:	2800      	cmp	r0, #0
 8008480:	f47f acd0 	bne.w	8007e24 <_strtod_l+0x4a4>
 8008484:	a334      	add	r3, pc, #208	; (adr r3, 8008558 <_strtod_l+0xbd8>)
 8008486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848a:	4640      	mov	r0, r8
 800848c:	4649      	mov	r1, r9
 800848e:	f7f8 fb43 	bl	8000b18 <__aeabi_dcmpgt>
 8008492:	2800      	cmp	r0, #0
 8008494:	f43f af7b 	beq.w	800838e <_strtod_l+0xa0e>
 8008498:	e4c4      	b.n	8007e24 <_strtod_l+0x4a4>
 800849a:	9b04      	ldr	r3, [sp, #16]
 800849c:	b333      	cbz	r3, 80084ec <_strtod_l+0xb6c>
 800849e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084a0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80084a4:	d822      	bhi.n	80084ec <_strtod_l+0xb6c>
 80084a6:	a32e      	add	r3, pc, #184	; (adr r3, 8008560 <_strtod_l+0xbe0>)
 80084a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ac:	4640      	mov	r0, r8
 80084ae:	4649      	mov	r1, r9
 80084b0:	f7f8 fb1e 	bl	8000af0 <__aeabi_dcmple>
 80084b4:	b1a0      	cbz	r0, 80084e0 <_strtod_l+0xb60>
 80084b6:	4649      	mov	r1, r9
 80084b8:	4640      	mov	r0, r8
 80084ba:	f7f8 fb75 	bl	8000ba8 <__aeabi_d2uiz>
 80084be:	2801      	cmp	r0, #1
 80084c0:	bf38      	it	cc
 80084c2:	2001      	movcc	r0, #1
 80084c4:	f7f8 f81e 	bl	8000504 <__aeabi_ui2d>
 80084c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084ca:	4680      	mov	r8, r0
 80084cc:	4689      	mov	r9, r1
 80084ce:	bb23      	cbnz	r3, 800851a <_strtod_l+0xb9a>
 80084d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80084d4:	9010      	str	r0, [sp, #64]	; 0x40
 80084d6:	9311      	str	r3, [sp, #68]	; 0x44
 80084d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80084dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80084e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80084e4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80084e8:	1a9b      	subs	r3, r3, r2
 80084ea:	9309      	str	r3, [sp, #36]	; 0x24
 80084ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80084f0:	eeb0 0a48 	vmov.f32	s0, s16
 80084f4:	eef0 0a68 	vmov.f32	s1, s17
 80084f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80084fc:	f001 ff46 	bl	800a38c <__ulp>
 8008500:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008504:	ec53 2b10 	vmov	r2, r3, d0
 8008508:	f7f8 f876 	bl	80005f8 <__aeabi_dmul>
 800850c:	ec53 2b18 	vmov	r2, r3, d8
 8008510:	f7f7 febc 	bl	800028c <__adddf3>
 8008514:	4682      	mov	sl, r0
 8008516:	468b      	mov	fp, r1
 8008518:	e78d      	b.n	8008436 <_strtod_l+0xab6>
 800851a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800851e:	e7db      	b.n	80084d8 <_strtod_l+0xb58>
 8008520:	a311      	add	r3, pc, #68	; (adr r3, 8008568 <_strtod_l+0xbe8>)
 8008522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008526:	f7f8 fad9 	bl	8000adc <__aeabi_dcmplt>
 800852a:	e7b2      	b.n	8008492 <_strtod_l+0xb12>
 800852c:	2300      	movs	r3, #0
 800852e:	930a      	str	r3, [sp, #40]	; 0x28
 8008530:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008532:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008534:	6013      	str	r3, [r2, #0]
 8008536:	f7ff ba6b 	b.w	8007a10 <_strtod_l+0x90>
 800853a:	2a65      	cmp	r2, #101	; 0x65
 800853c:	f43f ab5f 	beq.w	8007bfe <_strtod_l+0x27e>
 8008540:	2a45      	cmp	r2, #69	; 0x45
 8008542:	f43f ab5c 	beq.w	8007bfe <_strtod_l+0x27e>
 8008546:	2301      	movs	r3, #1
 8008548:	f7ff bb94 	b.w	8007c74 <_strtod_l+0x2f4>
 800854c:	f3af 8000 	nop.w
 8008550:	94a03595 	.word	0x94a03595
 8008554:	3fdfffff 	.word	0x3fdfffff
 8008558:	35afe535 	.word	0x35afe535
 800855c:	3fe00000 	.word	0x3fe00000
 8008560:	ffc00000 	.word	0xffc00000
 8008564:	41dfffff 	.word	0x41dfffff
 8008568:	94a03595 	.word	0x94a03595
 800856c:	3fcfffff 	.word	0x3fcfffff
 8008570:	3ff00000 	.word	0x3ff00000
 8008574:	7ff00000 	.word	0x7ff00000
 8008578:	7fe00000 	.word	0x7fe00000
 800857c:	7c9fffff 	.word	0x7c9fffff
 8008580:	3fe00000 	.word	0x3fe00000
 8008584:	bff00000 	.word	0xbff00000
 8008588:	7fefffff 	.word	0x7fefffff

0800858c <_strtod_r>:
 800858c:	4b01      	ldr	r3, [pc, #4]	; (8008594 <_strtod_r+0x8>)
 800858e:	f7ff b9f7 	b.w	8007980 <_strtod_l>
 8008592:	bf00      	nop
 8008594:	20000078 	.word	0x20000078

08008598 <_strtol_l.constprop.0>:
 8008598:	2b01      	cmp	r3, #1
 800859a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800859e:	d001      	beq.n	80085a4 <_strtol_l.constprop.0+0xc>
 80085a0:	2b24      	cmp	r3, #36	; 0x24
 80085a2:	d906      	bls.n	80085b2 <_strtol_l.constprop.0+0x1a>
 80085a4:	f7fe f83a 	bl	800661c <__errno>
 80085a8:	2316      	movs	r3, #22
 80085aa:	6003      	str	r3, [r0, #0]
 80085ac:	2000      	movs	r0, #0
 80085ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008698 <_strtol_l.constprop.0+0x100>
 80085b6:	460d      	mov	r5, r1
 80085b8:	462e      	mov	r6, r5
 80085ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80085be:	f814 700c 	ldrb.w	r7, [r4, ip]
 80085c2:	f017 0708 	ands.w	r7, r7, #8
 80085c6:	d1f7      	bne.n	80085b8 <_strtol_l.constprop.0+0x20>
 80085c8:	2c2d      	cmp	r4, #45	; 0x2d
 80085ca:	d132      	bne.n	8008632 <_strtol_l.constprop.0+0x9a>
 80085cc:	782c      	ldrb	r4, [r5, #0]
 80085ce:	2701      	movs	r7, #1
 80085d0:	1cb5      	adds	r5, r6, #2
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d05b      	beq.n	800868e <_strtol_l.constprop.0+0xf6>
 80085d6:	2b10      	cmp	r3, #16
 80085d8:	d109      	bne.n	80085ee <_strtol_l.constprop.0+0x56>
 80085da:	2c30      	cmp	r4, #48	; 0x30
 80085dc:	d107      	bne.n	80085ee <_strtol_l.constprop.0+0x56>
 80085de:	782c      	ldrb	r4, [r5, #0]
 80085e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80085e4:	2c58      	cmp	r4, #88	; 0x58
 80085e6:	d14d      	bne.n	8008684 <_strtol_l.constprop.0+0xec>
 80085e8:	786c      	ldrb	r4, [r5, #1]
 80085ea:	2310      	movs	r3, #16
 80085ec:	3502      	adds	r5, #2
 80085ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80085f2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80085f6:	f04f 0c00 	mov.w	ip, #0
 80085fa:	fbb8 f9f3 	udiv	r9, r8, r3
 80085fe:	4666      	mov	r6, ip
 8008600:	fb03 8a19 	mls	sl, r3, r9, r8
 8008604:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008608:	f1be 0f09 	cmp.w	lr, #9
 800860c:	d816      	bhi.n	800863c <_strtol_l.constprop.0+0xa4>
 800860e:	4674      	mov	r4, lr
 8008610:	42a3      	cmp	r3, r4
 8008612:	dd24      	ble.n	800865e <_strtol_l.constprop.0+0xc6>
 8008614:	f1bc 0f00 	cmp.w	ip, #0
 8008618:	db1e      	blt.n	8008658 <_strtol_l.constprop.0+0xc0>
 800861a:	45b1      	cmp	r9, r6
 800861c:	d31c      	bcc.n	8008658 <_strtol_l.constprop.0+0xc0>
 800861e:	d101      	bne.n	8008624 <_strtol_l.constprop.0+0x8c>
 8008620:	45a2      	cmp	sl, r4
 8008622:	db19      	blt.n	8008658 <_strtol_l.constprop.0+0xc0>
 8008624:	fb06 4603 	mla	r6, r6, r3, r4
 8008628:	f04f 0c01 	mov.w	ip, #1
 800862c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008630:	e7e8      	b.n	8008604 <_strtol_l.constprop.0+0x6c>
 8008632:	2c2b      	cmp	r4, #43	; 0x2b
 8008634:	bf04      	itt	eq
 8008636:	782c      	ldrbeq	r4, [r5, #0]
 8008638:	1cb5      	addeq	r5, r6, #2
 800863a:	e7ca      	b.n	80085d2 <_strtol_l.constprop.0+0x3a>
 800863c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008640:	f1be 0f19 	cmp.w	lr, #25
 8008644:	d801      	bhi.n	800864a <_strtol_l.constprop.0+0xb2>
 8008646:	3c37      	subs	r4, #55	; 0x37
 8008648:	e7e2      	b.n	8008610 <_strtol_l.constprop.0+0x78>
 800864a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800864e:	f1be 0f19 	cmp.w	lr, #25
 8008652:	d804      	bhi.n	800865e <_strtol_l.constprop.0+0xc6>
 8008654:	3c57      	subs	r4, #87	; 0x57
 8008656:	e7db      	b.n	8008610 <_strtol_l.constprop.0+0x78>
 8008658:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800865c:	e7e6      	b.n	800862c <_strtol_l.constprop.0+0x94>
 800865e:	f1bc 0f00 	cmp.w	ip, #0
 8008662:	da05      	bge.n	8008670 <_strtol_l.constprop.0+0xd8>
 8008664:	2322      	movs	r3, #34	; 0x22
 8008666:	6003      	str	r3, [r0, #0]
 8008668:	4646      	mov	r6, r8
 800866a:	b942      	cbnz	r2, 800867e <_strtol_l.constprop.0+0xe6>
 800866c:	4630      	mov	r0, r6
 800866e:	e79e      	b.n	80085ae <_strtol_l.constprop.0+0x16>
 8008670:	b107      	cbz	r7, 8008674 <_strtol_l.constprop.0+0xdc>
 8008672:	4276      	negs	r6, r6
 8008674:	2a00      	cmp	r2, #0
 8008676:	d0f9      	beq.n	800866c <_strtol_l.constprop.0+0xd4>
 8008678:	f1bc 0f00 	cmp.w	ip, #0
 800867c:	d000      	beq.n	8008680 <_strtol_l.constprop.0+0xe8>
 800867e:	1e69      	subs	r1, r5, #1
 8008680:	6011      	str	r1, [r2, #0]
 8008682:	e7f3      	b.n	800866c <_strtol_l.constprop.0+0xd4>
 8008684:	2430      	movs	r4, #48	; 0x30
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1b1      	bne.n	80085ee <_strtol_l.constprop.0+0x56>
 800868a:	2308      	movs	r3, #8
 800868c:	e7af      	b.n	80085ee <_strtol_l.constprop.0+0x56>
 800868e:	2c30      	cmp	r4, #48	; 0x30
 8008690:	d0a5      	beq.n	80085de <_strtol_l.constprop.0+0x46>
 8008692:	230a      	movs	r3, #10
 8008694:	e7ab      	b.n	80085ee <_strtol_l.constprop.0+0x56>
 8008696:	bf00      	nop
 8008698:	0800b2d1 	.word	0x0800b2d1

0800869c <_strtol_r>:
 800869c:	f7ff bf7c 	b.w	8008598 <_strtol_l.constprop.0>

080086a0 <_write_r>:
 80086a0:	b538      	push	{r3, r4, r5, lr}
 80086a2:	4d07      	ldr	r5, [pc, #28]	; (80086c0 <_write_r+0x20>)
 80086a4:	4604      	mov	r4, r0
 80086a6:	4608      	mov	r0, r1
 80086a8:	4611      	mov	r1, r2
 80086aa:	2200      	movs	r2, #0
 80086ac:	602a      	str	r2, [r5, #0]
 80086ae:	461a      	mov	r2, r3
 80086b0:	f7f8 ffa7 	bl	8001602 <_write>
 80086b4:	1c43      	adds	r3, r0, #1
 80086b6:	d102      	bne.n	80086be <_write_r+0x1e>
 80086b8:	682b      	ldr	r3, [r5, #0]
 80086ba:	b103      	cbz	r3, 80086be <_write_r+0x1e>
 80086bc:	6023      	str	r3, [r4, #0]
 80086be:	bd38      	pop	{r3, r4, r5, pc}
 80086c0:	200047fc 	.word	0x200047fc

080086c4 <_close_r>:
 80086c4:	b538      	push	{r3, r4, r5, lr}
 80086c6:	4d06      	ldr	r5, [pc, #24]	; (80086e0 <_close_r+0x1c>)
 80086c8:	2300      	movs	r3, #0
 80086ca:	4604      	mov	r4, r0
 80086cc:	4608      	mov	r0, r1
 80086ce:	602b      	str	r3, [r5, #0]
 80086d0:	f7f8 ffb3 	bl	800163a <_close>
 80086d4:	1c43      	adds	r3, r0, #1
 80086d6:	d102      	bne.n	80086de <_close_r+0x1a>
 80086d8:	682b      	ldr	r3, [r5, #0]
 80086da:	b103      	cbz	r3, 80086de <_close_r+0x1a>
 80086dc:	6023      	str	r3, [r4, #0]
 80086de:	bd38      	pop	{r3, r4, r5, pc}
 80086e0:	200047fc 	.word	0x200047fc

080086e4 <quorem>:
 80086e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e8:	6903      	ldr	r3, [r0, #16]
 80086ea:	690c      	ldr	r4, [r1, #16]
 80086ec:	42a3      	cmp	r3, r4
 80086ee:	4607      	mov	r7, r0
 80086f0:	f2c0 8081 	blt.w	80087f6 <quorem+0x112>
 80086f4:	3c01      	subs	r4, #1
 80086f6:	f101 0814 	add.w	r8, r1, #20
 80086fa:	f100 0514 	add.w	r5, r0, #20
 80086fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008702:	9301      	str	r3, [sp, #4]
 8008704:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008708:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800870c:	3301      	adds	r3, #1
 800870e:	429a      	cmp	r2, r3
 8008710:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008714:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008718:	fbb2 f6f3 	udiv	r6, r2, r3
 800871c:	d331      	bcc.n	8008782 <quorem+0x9e>
 800871e:	f04f 0e00 	mov.w	lr, #0
 8008722:	4640      	mov	r0, r8
 8008724:	46ac      	mov	ip, r5
 8008726:	46f2      	mov	sl, lr
 8008728:	f850 2b04 	ldr.w	r2, [r0], #4
 800872c:	b293      	uxth	r3, r2
 800872e:	fb06 e303 	mla	r3, r6, r3, lr
 8008732:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008736:	b29b      	uxth	r3, r3
 8008738:	ebaa 0303 	sub.w	r3, sl, r3
 800873c:	f8dc a000 	ldr.w	sl, [ip]
 8008740:	0c12      	lsrs	r2, r2, #16
 8008742:	fa13 f38a 	uxtah	r3, r3, sl
 8008746:	fb06 e202 	mla	r2, r6, r2, lr
 800874a:	9300      	str	r3, [sp, #0]
 800874c:	9b00      	ldr	r3, [sp, #0]
 800874e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008752:	b292      	uxth	r2, r2
 8008754:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008758:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800875c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008760:	4581      	cmp	r9, r0
 8008762:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008766:	f84c 3b04 	str.w	r3, [ip], #4
 800876a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800876e:	d2db      	bcs.n	8008728 <quorem+0x44>
 8008770:	f855 300b 	ldr.w	r3, [r5, fp]
 8008774:	b92b      	cbnz	r3, 8008782 <quorem+0x9e>
 8008776:	9b01      	ldr	r3, [sp, #4]
 8008778:	3b04      	subs	r3, #4
 800877a:	429d      	cmp	r5, r3
 800877c:	461a      	mov	r2, r3
 800877e:	d32e      	bcc.n	80087de <quorem+0xfa>
 8008780:	613c      	str	r4, [r7, #16]
 8008782:	4638      	mov	r0, r7
 8008784:	f001 fd5c 	bl	800a240 <__mcmp>
 8008788:	2800      	cmp	r0, #0
 800878a:	db24      	blt.n	80087d6 <quorem+0xf2>
 800878c:	3601      	adds	r6, #1
 800878e:	4628      	mov	r0, r5
 8008790:	f04f 0c00 	mov.w	ip, #0
 8008794:	f858 2b04 	ldr.w	r2, [r8], #4
 8008798:	f8d0 e000 	ldr.w	lr, [r0]
 800879c:	b293      	uxth	r3, r2
 800879e:	ebac 0303 	sub.w	r3, ip, r3
 80087a2:	0c12      	lsrs	r2, r2, #16
 80087a4:	fa13 f38e 	uxtah	r3, r3, lr
 80087a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80087ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087b6:	45c1      	cmp	r9, r8
 80087b8:	f840 3b04 	str.w	r3, [r0], #4
 80087bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80087c0:	d2e8      	bcs.n	8008794 <quorem+0xb0>
 80087c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087ca:	b922      	cbnz	r2, 80087d6 <quorem+0xf2>
 80087cc:	3b04      	subs	r3, #4
 80087ce:	429d      	cmp	r5, r3
 80087d0:	461a      	mov	r2, r3
 80087d2:	d30a      	bcc.n	80087ea <quorem+0x106>
 80087d4:	613c      	str	r4, [r7, #16]
 80087d6:	4630      	mov	r0, r6
 80087d8:	b003      	add	sp, #12
 80087da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087de:	6812      	ldr	r2, [r2, #0]
 80087e0:	3b04      	subs	r3, #4
 80087e2:	2a00      	cmp	r2, #0
 80087e4:	d1cc      	bne.n	8008780 <quorem+0x9c>
 80087e6:	3c01      	subs	r4, #1
 80087e8:	e7c7      	b.n	800877a <quorem+0x96>
 80087ea:	6812      	ldr	r2, [r2, #0]
 80087ec:	3b04      	subs	r3, #4
 80087ee:	2a00      	cmp	r2, #0
 80087f0:	d1f0      	bne.n	80087d4 <quorem+0xf0>
 80087f2:	3c01      	subs	r4, #1
 80087f4:	e7eb      	b.n	80087ce <quorem+0xea>
 80087f6:	2000      	movs	r0, #0
 80087f8:	e7ee      	b.n	80087d8 <quorem+0xf4>
 80087fa:	0000      	movs	r0, r0
 80087fc:	0000      	movs	r0, r0
	...

08008800 <_dtoa_r>:
 8008800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008804:	ed2d 8b04 	vpush	{d8-d9}
 8008808:	ec57 6b10 	vmov	r6, r7, d0
 800880c:	b093      	sub	sp, #76	; 0x4c
 800880e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008810:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008814:	9106      	str	r1, [sp, #24]
 8008816:	ee10 aa10 	vmov	sl, s0
 800881a:	4604      	mov	r4, r0
 800881c:	9209      	str	r2, [sp, #36]	; 0x24
 800881e:	930c      	str	r3, [sp, #48]	; 0x30
 8008820:	46bb      	mov	fp, r7
 8008822:	b975      	cbnz	r5, 8008842 <_dtoa_r+0x42>
 8008824:	2010      	movs	r0, #16
 8008826:	f7fe f81d 	bl	8006864 <malloc>
 800882a:	4602      	mov	r2, r0
 800882c:	6260      	str	r0, [r4, #36]	; 0x24
 800882e:	b920      	cbnz	r0, 800883a <_dtoa_r+0x3a>
 8008830:	4ba7      	ldr	r3, [pc, #668]	; (8008ad0 <_dtoa_r+0x2d0>)
 8008832:	21ea      	movs	r1, #234	; 0xea
 8008834:	48a7      	ldr	r0, [pc, #668]	; (8008ad4 <_dtoa_r+0x2d4>)
 8008836:	f002 f891 	bl	800a95c <__assert_func>
 800883a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800883e:	6005      	str	r5, [r0, #0]
 8008840:	60c5      	str	r5, [r0, #12]
 8008842:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008844:	6819      	ldr	r1, [r3, #0]
 8008846:	b151      	cbz	r1, 800885e <_dtoa_r+0x5e>
 8008848:	685a      	ldr	r2, [r3, #4]
 800884a:	604a      	str	r2, [r1, #4]
 800884c:	2301      	movs	r3, #1
 800884e:	4093      	lsls	r3, r2
 8008850:	608b      	str	r3, [r1, #8]
 8008852:	4620      	mov	r0, r4
 8008854:	f001 fa68 	bl	8009d28 <_Bfree>
 8008858:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800885a:	2200      	movs	r2, #0
 800885c:	601a      	str	r2, [r3, #0]
 800885e:	1e3b      	subs	r3, r7, #0
 8008860:	bfaa      	itet	ge
 8008862:	2300      	movge	r3, #0
 8008864:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008868:	f8c8 3000 	strge.w	r3, [r8]
 800886c:	4b9a      	ldr	r3, [pc, #616]	; (8008ad8 <_dtoa_r+0x2d8>)
 800886e:	bfbc      	itt	lt
 8008870:	2201      	movlt	r2, #1
 8008872:	f8c8 2000 	strlt.w	r2, [r8]
 8008876:	ea33 030b 	bics.w	r3, r3, fp
 800887a:	d11b      	bne.n	80088b4 <_dtoa_r+0xb4>
 800887c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800887e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008882:	6013      	str	r3, [r2, #0]
 8008884:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008888:	4333      	orrs	r3, r6
 800888a:	f000 8592 	beq.w	80093b2 <_dtoa_r+0xbb2>
 800888e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008890:	b963      	cbnz	r3, 80088ac <_dtoa_r+0xac>
 8008892:	4b92      	ldr	r3, [pc, #584]	; (8008adc <_dtoa_r+0x2dc>)
 8008894:	e022      	b.n	80088dc <_dtoa_r+0xdc>
 8008896:	4b92      	ldr	r3, [pc, #584]	; (8008ae0 <_dtoa_r+0x2e0>)
 8008898:	9301      	str	r3, [sp, #4]
 800889a:	3308      	adds	r3, #8
 800889c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800889e:	6013      	str	r3, [r2, #0]
 80088a0:	9801      	ldr	r0, [sp, #4]
 80088a2:	b013      	add	sp, #76	; 0x4c
 80088a4:	ecbd 8b04 	vpop	{d8-d9}
 80088a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ac:	4b8b      	ldr	r3, [pc, #556]	; (8008adc <_dtoa_r+0x2dc>)
 80088ae:	9301      	str	r3, [sp, #4]
 80088b0:	3303      	adds	r3, #3
 80088b2:	e7f3      	b.n	800889c <_dtoa_r+0x9c>
 80088b4:	2200      	movs	r2, #0
 80088b6:	2300      	movs	r3, #0
 80088b8:	4650      	mov	r0, sl
 80088ba:	4659      	mov	r1, fp
 80088bc:	f7f8 f904 	bl	8000ac8 <__aeabi_dcmpeq>
 80088c0:	ec4b ab19 	vmov	d9, sl, fp
 80088c4:	4680      	mov	r8, r0
 80088c6:	b158      	cbz	r0, 80088e0 <_dtoa_r+0xe0>
 80088c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088ca:	2301      	movs	r3, #1
 80088cc:	6013      	str	r3, [r2, #0]
 80088ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f000 856b 	beq.w	80093ac <_dtoa_r+0xbac>
 80088d6:	4883      	ldr	r0, [pc, #524]	; (8008ae4 <_dtoa_r+0x2e4>)
 80088d8:	6018      	str	r0, [r3, #0]
 80088da:	1e43      	subs	r3, r0, #1
 80088dc:	9301      	str	r3, [sp, #4]
 80088de:	e7df      	b.n	80088a0 <_dtoa_r+0xa0>
 80088e0:	ec4b ab10 	vmov	d0, sl, fp
 80088e4:	aa10      	add	r2, sp, #64	; 0x40
 80088e6:	a911      	add	r1, sp, #68	; 0x44
 80088e8:	4620      	mov	r0, r4
 80088ea:	f001 fdcb 	bl	800a484 <__d2b>
 80088ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80088f2:	ee08 0a10 	vmov	s16, r0
 80088f6:	2d00      	cmp	r5, #0
 80088f8:	f000 8084 	beq.w	8008a04 <_dtoa_r+0x204>
 80088fc:	ee19 3a90 	vmov	r3, s19
 8008900:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008904:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008908:	4656      	mov	r6, sl
 800890a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800890e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008912:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008916:	4b74      	ldr	r3, [pc, #464]	; (8008ae8 <_dtoa_r+0x2e8>)
 8008918:	2200      	movs	r2, #0
 800891a:	4630      	mov	r0, r6
 800891c:	4639      	mov	r1, r7
 800891e:	f7f7 fcb3 	bl	8000288 <__aeabi_dsub>
 8008922:	a365      	add	r3, pc, #404	; (adr r3, 8008ab8 <_dtoa_r+0x2b8>)
 8008924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008928:	f7f7 fe66 	bl	80005f8 <__aeabi_dmul>
 800892c:	a364      	add	r3, pc, #400	; (adr r3, 8008ac0 <_dtoa_r+0x2c0>)
 800892e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008932:	f7f7 fcab 	bl	800028c <__adddf3>
 8008936:	4606      	mov	r6, r0
 8008938:	4628      	mov	r0, r5
 800893a:	460f      	mov	r7, r1
 800893c:	f7f7 fdf2 	bl	8000524 <__aeabi_i2d>
 8008940:	a361      	add	r3, pc, #388	; (adr r3, 8008ac8 <_dtoa_r+0x2c8>)
 8008942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008946:	f7f7 fe57 	bl	80005f8 <__aeabi_dmul>
 800894a:	4602      	mov	r2, r0
 800894c:	460b      	mov	r3, r1
 800894e:	4630      	mov	r0, r6
 8008950:	4639      	mov	r1, r7
 8008952:	f7f7 fc9b 	bl	800028c <__adddf3>
 8008956:	4606      	mov	r6, r0
 8008958:	460f      	mov	r7, r1
 800895a:	f7f8 f8fd 	bl	8000b58 <__aeabi_d2iz>
 800895e:	2200      	movs	r2, #0
 8008960:	9000      	str	r0, [sp, #0]
 8008962:	2300      	movs	r3, #0
 8008964:	4630      	mov	r0, r6
 8008966:	4639      	mov	r1, r7
 8008968:	f7f8 f8b8 	bl	8000adc <__aeabi_dcmplt>
 800896c:	b150      	cbz	r0, 8008984 <_dtoa_r+0x184>
 800896e:	9800      	ldr	r0, [sp, #0]
 8008970:	f7f7 fdd8 	bl	8000524 <__aeabi_i2d>
 8008974:	4632      	mov	r2, r6
 8008976:	463b      	mov	r3, r7
 8008978:	f7f8 f8a6 	bl	8000ac8 <__aeabi_dcmpeq>
 800897c:	b910      	cbnz	r0, 8008984 <_dtoa_r+0x184>
 800897e:	9b00      	ldr	r3, [sp, #0]
 8008980:	3b01      	subs	r3, #1
 8008982:	9300      	str	r3, [sp, #0]
 8008984:	9b00      	ldr	r3, [sp, #0]
 8008986:	2b16      	cmp	r3, #22
 8008988:	d85a      	bhi.n	8008a40 <_dtoa_r+0x240>
 800898a:	9a00      	ldr	r2, [sp, #0]
 800898c:	4b57      	ldr	r3, [pc, #348]	; (8008aec <_dtoa_r+0x2ec>)
 800898e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008996:	ec51 0b19 	vmov	r0, r1, d9
 800899a:	f7f8 f89f 	bl	8000adc <__aeabi_dcmplt>
 800899e:	2800      	cmp	r0, #0
 80089a0:	d050      	beq.n	8008a44 <_dtoa_r+0x244>
 80089a2:	9b00      	ldr	r3, [sp, #0]
 80089a4:	3b01      	subs	r3, #1
 80089a6:	9300      	str	r3, [sp, #0]
 80089a8:	2300      	movs	r3, #0
 80089aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80089ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80089ae:	1b5d      	subs	r5, r3, r5
 80089b0:	1e6b      	subs	r3, r5, #1
 80089b2:	9305      	str	r3, [sp, #20]
 80089b4:	bf45      	ittet	mi
 80089b6:	f1c5 0301 	rsbmi	r3, r5, #1
 80089ba:	9304      	strmi	r3, [sp, #16]
 80089bc:	2300      	movpl	r3, #0
 80089be:	2300      	movmi	r3, #0
 80089c0:	bf4c      	ite	mi
 80089c2:	9305      	strmi	r3, [sp, #20]
 80089c4:	9304      	strpl	r3, [sp, #16]
 80089c6:	9b00      	ldr	r3, [sp, #0]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	db3d      	blt.n	8008a48 <_dtoa_r+0x248>
 80089cc:	9b05      	ldr	r3, [sp, #20]
 80089ce:	9a00      	ldr	r2, [sp, #0]
 80089d0:	920a      	str	r2, [sp, #40]	; 0x28
 80089d2:	4413      	add	r3, r2
 80089d4:	9305      	str	r3, [sp, #20]
 80089d6:	2300      	movs	r3, #0
 80089d8:	9307      	str	r3, [sp, #28]
 80089da:	9b06      	ldr	r3, [sp, #24]
 80089dc:	2b09      	cmp	r3, #9
 80089de:	f200 8089 	bhi.w	8008af4 <_dtoa_r+0x2f4>
 80089e2:	2b05      	cmp	r3, #5
 80089e4:	bfc4      	itt	gt
 80089e6:	3b04      	subgt	r3, #4
 80089e8:	9306      	strgt	r3, [sp, #24]
 80089ea:	9b06      	ldr	r3, [sp, #24]
 80089ec:	f1a3 0302 	sub.w	r3, r3, #2
 80089f0:	bfcc      	ite	gt
 80089f2:	2500      	movgt	r5, #0
 80089f4:	2501      	movle	r5, #1
 80089f6:	2b03      	cmp	r3, #3
 80089f8:	f200 8087 	bhi.w	8008b0a <_dtoa_r+0x30a>
 80089fc:	e8df f003 	tbb	[pc, r3]
 8008a00:	59383a2d 	.word	0x59383a2d
 8008a04:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008a08:	441d      	add	r5, r3
 8008a0a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008a0e:	2b20      	cmp	r3, #32
 8008a10:	bfc1      	itttt	gt
 8008a12:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008a16:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008a1a:	fa0b f303 	lslgt.w	r3, fp, r3
 8008a1e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008a22:	bfda      	itte	le
 8008a24:	f1c3 0320 	rsble	r3, r3, #32
 8008a28:	fa06 f003 	lslle.w	r0, r6, r3
 8008a2c:	4318      	orrgt	r0, r3
 8008a2e:	f7f7 fd69 	bl	8000504 <__aeabi_ui2d>
 8008a32:	2301      	movs	r3, #1
 8008a34:	4606      	mov	r6, r0
 8008a36:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008a3a:	3d01      	subs	r5, #1
 8008a3c:	930e      	str	r3, [sp, #56]	; 0x38
 8008a3e:	e76a      	b.n	8008916 <_dtoa_r+0x116>
 8008a40:	2301      	movs	r3, #1
 8008a42:	e7b2      	b.n	80089aa <_dtoa_r+0x1aa>
 8008a44:	900b      	str	r0, [sp, #44]	; 0x2c
 8008a46:	e7b1      	b.n	80089ac <_dtoa_r+0x1ac>
 8008a48:	9b04      	ldr	r3, [sp, #16]
 8008a4a:	9a00      	ldr	r2, [sp, #0]
 8008a4c:	1a9b      	subs	r3, r3, r2
 8008a4e:	9304      	str	r3, [sp, #16]
 8008a50:	4253      	negs	r3, r2
 8008a52:	9307      	str	r3, [sp, #28]
 8008a54:	2300      	movs	r3, #0
 8008a56:	930a      	str	r3, [sp, #40]	; 0x28
 8008a58:	e7bf      	b.n	80089da <_dtoa_r+0x1da>
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	9308      	str	r3, [sp, #32]
 8008a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	dc55      	bgt.n	8008b10 <_dtoa_r+0x310>
 8008a64:	2301      	movs	r3, #1
 8008a66:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	9209      	str	r2, [sp, #36]	; 0x24
 8008a6e:	e00c      	b.n	8008a8a <_dtoa_r+0x28a>
 8008a70:	2301      	movs	r3, #1
 8008a72:	e7f3      	b.n	8008a5c <_dtoa_r+0x25c>
 8008a74:	2300      	movs	r3, #0
 8008a76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a78:	9308      	str	r3, [sp, #32]
 8008a7a:	9b00      	ldr	r3, [sp, #0]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	9302      	str	r3, [sp, #8]
 8008a80:	3301      	adds	r3, #1
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	9303      	str	r3, [sp, #12]
 8008a86:	bfb8      	it	lt
 8008a88:	2301      	movlt	r3, #1
 8008a8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	6042      	str	r2, [r0, #4]
 8008a90:	2204      	movs	r2, #4
 8008a92:	f102 0614 	add.w	r6, r2, #20
 8008a96:	429e      	cmp	r6, r3
 8008a98:	6841      	ldr	r1, [r0, #4]
 8008a9a:	d93d      	bls.n	8008b18 <_dtoa_r+0x318>
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	f001 f903 	bl	8009ca8 <_Balloc>
 8008aa2:	9001      	str	r0, [sp, #4]
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	d13b      	bne.n	8008b20 <_dtoa_r+0x320>
 8008aa8:	4b11      	ldr	r3, [pc, #68]	; (8008af0 <_dtoa_r+0x2f0>)
 8008aaa:	4602      	mov	r2, r0
 8008aac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008ab0:	e6c0      	b.n	8008834 <_dtoa_r+0x34>
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e7df      	b.n	8008a76 <_dtoa_r+0x276>
 8008ab6:	bf00      	nop
 8008ab8:	636f4361 	.word	0x636f4361
 8008abc:	3fd287a7 	.word	0x3fd287a7
 8008ac0:	8b60c8b3 	.word	0x8b60c8b3
 8008ac4:	3fc68a28 	.word	0x3fc68a28
 8008ac8:	509f79fb 	.word	0x509f79fb
 8008acc:	3fd34413 	.word	0x3fd34413
 8008ad0:	0800b3de 	.word	0x0800b3de
 8008ad4:	0800b3f5 	.word	0x0800b3f5
 8008ad8:	7ff00000 	.word	0x7ff00000
 8008adc:	0800b3da 	.word	0x0800b3da
 8008ae0:	0800b3d1 	.word	0x0800b3d1
 8008ae4:	0800b255 	.word	0x0800b255
 8008ae8:	3ff80000 	.word	0x3ff80000
 8008aec:	0800b560 	.word	0x0800b560
 8008af0:	0800b450 	.word	0x0800b450
 8008af4:	2501      	movs	r5, #1
 8008af6:	2300      	movs	r3, #0
 8008af8:	9306      	str	r3, [sp, #24]
 8008afa:	9508      	str	r5, [sp, #32]
 8008afc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b00:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008b04:	2200      	movs	r2, #0
 8008b06:	2312      	movs	r3, #18
 8008b08:	e7b0      	b.n	8008a6c <_dtoa_r+0x26c>
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	9308      	str	r3, [sp, #32]
 8008b0e:	e7f5      	b.n	8008afc <_dtoa_r+0x2fc>
 8008b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b12:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008b16:	e7b8      	b.n	8008a8a <_dtoa_r+0x28a>
 8008b18:	3101      	adds	r1, #1
 8008b1a:	6041      	str	r1, [r0, #4]
 8008b1c:	0052      	lsls	r2, r2, #1
 8008b1e:	e7b8      	b.n	8008a92 <_dtoa_r+0x292>
 8008b20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b22:	9a01      	ldr	r2, [sp, #4]
 8008b24:	601a      	str	r2, [r3, #0]
 8008b26:	9b03      	ldr	r3, [sp, #12]
 8008b28:	2b0e      	cmp	r3, #14
 8008b2a:	f200 809d 	bhi.w	8008c68 <_dtoa_r+0x468>
 8008b2e:	2d00      	cmp	r5, #0
 8008b30:	f000 809a 	beq.w	8008c68 <_dtoa_r+0x468>
 8008b34:	9b00      	ldr	r3, [sp, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	dd32      	ble.n	8008ba0 <_dtoa_r+0x3a0>
 8008b3a:	4ab7      	ldr	r2, [pc, #732]	; (8008e18 <_dtoa_r+0x618>)
 8008b3c:	f003 030f 	and.w	r3, r3, #15
 8008b40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008b44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b48:	9b00      	ldr	r3, [sp, #0]
 8008b4a:	05d8      	lsls	r0, r3, #23
 8008b4c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008b50:	d516      	bpl.n	8008b80 <_dtoa_r+0x380>
 8008b52:	4bb2      	ldr	r3, [pc, #712]	; (8008e1c <_dtoa_r+0x61c>)
 8008b54:	ec51 0b19 	vmov	r0, r1, d9
 8008b58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b5c:	f7f7 fe76 	bl	800084c <__aeabi_ddiv>
 8008b60:	f007 070f 	and.w	r7, r7, #15
 8008b64:	4682      	mov	sl, r0
 8008b66:	468b      	mov	fp, r1
 8008b68:	2503      	movs	r5, #3
 8008b6a:	4eac      	ldr	r6, [pc, #688]	; (8008e1c <_dtoa_r+0x61c>)
 8008b6c:	b957      	cbnz	r7, 8008b84 <_dtoa_r+0x384>
 8008b6e:	4642      	mov	r2, r8
 8008b70:	464b      	mov	r3, r9
 8008b72:	4650      	mov	r0, sl
 8008b74:	4659      	mov	r1, fp
 8008b76:	f7f7 fe69 	bl	800084c <__aeabi_ddiv>
 8008b7a:	4682      	mov	sl, r0
 8008b7c:	468b      	mov	fp, r1
 8008b7e:	e028      	b.n	8008bd2 <_dtoa_r+0x3d2>
 8008b80:	2502      	movs	r5, #2
 8008b82:	e7f2      	b.n	8008b6a <_dtoa_r+0x36a>
 8008b84:	07f9      	lsls	r1, r7, #31
 8008b86:	d508      	bpl.n	8008b9a <_dtoa_r+0x39a>
 8008b88:	4640      	mov	r0, r8
 8008b8a:	4649      	mov	r1, r9
 8008b8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008b90:	f7f7 fd32 	bl	80005f8 <__aeabi_dmul>
 8008b94:	3501      	adds	r5, #1
 8008b96:	4680      	mov	r8, r0
 8008b98:	4689      	mov	r9, r1
 8008b9a:	107f      	asrs	r7, r7, #1
 8008b9c:	3608      	adds	r6, #8
 8008b9e:	e7e5      	b.n	8008b6c <_dtoa_r+0x36c>
 8008ba0:	f000 809b 	beq.w	8008cda <_dtoa_r+0x4da>
 8008ba4:	9b00      	ldr	r3, [sp, #0]
 8008ba6:	4f9d      	ldr	r7, [pc, #628]	; (8008e1c <_dtoa_r+0x61c>)
 8008ba8:	425e      	negs	r6, r3
 8008baa:	4b9b      	ldr	r3, [pc, #620]	; (8008e18 <_dtoa_r+0x618>)
 8008bac:	f006 020f 	and.w	r2, r6, #15
 8008bb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb8:	ec51 0b19 	vmov	r0, r1, d9
 8008bbc:	f7f7 fd1c 	bl	80005f8 <__aeabi_dmul>
 8008bc0:	1136      	asrs	r6, r6, #4
 8008bc2:	4682      	mov	sl, r0
 8008bc4:	468b      	mov	fp, r1
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	2502      	movs	r5, #2
 8008bca:	2e00      	cmp	r6, #0
 8008bcc:	d17a      	bne.n	8008cc4 <_dtoa_r+0x4c4>
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1d3      	bne.n	8008b7a <_dtoa_r+0x37a>
 8008bd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	f000 8082 	beq.w	8008cde <_dtoa_r+0x4de>
 8008bda:	4b91      	ldr	r3, [pc, #580]	; (8008e20 <_dtoa_r+0x620>)
 8008bdc:	2200      	movs	r2, #0
 8008bde:	4650      	mov	r0, sl
 8008be0:	4659      	mov	r1, fp
 8008be2:	f7f7 ff7b 	bl	8000adc <__aeabi_dcmplt>
 8008be6:	2800      	cmp	r0, #0
 8008be8:	d079      	beq.n	8008cde <_dtoa_r+0x4de>
 8008bea:	9b03      	ldr	r3, [sp, #12]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d076      	beq.n	8008cde <_dtoa_r+0x4de>
 8008bf0:	9b02      	ldr	r3, [sp, #8]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	dd36      	ble.n	8008c64 <_dtoa_r+0x464>
 8008bf6:	9b00      	ldr	r3, [sp, #0]
 8008bf8:	4650      	mov	r0, sl
 8008bfa:	4659      	mov	r1, fp
 8008bfc:	1e5f      	subs	r7, r3, #1
 8008bfe:	2200      	movs	r2, #0
 8008c00:	4b88      	ldr	r3, [pc, #544]	; (8008e24 <_dtoa_r+0x624>)
 8008c02:	f7f7 fcf9 	bl	80005f8 <__aeabi_dmul>
 8008c06:	9e02      	ldr	r6, [sp, #8]
 8008c08:	4682      	mov	sl, r0
 8008c0a:	468b      	mov	fp, r1
 8008c0c:	3501      	adds	r5, #1
 8008c0e:	4628      	mov	r0, r5
 8008c10:	f7f7 fc88 	bl	8000524 <__aeabi_i2d>
 8008c14:	4652      	mov	r2, sl
 8008c16:	465b      	mov	r3, fp
 8008c18:	f7f7 fcee 	bl	80005f8 <__aeabi_dmul>
 8008c1c:	4b82      	ldr	r3, [pc, #520]	; (8008e28 <_dtoa_r+0x628>)
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f7f7 fb34 	bl	800028c <__adddf3>
 8008c24:	46d0      	mov	r8, sl
 8008c26:	46d9      	mov	r9, fp
 8008c28:	4682      	mov	sl, r0
 8008c2a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008c2e:	2e00      	cmp	r6, #0
 8008c30:	d158      	bne.n	8008ce4 <_dtoa_r+0x4e4>
 8008c32:	4b7e      	ldr	r3, [pc, #504]	; (8008e2c <_dtoa_r+0x62c>)
 8008c34:	2200      	movs	r2, #0
 8008c36:	4640      	mov	r0, r8
 8008c38:	4649      	mov	r1, r9
 8008c3a:	f7f7 fb25 	bl	8000288 <__aeabi_dsub>
 8008c3e:	4652      	mov	r2, sl
 8008c40:	465b      	mov	r3, fp
 8008c42:	4680      	mov	r8, r0
 8008c44:	4689      	mov	r9, r1
 8008c46:	f7f7 ff67 	bl	8000b18 <__aeabi_dcmpgt>
 8008c4a:	2800      	cmp	r0, #0
 8008c4c:	f040 8295 	bne.w	800917a <_dtoa_r+0x97a>
 8008c50:	4652      	mov	r2, sl
 8008c52:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008c56:	4640      	mov	r0, r8
 8008c58:	4649      	mov	r1, r9
 8008c5a:	f7f7 ff3f 	bl	8000adc <__aeabi_dcmplt>
 8008c5e:	2800      	cmp	r0, #0
 8008c60:	f040 8289 	bne.w	8009176 <_dtoa_r+0x976>
 8008c64:	ec5b ab19 	vmov	sl, fp, d9
 8008c68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f2c0 8148 	blt.w	8008f00 <_dtoa_r+0x700>
 8008c70:	9a00      	ldr	r2, [sp, #0]
 8008c72:	2a0e      	cmp	r2, #14
 8008c74:	f300 8144 	bgt.w	8008f00 <_dtoa_r+0x700>
 8008c78:	4b67      	ldr	r3, [pc, #412]	; (8008e18 <_dtoa_r+0x618>)
 8008c7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	f280 80d5 	bge.w	8008e34 <_dtoa_r+0x634>
 8008c8a:	9b03      	ldr	r3, [sp, #12]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f300 80d1 	bgt.w	8008e34 <_dtoa_r+0x634>
 8008c92:	f040 826f 	bne.w	8009174 <_dtoa_r+0x974>
 8008c96:	4b65      	ldr	r3, [pc, #404]	; (8008e2c <_dtoa_r+0x62c>)
 8008c98:	2200      	movs	r2, #0
 8008c9a:	4640      	mov	r0, r8
 8008c9c:	4649      	mov	r1, r9
 8008c9e:	f7f7 fcab 	bl	80005f8 <__aeabi_dmul>
 8008ca2:	4652      	mov	r2, sl
 8008ca4:	465b      	mov	r3, fp
 8008ca6:	f7f7 ff2d 	bl	8000b04 <__aeabi_dcmpge>
 8008caa:	9e03      	ldr	r6, [sp, #12]
 8008cac:	4637      	mov	r7, r6
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	f040 8245 	bne.w	800913e <_dtoa_r+0x93e>
 8008cb4:	9d01      	ldr	r5, [sp, #4]
 8008cb6:	2331      	movs	r3, #49	; 0x31
 8008cb8:	f805 3b01 	strb.w	r3, [r5], #1
 8008cbc:	9b00      	ldr	r3, [sp, #0]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	9300      	str	r3, [sp, #0]
 8008cc2:	e240      	b.n	8009146 <_dtoa_r+0x946>
 8008cc4:	07f2      	lsls	r2, r6, #31
 8008cc6:	d505      	bpl.n	8008cd4 <_dtoa_r+0x4d4>
 8008cc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ccc:	f7f7 fc94 	bl	80005f8 <__aeabi_dmul>
 8008cd0:	3501      	adds	r5, #1
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	1076      	asrs	r6, r6, #1
 8008cd6:	3708      	adds	r7, #8
 8008cd8:	e777      	b.n	8008bca <_dtoa_r+0x3ca>
 8008cda:	2502      	movs	r5, #2
 8008cdc:	e779      	b.n	8008bd2 <_dtoa_r+0x3d2>
 8008cde:	9f00      	ldr	r7, [sp, #0]
 8008ce0:	9e03      	ldr	r6, [sp, #12]
 8008ce2:	e794      	b.n	8008c0e <_dtoa_r+0x40e>
 8008ce4:	9901      	ldr	r1, [sp, #4]
 8008ce6:	4b4c      	ldr	r3, [pc, #304]	; (8008e18 <_dtoa_r+0x618>)
 8008ce8:	4431      	add	r1, r6
 8008cea:	910d      	str	r1, [sp, #52]	; 0x34
 8008cec:	9908      	ldr	r1, [sp, #32]
 8008cee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008cf2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008cf6:	2900      	cmp	r1, #0
 8008cf8:	d043      	beq.n	8008d82 <_dtoa_r+0x582>
 8008cfa:	494d      	ldr	r1, [pc, #308]	; (8008e30 <_dtoa_r+0x630>)
 8008cfc:	2000      	movs	r0, #0
 8008cfe:	f7f7 fda5 	bl	800084c <__aeabi_ddiv>
 8008d02:	4652      	mov	r2, sl
 8008d04:	465b      	mov	r3, fp
 8008d06:	f7f7 fabf 	bl	8000288 <__aeabi_dsub>
 8008d0a:	9d01      	ldr	r5, [sp, #4]
 8008d0c:	4682      	mov	sl, r0
 8008d0e:	468b      	mov	fp, r1
 8008d10:	4649      	mov	r1, r9
 8008d12:	4640      	mov	r0, r8
 8008d14:	f7f7 ff20 	bl	8000b58 <__aeabi_d2iz>
 8008d18:	4606      	mov	r6, r0
 8008d1a:	f7f7 fc03 	bl	8000524 <__aeabi_i2d>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	460b      	mov	r3, r1
 8008d22:	4640      	mov	r0, r8
 8008d24:	4649      	mov	r1, r9
 8008d26:	f7f7 faaf 	bl	8000288 <__aeabi_dsub>
 8008d2a:	3630      	adds	r6, #48	; 0x30
 8008d2c:	f805 6b01 	strb.w	r6, [r5], #1
 8008d30:	4652      	mov	r2, sl
 8008d32:	465b      	mov	r3, fp
 8008d34:	4680      	mov	r8, r0
 8008d36:	4689      	mov	r9, r1
 8008d38:	f7f7 fed0 	bl	8000adc <__aeabi_dcmplt>
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	d163      	bne.n	8008e08 <_dtoa_r+0x608>
 8008d40:	4642      	mov	r2, r8
 8008d42:	464b      	mov	r3, r9
 8008d44:	4936      	ldr	r1, [pc, #216]	; (8008e20 <_dtoa_r+0x620>)
 8008d46:	2000      	movs	r0, #0
 8008d48:	f7f7 fa9e 	bl	8000288 <__aeabi_dsub>
 8008d4c:	4652      	mov	r2, sl
 8008d4e:	465b      	mov	r3, fp
 8008d50:	f7f7 fec4 	bl	8000adc <__aeabi_dcmplt>
 8008d54:	2800      	cmp	r0, #0
 8008d56:	f040 80b5 	bne.w	8008ec4 <_dtoa_r+0x6c4>
 8008d5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d5c:	429d      	cmp	r5, r3
 8008d5e:	d081      	beq.n	8008c64 <_dtoa_r+0x464>
 8008d60:	4b30      	ldr	r3, [pc, #192]	; (8008e24 <_dtoa_r+0x624>)
 8008d62:	2200      	movs	r2, #0
 8008d64:	4650      	mov	r0, sl
 8008d66:	4659      	mov	r1, fp
 8008d68:	f7f7 fc46 	bl	80005f8 <__aeabi_dmul>
 8008d6c:	4b2d      	ldr	r3, [pc, #180]	; (8008e24 <_dtoa_r+0x624>)
 8008d6e:	4682      	mov	sl, r0
 8008d70:	468b      	mov	fp, r1
 8008d72:	4640      	mov	r0, r8
 8008d74:	4649      	mov	r1, r9
 8008d76:	2200      	movs	r2, #0
 8008d78:	f7f7 fc3e 	bl	80005f8 <__aeabi_dmul>
 8008d7c:	4680      	mov	r8, r0
 8008d7e:	4689      	mov	r9, r1
 8008d80:	e7c6      	b.n	8008d10 <_dtoa_r+0x510>
 8008d82:	4650      	mov	r0, sl
 8008d84:	4659      	mov	r1, fp
 8008d86:	f7f7 fc37 	bl	80005f8 <__aeabi_dmul>
 8008d8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d8c:	9d01      	ldr	r5, [sp, #4]
 8008d8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d90:	4682      	mov	sl, r0
 8008d92:	468b      	mov	fp, r1
 8008d94:	4649      	mov	r1, r9
 8008d96:	4640      	mov	r0, r8
 8008d98:	f7f7 fede 	bl	8000b58 <__aeabi_d2iz>
 8008d9c:	4606      	mov	r6, r0
 8008d9e:	f7f7 fbc1 	bl	8000524 <__aeabi_i2d>
 8008da2:	3630      	adds	r6, #48	; 0x30
 8008da4:	4602      	mov	r2, r0
 8008da6:	460b      	mov	r3, r1
 8008da8:	4640      	mov	r0, r8
 8008daa:	4649      	mov	r1, r9
 8008dac:	f7f7 fa6c 	bl	8000288 <__aeabi_dsub>
 8008db0:	f805 6b01 	strb.w	r6, [r5], #1
 8008db4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008db6:	429d      	cmp	r5, r3
 8008db8:	4680      	mov	r8, r0
 8008dba:	4689      	mov	r9, r1
 8008dbc:	f04f 0200 	mov.w	r2, #0
 8008dc0:	d124      	bne.n	8008e0c <_dtoa_r+0x60c>
 8008dc2:	4b1b      	ldr	r3, [pc, #108]	; (8008e30 <_dtoa_r+0x630>)
 8008dc4:	4650      	mov	r0, sl
 8008dc6:	4659      	mov	r1, fp
 8008dc8:	f7f7 fa60 	bl	800028c <__adddf3>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	460b      	mov	r3, r1
 8008dd0:	4640      	mov	r0, r8
 8008dd2:	4649      	mov	r1, r9
 8008dd4:	f7f7 fea0 	bl	8000b18 <__aeabi_dcmpgt>
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	d173      	bne.n	8008ec4 <_dtoa_r+0x6c4>
 8008ddc:	4652      	mov	r2, sl
 8008dde:	465b      	mov	r3, fp
 8008de0:	4913      	ldr	r1, [pc, #76]	; (8008e30 <_dtoa_r+0x630>)
 8008de2:	2000      	movs	r0, #0
 8008de4:	f7f7 fa50 	bl	8000288 <__aeabi_dsub>
 8008de8:	4602      	mov	r2, r0
 8008dea:	460b      	mov	r3, r1
 8008dec:	4640      	mov	r0, r8
 8008dee:	4649      	mov	r1, r9
 8008df0:	f7f7 fe74 	bl	8000adc <__aeabi_dcmplt>
 8008df4:	2800      	cmp	r0, #0
 8008df6:	f43f af35 	beq.w	8008c64 <_dtoa_r+0x464>
 8008dfa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008dfc:	1e6b      	subs	r3, r5, #1
 8008dfe:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e00:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008e04:	2b30      	cmp	r3, #48	; 0x30
 8008e06:	d0f8      	beq.n	8008dfa <_dtoa_r+0x5fa>
 8008e08:	9700      	str	r7, [sp, #0]
 8008e0a:	e049      	b.n	8008ea0 <_dtoa_r+0x6a0>
 8008e0c:	4b05      	ldr	r3, [pc, #20]	; (8008e24 <_dtoa_r+0x624>)
 8008e0e:	f7f7 fbf3 	bl	80005f8 <__aeabi_dmul>
 8008e12:	4680      	mov	r8, r0
 8008e14:	4689      	mov	r9, r1
 8008e16:	e7bd      	b.n	8008d94 <_dtoa_r+0x594>
 8008e18:	0800b560 	.word	0x0800b560
 8008e1c:	0800b538 	.word	0x0800b538
 8008e20:	3ff00000 	.word	0x3ff00000
 8008e24:	40240000 	.word	0x40240000
 8008e28:	401c0000 	.word	0x401c0000
 8008e2c:	40140000 	.word	0x40140000
 8008e30:	3fe00000 	.word	0x3fe00000
 8008e34:	9d01      	ldr	r5, [sp, #4]
 8008e36:	4656      	mov	r6, sl
 8008e38:	465f      	mov	r7, fp
 8008e3a:	4642      	mov	r2, r8
 8008e3c:	464b      	mov	r3, r9
 8008e3e:	4630      	mov	r0, r6
 8008e40:	4639      	mov	r1, r7
 8008e42:	f7f7 fd03 	bl	800084c <__aeabi_ddiv>
 8008e46:	f7f7 fe87 	bl	8000b58 <__aeabi_d2iz>
 8008e4a:	4682      	mov	sl, r0
 8008e4c:	f7f7 fb6a 	bl	8000524 <__aeabi_i2d>
 8008e50:	4642      	mov	r2, r8
 8008e52:	464b      	mov	r3, r9
 8008e54:	f7f7 fbd0 	bl	80005f8 <__aeabi_dmul>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	4630      	mov	r0, r6
 8008e5e:	4639      	mov	r1, r7
 8008e60:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008e64:	f7f7 fa10 	bl	8000288 <__aeabi_dsub>
 8008e68:	f805 6b01 	strb.w	r6, [r5], #1
 8008e6c:	9e01      	ldr	r6, [sp, #4]
 8008e6e:	9f03      	ldr	r7, [sp, #12]
 8008e70:	1bae      	subs	r6, r5, r6
 8008e72:	42b7      	cmp	r7, r6
 8008e74:	4602      	mov	r2, r0
 8008e76:	460b      	mov	r3, r1
 8008e78:	d135      	bne.n	8008ee6 <_dtoa_r+0x6e6>
 8008e7a:	f7f7 fa07 	bl	800028c <__adddf3>
 8008e7e:	4642      	mov	r2, r8
 8008e80:	464b      	mov	r3, r9
 8008e82:	4606      	mov	r6, r0
 8008e84:	460f      	mov	r7, r1
 8008e86:	f7f7 fe47 	bl	8000b18 <__aeabi_dcmpgt>
 8008e8a:	b9d0      	cbnz	r0, 8008ec2 <_dtoa_r+0x6c2>
 8008e8c:	4642      	mov	r2, r8
 8008e8e:	464b      	mov	r3, r9
 8008e90:	4630      	mov	r0, r6
 8008e92:	4639      	mov	r1, r7
 8008e94:	f7f7 fe18 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e98:	b110      	cbz	r0, 8008ea0 <_dtoa_r+0x6a0>
 8008e9a:	f01a 0f01 	tst.w	sl, #1
 8008e9e:	d110      	bne.n	8008ec2 <_dtoa_r+0x6c2>
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	ee18 1a10 	vmov	r1, s16
 8008ea6:	f000 ff3f 	bl	8009d28 <_Bfree>
 8008eaa:	2300      	movs	r3, #0
 8008eac:	9800      	ldr	r0, [sp, #0]
 8008eae:	702b      	strb	r3, [r5, #0]
 8008eb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008eb2:	3001      	adds	r0, #1
 8008eb4:	6018      	str	r0, [r3, #0]
 8008eb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f43f acf1 	beq.w	80088a0 <_dtoa_r+0xa0>
 8008ebe:	601d      	str	r5, [r3, #0]
 8008ec0:	e4ee      	b.n	80088a0 <_dtoa_r+0xa0>
 8008ec2:	9f00      	ldr	r7, [sp, #0]
 8008ec4:	462b      	mov	r3, r5
 8008ec6:	461d      	mov	r5, r3
 8008ec8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ecc:	2a39      	cmp	r2, #57	; 0x39
 8008ece:	d106      	bne.n	8008ede <_dtoa_r+0x6de>
 8008ed0:	9a01      	ldr	r2, [sp, #4]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d1f7      	bne.n	8008ec6 <_dtoa_r+0x6c6>
 8008ed6:	9901      	ldr	r1, [sp, #4]
 8008ed8:	2230      	movs	r2, #48	; 0x30
 8008eda:	3701      	adds	r7, #1
 8008edc:	700a      	strb	r2, [r1, #0]
 8008ede:	781a      	ldrb	r2, [r3, #0]
 8008ee0:	3201      	adds	r2, #1
 8008ee2:	701a      	strb	r2, [r3, #0]
 8008ee4:	e790      	b.n	8008e08 <_dtoa_r+0x608>
 8008ee6:	4ba6      	ldr	r3, [pc, #664]	; (8009180 <_dtoa_r+0x980>)
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f7f7 fb85 	bl	80005f8 <__aeabi_dmul>
 8008eee:	2200      	movs	r2, #0
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	4606      	mov	r6, r0
 8008ef4:	460f      	mov	r7, r1
 8008ef6:	f7f7 fde7 	bl	8000ac8 <__aeabi_dcmpeq>
 8008efa:	2800      	cmp	r0, #0
 8008efc:	d09d      	beq.n	8008e3a <_dtoa_r+0x63a>
 8008efe:	e7cf      	b.n	8008ea0 <_dtoa_r+0x6a0>
 8008f00:	9a08      	ldr	r2, [sp, #32]
 8008f02:	2a00      	cmp	r2, #0
 8008f04:	f000 80d7 	beq.w	80090b6 <_dtoa_r+0x8b6>
 8008f08:	9a06      	ldr	r2, [sp, #24]
 8008f0a:	2a01      	cmp	r2, #1
 8008f0c:	f300 80ba 	bgt.w	8009084 <_dtoa_r+0x884>
 8008f10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f12:	2a00      	cmp	r2, #0
 8008f14:	f000 80b2 	beq.w	800907c <_dtoa_r+0x87c>
 8008f18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008f1c:	9e07      	ldr	r6, [sp, #28]
 8008f1e:	9d04      	ldr	r5, [sp, #16]
 8008f20:	9a04      	ldr	r2, [sp, #16]
 8008f22:	441a      	add	r2, r3
 8008f24:	9204      	str	r2, [sp, #16]
 8008f26:	9a05      	ldr	r2, [sp, #20]
 8008f28:	2101      	movs	r1, #1
 8008f2a:	441a      	add	r2, r3
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	9205      	str	r2, [sp, #20]
 8008f30:	f000 fffc 	bl	8009f2c <__i2b>
 8008f34:	4607      	mov	r7, r0
 8008f36:	2d00      	cmp	r5, #0
 8008f38:	dd0c      	ble.n	8008f54 <_dtoa_r+0x754>
 8008f3a:	9b05      	ldr	r3, [sp, #20]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	dd09      	ble.n	8008f54 <_dtoa_r+0x754>
 8008f40:	42ab      	cmp	r3, r5
 8008f42:	9a04      	ldr	r2, [sp, #16]
 8008f44:	bfa8      	it	ge
 8008f46:	462b      	movge	r3, r5
 8008f48:	1ad2      	subs	r2, r2, r3
 8008f4a:	9204      	str	r2, [sp, #16]
 8008f4c:	9a05      	ldr	r2, [sp, #20]
 8008f4e:	1aed      	subs	r5, r5, r3
 8008f50:	1ad3      	subs	r3, r2, r3
 8008f52:	9305      	str	r3, [sp, #20]
 8008f54:	9b07      	ldr	r3, [sp, #28]
 8008f56:	b31b      	cbz	r3, 8008fa0 <_dtoa_r+0x7a0>
 8008f58:	9b08      	ldr	r3, [sp, #32]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	f000 80af 	beq.w	80090be <_dtoa_r+0x8be>
 8008f60:	2e00      	cmp	r6, #0
 8008f62:	dd13      	ble.n	8008f8c <_dtoa_r+0x78c>
 8008f64:	4639      	mov	r1, r7
 8008f66:	4632      	mov	r2, r6
 8008f68:	4620      	mov	r0, r4
 8008f6a:	f001 f89f 	bl	800a0ac <__pow5mult>
 8008f6e:	ee18 2a10 	vmov	r2, s16
 8008f72:	4601      	mov	r1, r0
 8008f74:	4607      	mov	r7, r0
 8008f76:	4620      	mov	r0, r4
 8008f78:	f000 ffee 	bl	8009f58 <__multiply>
 8008f7c:	ee18 1a10 	vmov	r1, s16
 8008f80:	4680      	mov	r8, r0
 8008f82:	4620      	mov	r0, r4
 8008f84:	f000 fed0 	bl	8009d28 <_Bfree>
 8008f88:	ee08 8a10 	vmov	s16, r8
 8008f8c:	9b07      	ldr	r3, [sp, #28]
 8008f8e:	1b9a      	subs	r2, r3, r6
 8008f90:	d006      	beq.n	8008fa0 <_dtoa_r+0x7a0>
 8008f92:	ee18 1a10 	vmov	r1, s16
 8008f96:	4620      	mov	r0, r4
 8008f98:	f001 f888 	bl	800a0ac <__pow5mult>
 8008f9c:	ee08 0a10 	vmov	s16, r0
 8008fa0:	2101      	movs	r1, #1
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f000 ffc2 	bl	8009f2c <__i2b>
 8008fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	4606      	mov	r6, r0
 8008fae:	f340 8088 	ble.w	80090c2 <_dtoa_r+0x8c2>
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	4601      	mov	r1, r0
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	f001 f878 	bl	800a0ac <__pow5mult>
 8008fbc:	9b06      	ldr	r3, [sp, #24]
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	4606      	mov	r6, r0
 8008fc2:	f340 8081 	ble.w	80090c8 <_dtoa_r+0x8c8>
 8008fc6:	f04f 0800 	mov.w	r8, #0
 8008fca:	6933      	ldr	r3, [r6, #16]
 8008fcc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008fd0:	6918      	ldr	r0, [r3, #16]
 8008fd2:	f000 ff5b 	bl	8009e8c <__hi0bits>
 8008fd6:	f1c0 0020 	rsb	r0, r0, #32
 8008fda:	9b05      	ldr	r3, [sp, #20]
 8008fdc:	4418      	add	r0, r3
 8008fde:	f010 001f 	ands.w	r0, r0, #31
 8008fe2:	f000 8092 	beq.w	800910a <_dtoa_r+0x90a>
 8008fe6:	f1c0 0320 	rsb	r3, r0, #32
 8008fea:	2b04      	cmp	r3, #4
 8008fec:	f340 808a 	ble.w	8009104 <_dtoa_r+0x904>
 8008ff0:	f1c0 001c 	rsb	r0, r0, #28
 8008ff4:	9b04      	ldr	r3, [sp, #16]
 8008ff6:	4403      	add	r3, r0
 8008ff8:	9304      	str	r3, [sp, #16]
 8008ffa:	9b05      	ldr	r3, [sp, #20]
 8008ffc:	4403      	add	r3, r0
 8008ffe:	4405      	add	r5, r0
 8009000:	9305      	str	r3, [sp, #20]
 8009002:	9b04      	ldr	r3, [sp, #16]
 8009004:	2b00      	cmp	r3, #0
 8009006:	dd07      	ble.n	8009018 <_dtoa_r+0x818>
 8009008:	ee18 1a10 	vmov	r1, s16
 800900c:	461a      	mov	r2, r3
 800900e:	4620      	mov	r0, r4
 8009010:	f001 f8a6 	bl	800a160 <__lshift>
 8009014:	ee08 0a10 	vmov	s16, r0
 8009018:	9b05      	ldr	r3, [sp, #20]
 800901a:	2b00      	cmp	r3, #0
 800901c:	dd05      	ble.n	800902a <_dtoa_r+0x82a>
 800901e:	4631      	mov	r1, r6
 8009020:	461a      	mov	r2, r3
 8009022:	4620      	mov	r0, r4
 8009024:	f001 f89c 	bl	800a160 <__lshift>
 8009028:	4606      	mov	r6, r0
 800902a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800902c:	2b00      	cmp	r3, #0
 800902e:	d06e      	beq.n	800910e <_dtoa_r+0x90e>
 8009030:	ee18 0a10 	vmov	r0, s16
 8009034:	4631      	mov	r1, r6
 8009036:	f001 f903 	bl	800a240 <__mcmp>
 800903a:	2800      	cmp	r0, #0
 800903c:	da67      	bge.n	800910e <_dtoa_r+0x90e>
 800903e:	9b00      	ldr	r3, [sp, #0]
 8009040:	3b01      	subs	r3, #1
 8009042:	ee18 1a10 	vmov	r1, s16
 8009046:	9300      	str	r3, [sp, #0]
 8009048:	220a      	movs	r2, #10
 800904a:	2300      	movs	r3, #0
 800904c:	4620      	mov	r0, r4
 800904e:	f000 fe8d 	bl	8009d6c <__multadd>
 8009052:	9b08      	ldr	r3, [sp, #32]
 8009054:	ee08 0a10 	vmov	s16, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	f000 81b1 	beq.w	80093c0 <_dtoa_r+0xbc0>
 800905e:	2300      	movs	r3, #0
 8009060:	4639      	mov	r1, r7
 8009062:	220a      	movs	r2, #10
 8009064:	4620      	mov	r0, r4
 8009066:	f000 fe81 	bl	8009d6c <__multadd>
 800906a:	9b02      	ldr	r3, [sp, #8]
 800906c:	2b00      	cmp	r3, #0
 800906e:	4607      	mov	r7, r0
 8009070:	f300 808e 	bgt.w	8009190 <_dtoa_r+0x990>
 8009074:	9b06      	ldr	r3, [sp, #24]
 8009076:	2b02      	cmp	r3, #2
 8009078:	dc51      	bgt.n	800911e <_dtoa_r+0x91e>
 800907a:	e089      	b.n	8009190 <_dtoa_r+0x990>
 800907c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800907e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009082:	e74b      	b.n	8008f1c <_dtoa_r+0x71c>
 8009084:	9b03      	ldr	r3, [sp, #12]
 8009086:	1e5e      	subs	r6, r3, #1
 8009088:	9b07      	ldr	r3, [sp, #28]
 800908a:	42b3      	cmp	r3, r6
 800908c:	bfbf      	itttt	lt
 800908e:	9b07      	ldrlt	r3, [sp, #28]
 8009090:	9607      	strlt	r6, [sp, #28]
 8009092:	1af2      	sublt	r2, r6, r3
 8009094:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009096:	bfb6      	itet	lt
 8009098:	189b      	addlt	r3, r3, r2
 800909a:	1b9e      	subge	r6, r3, r6
 800909c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800909e:	9b03      	ldr	r3, [sp, #12]
 80090a0:	bfb8      	it	lt
 80090a2:	2600      	movlt	r6, #0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	bfb7      	itett	lt
 80090a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80090ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80090b0:	1a9d      	sublt	r5, r3, r2
 80090b2:	2300      	movlt	r3, #0
 80090b4:	e734      	b.n	8008f20 <_dtoa_r+0x720>
 80090b6:	9e07      	ldr	r6, [sp, #28]
 80090b8:	9d04      	ldr	r5, [sp, #16]
 80090ba:	9f08      	ldr	r7, [sp, #32]
 80090bc:	e73b      	b.n	8008f36 <_dtoa_r+0x736>
 80090be:	9a07      	ldr	r2, [sp, #28]
 80090c0:	e767      	b.n	8008f92 <_dtoa_r+0x792>
 80090c2:	9b06      	ldr	r3, [sp, #24]
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	dc18      	bgt.n	80090fa <_dtoa_r+0x8fa>
 80090c8:	f1ba 0f00 	cmp.w	sl, #0
 80090cc:	d115      	bne.n	80090fa <_dtoa_r+0x8fa>
 80090ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80090d2:	b993      	cbnz	r3, 80090fa <_dtoa_r+0x8fa>
 80090d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80090d8:	0d1b      	lsrs	r3, r3, #20
 80090da:	051b      	lsls	r3, r3, #20
 80090dc:	b183      	cbz	r3, 8009100 <_dtoa_r+0x900>
 80090de:	9b04      	ldr	r3, [sp, #16]
 80090e0:	3301      	adds	r3, #1
 80090e2:	9304      	str	r3, [sp, #16]
 80090e4:	9b05      	ldr	r3, [sp, #20]
 80090e6:	3301      	adds	r3, #1
 80090e8:	9305      	str	r3, [sp, #20]
 80090ea:	f04f 0801 	mov.w	r8, #1
 80090ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f47f af6a 	bne.w	8008fca <_dtoa_r+0x7ca>
 80090f6:	2001      	movs	r0, #1
 80090f8:	e76f      	b.n	8008fda <_dtoa_r+0x7da>
 80090fa:	f04f 0800 	mov.w	r8, #0
 80090fe:	e7f6      	b.n	80090ee <_dtoa_r+0x8ee>
 8009100:	4698      	mov	r8, r3
 8009102:	e7f4      	b.n	80090ee <_dtoa_r+0x8ee>
 8009104:	f43f af7d 	beq.w	8009002 <_dtoa_r+0x802>
 8009108:	4618      	mov	r0, r3
 800910a:	301c      	adds	r0, #28
 800910c:	e772      	b.n	8008ff4 <_dtoa_r+0x7f4>
 800910e:	9b03      	ldr	r3, [sp, #12]
 8009110:	2b00      	cmp	r3, #0
 8009112:	dc37      	bgt.n	8009184 <_dtoa_r+0x984>
 8009114:	9b06      	ldr	r3, [sp, #24]
 8009116:	2b02      	cmp	r3, #2
 8009118:	dd34      	ble.n	8009184 <_dtoa_r+0x984>
 800911a:	9b03      	ldr	r3, [sp, #12]
 800911c:	9302      	str	r3, [sp, #8]
 800911e:	9b02      	ldr	r3, [sp, #8]
 8009120:	b96b      	cbnz	r3, 800913e <_dtoa_r+0x93e>
 8009122:	4631      	mov	r1, r6
 8009124:	2205      	movs	r2, #5
 8009126:	4620      	mov	r0, r4
 8009128:	f000 fe20 	bl	8009d6c <__multadd>
 800912c:	4601      	mov	r1, r0
 800912e:	4606      	mov	r6, r0
 8009130:	ee18 0a10 	vmov	r0, s16
 8009134:	f001 f884 	bl	800a240 <__mcmp>
 8009138:	2800      	cmp	r0, #0
 800913a:	f73f adbb 	bgt.w	8008cb4 <_dtoa_r+0x4b4>
 800913e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009140:	9d01      	ldr	r5, [sp, #4]
 8009142:	43db      	mvns	r3, r3
 8009144:	9300      	str	r3, [sp, #0]
 8009146:	f04f 0800 	mov.w	r8, #0
 800914a:	4631      	mov	r1, r6
 800914c:	4620      	mov	r0, r4
 800914e:	f000 fdeb 	bl	8009d28 <_Bfree>
 8009152:	2f00      	cmp	r7, #0
 8009154:	f43f aea4 	beq.w	8008ea0 <_dtoa_r+0x6a0>
 8009158:	f1b8 0f00 	cmp.w	r8, #0
 800915c:	d005      	beq.n	800916a <_dtoa_r+0x96a>
 800915e:	45b8      	cmp	r8, r7
 8009160:	d003      	beq.n	800916a <_dtoa_r+0x96a>
 8009162:	4641      	mov	r1, r8
 8009164:	4620      	mov	r0, r4
 8009166:	f000 fddf 	bl	8009d28 <_Bfree>
 800916a:	4639      	mov	r1, r7
 800916c:	4620      	mov	r0, r4
 800916e:	f000 fddb 	bl	8009d28 <_Bfree>
 8009172:	e695      	b.n	8008ea0 <_dtoa_r+0x6a0>
 8009174:	2600      	movs	r6, #0
 8009176:	4637      	mov	r7, r6
 8009178:	e7e1      	b.n	800913e <_dtoa_r+0x93e>
 800917a:	9700      	str	r7, [sp, #0]
 800917c:	4637      	mov	r7, r6
 800917e:	e599      	b.n	8008cb4 <_dtoa_r+0x4b4>
 8009180:	40240000 	.word	0x40240000
 8009184:	9b08      	ldr	r3, [sp, #32]
 8009186:	2b00      	cmp	r3, #0
 8009188:	f000 80ca 	beq.w	8009320 <_dtoa_r+0xb20>
 800918c:	9b03      	ldr	r3, [sp, #12]
 800918e:	9302      	str	r3, [sp, #8]
 8009190:	2d00      	cmp	r5, #0
 8009192:	dd05      	ble.n	80091a0 <_dtoa_r+0x9a0>
 8009194:	4639      	mov	r1, r7
 8009196:	462a      	mov	r2, r5
 8009198:	4620      	mov	r0, r4
 800919a:	f000 ffe1 	bl	800a160 <__lshift>
 800919e:	4607      	mov	r7, r0
 80091a0:	f1b8 0f00 	cmp.w	r8, #0
 80091a4:	d05b      	beq.n	800925e <_dtoa_r+0xa5e>
 80091a6:	6879      	ldr	r1, [r7, #4]
 80091a8:	4620      	mov	r0, r4
 80091aa:	f000 fd7d 	bl	8009ca8 <_Balloc>
 80091ae:	4605      	mov	r5, r0
 80091b0:	b928      	cbnz	r0, 80091be <_dtoa_r+0x9be>
 80091b2:	4b87      	ldr	r3, [pc, #540]	; (80093d0 <_dtoa_r+0xbd0>)
 80091b4:	4602      	mov	r2, r0
 80091b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80091ba:	f7ff bb3b 	b.w	8008834 <_dtoa_r+0x34>
 80091be:	693a      	ldr	r2, [r7, #16]
 80091c0:	3202      	adds	r2, #2
 80091c2:	0092      	lsls	r2, r2, #2
 80091c4:	f107 010c 	add.w	r1, r7, #12
 80091c8:	300c      	adds	r0, #12
 80091ca:	f7fd fb53 	bl	8006874 <memcpy>
 80091ce:	2201      	movs	r2, #1
 80091d0:	4629      	mov	r1, r5
 80091d2:	4620      	mov	r0, r4
 80091d4:	f000 ffc4 	bl	800a160 <__lshift>
 80091d8:	9b01      	ldr	r3, [sp, #4]
 80091da:	f103 0901 	add.w	r9, r3, #1
 80091de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80091e2:	4413      	add	r3, r2
 80091e4:	9305      	str	r3, [sp, #20]
 80091e6:	f00a 0301 	and.w	r3, sl, #1
 80091ea:	46b8      	mov	r8, r7
 80091ec:	9304      	str	r3, [sp, #16]
 80091ee:	4607      	mov	r7, r0
 80091f0:	4631      	mov	r1, r6
 80091f2:	ee18 0a10 	vmov	r0, s16
 80091f6:	f7ff fa75 	bl	80086e4 <quorem>
 80091fa:	4641      	mov	r1, r8
 80091fc:	9002      	str	r0, [sp, #8]
 80091fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009202:	ee18 0a10 	vmov	r0, s16
 8009206:	f001 f81b 	bl	800a240 <__mcmp>
 800920a:	463a      	mov	r2, r7
 800920c:	9003      	str	r0, [sp, #12]
 800920e:	4631      	mov	r1, r6
 8009210:	4620      	mov	r0, r4
 8009212:	f001 f831 	bl	800a278 <__mdiff>
 8009216:	68c2      	ldr	r2, [r0, #12]
 8009218:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800921c:	4605      	mov	r5, r0
 800921e:	bb02      	cbnz	r2, 8009262 <_dtoa_r+0xa62>
 8009220:	4601      	mov	r1, r0
 8009222:	ee18 0a10 	vmov	r0, s16
 8009226:	f001 f80b 	bl	800a240 <__mcmp>
 800922a:	4602      	mov	r2, r0
 800922c:	4629      	mov	r1, r5
 800922e:	4620      	mov	r0, r4
 8009230:	9207      	str	r2, [sp, #28]
 8009232:	f000 fd79 	bl	8009d28 <_Bfree>
 8009236:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800923a:	ea43 0102 	orr.w	r1, r3, r2
 800923e:	9b04      	ldr	r3, [sp, #16]
 8009240:	430b      	orrs	r3, r1
 8009242:	464d      	mov	r5, r9
 8009244:	d10f      	bne.n	8009266 <_dtoa_r+0xa66>
 8009246:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800924a:	d02a      	beq.n	80092a2 <_dtoa_r+0xaa2>
 800924c:	9b03      	ldr	r3, [sp, #12]
 800924e:	2b00      	cmp	r3, #0
 8009250:	dd02      	ble.n	8009258 <_dtoa_r+0xa58>
 8009252:	9b02      	ldr	r3, [sp, #8]
 8009254:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009258:	f88b a000 	strb.w	sl, [fp]
 800925c:	e775      	b.n	800914a <_dtoa_r+0x94a>
 800925e:	4638      	mov	r0, r7
 8009260:	e7ba      	b.n	80091d8 <_dtoa_r+0x9d8>
 8009262:	2201      	movs	r2, #1
 8009264:	e7e2      	b.n	800922c <_dtoa_r+0xa2c>
 8009266:	9b03      	ldr	r3, [sp, #12]
 8009268:	2b00      	cmp	r3, #0
 800926a:	db04      	blt.n	8009276 <_dtoa_r+0xa76>
 800926c:	9906      	ldr	r1, [sp, #24]
 800926e:	430b      	orrs	r3, r1
 8009270:	9904      	ldr	r1, [sp, #16]
 8009272:	430b      	orrs	r3, r1
 8009274:	d122      	bne.n	80092bc <_dtoa_r+0xabc>
 8009276:	2a00      	cmp	r2, #0
 8009278:	ddee      	ble.n	8009258 <_dtoa_r+0xa58>
 800927a:	ee18 1a10 	vmov	r1, s16
 800927e:	2201      	movs	r2, #1
 8009280:	4620      	mov	r0, r4
 8009282:	f000 ff6d 	bl	800a160 <__lshift>
 8009286:	4631      	mov	r1, r6
 8009288:	ee08 0a10 	vmov	s16, r0
 800928c:	f000 ffd8 	bl	800a240 <__mcmp>
 8009290:	2800      	cmp	r0, #0
 8009292:	dc03      	bgt.n	800929c <_dtoa_r+0xa9c>
 8009294:	d1e0      	bne.n	8009258 <_dtoa_r+0xa58>
 8009296:	f01a 0f01 	tst.w	sl, #1
 800929a:	d0dd      	beq.n	8009258 <_dtoa_r+0xa58>
 800929c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80092a0:	d1d7      	bne.n	8009252 <_dtoa_r+0xa52>
 80092a2:	2339      	movs	r3, #57	; 0x39
 80092a4:	f88b 3000 	strb.w	r3, [fp]
 80092a8:	462b      	mov	r3, r5
 80092aa:	461d      	mov	r5, r3
 80092ac:	3b01      	subs	r3, #1
 80092ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80092b2:	2a39      	cmp	r2, #57	; 0x39
 80092b4:	d071      	beq.n	800939a <_dtoa_r+0xb9a>
 80092b6:	3201      	adds	r2, #1
 80092b8:	701a      	strb	r2, [r3, #0]
 80092ba:	e746      	b.n	800914a <_dtoa_r+0x94a>
 80092bc:	2a00      	cmp	r2, #0
 80092be:	dd07      	ble.n	80092d0 <_dtoa_r+0xad0>
 80092c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80092c4:	d0ed      	beq.n	80092a2 <_dtoa_r+0xaa2>
 80092c6:	f10a 0301 	add.w	r3, sl, #1
 80092ca:	f88b 3000 	strb.w	r3, [fp]
 80092ce:	e73c      	b.n	800914a <_dtoa_r+0x94a>
 80092d0:	9b05      	ldr	r3, [sp, #20]
 80092d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80092d6:	4599      	cmp	r9, r3
 80092d8:	d047      	beq.n	800936a <_dtoa_r+0xb6a>
 80092da:	ee18 1a10 	vmov	r1, s16
 80092de:	2300      	movs	r3, #0
 80092e0:	220a      	movs	r2, #10
 80092e2:	4620      	mov	r0, r4
 80092e4:	f000 fd42 	bl	8009d6c <__multadd>
 80092e8:	45b8      	cmp	r8, r7
 80092ea:	ee08 0a10 	vmov	s16, r0
 80092ee:	f04f 0300 	mov.w	r3, #0
 80092f2:	f04f 020a 	mov.w	r2, #10
 80092f6:	4641      	mov	r1, r8
 80092f8:	4620      	mov	r0, r4
 80092fa:	d106      	bne.n	800930a <_dtoa_r+0xb0a>
 80092fc:	f000 fd36 	bl	8009d6c <__multadd>
 8009300:	4680      	mov	r8, r0
 8009302:	4607      	mov	r7, r0
 8009304:	f109 0901 	add.w	r9, r9, #1
 8009308:	e772      	b.n	80091f0 <_dtoa_r+0x9f0>
 800930a:	f000 fd2f 	bl	8009d6c <__multadd>
 800930e:	4639      	mov	r1, r7
 8009310:	4680      	mov	r8, r0
 8009312:	2300      	movs	r3, #0
 8009314:	220a      	movs	r2, #10
 8009316:	4620      	mov	r0, r4
 8009318:	f000 fd28 	bl	8009d6c <__multadd>
 800931c:	4607      	mov	r7, r0
 800931e:	e7f1      	b.n	8009304 <_dtoa_r+0xb04>
 8009320:	9b03      	ldr	r3, [sp, #12]
 8009322:	9302      	str	r3, [sp, #8]
 8009324:	9d01      	ldr	r5, [sp, #4]
 8009326:	ee18 0a10 	vmov	r0, s16
 800932a:	4631      	mov	r1, r6
 800932c:	f7ff f9da 	bl	80086e4 <quorem>
 8009330:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009334:	9b01      	ldr	r3, [sp, #4]
 8009336:	f805 ab01 	strb.w	sl, [r5], #1
 800933a:	1aea      	subs	r2, r5, r3
 800933c:	9b02      	ldr	r3, [sp, #8]
 800933e:	4293      	cmp	r3, r2
 8009340:	dd09      	ble.n	8009356 <_dtoa_r+0xb56>
 8009342:	ee18 1a10 	vmov	r1, s16
 8009346:	2300      	movs	r3, #0
 8009348:	220a      	movs	r2, #10
 800934a:	4620      	mov	r0, r4
 800934c:	f000 fd0e 	bl	8009d6c <__multadd>
 8009350:	ee08 0a10 	vmov	s16, r0
 8009354:	e7e7      	b.n	8009326 <_dtoa_r+0xb26>
 8009356:	9b02      	ldr	r3, [sp, #8]
 8009358:	2b00      	cmp	r3, #0
 800935a:	bfc8      	it	gt
 800935c:	461d      	movgt	r5, r3
 800935e:	9b01      	ldr	r3, [sp, #4]
 8009360:	bfd8      	it	le
 8009362:	2501      	movle	r5, #1
 8009364:	441d      	add	r5, r3
 8009366:	f04f 0800 	mov.w	r8, #0
 800936a:	ee18 1a10 	vmov	r1, s16
 800936e:	2201      	movs	r2, #1
 8009370:	4620      	mov	r0, r4
 8009372:	f000 fef5 	bl	800a160 <__lshift>
 8009376:	4631      	mov	r1, r6
 8009378:	ee08 0a10 	vmov	s16, r0
 800937c:	f000 ff60 	bl	800a240 <__mcmp>
 8009380:	2800      	cmp	r0, #0
 8009382:	dc91      	bgt.n	80092a8 <_dtoa_r+0xaa8>
 8009384:	d102      	bne.n	800938c <_dtoa_r+0xb8c>
 8009386:	f01a 0f01 	tst.w	sl, #1
 800938a:	d18d      	bne.n	80092a8 <_dtoa_r+0xaa8>
 800938c:	462b      	mov	r3, r5
 800938e:	461d      	mov	r5, r3
 8009390:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009394:	2a30      	cmp	r2, #48	; 0x30
 8009396:	d0fa      	beq.n	800938e <_dtoa_r+0xb8e>
 8009398:	e6d7      	b.n	800914a <_dtoa_r+0x94a>
 800939a:	9a01      	ldr	r2, [sp, #4]
 800939c:	429a      	cmp	r2, r3
 800939e:	d184      	bne.n	80092aa <_dtoa_r+0xaaa>
 80093a0:	9b00      	ldr	r3, [sp, #0]
 80093a2:	3301      	adds	r3, #1
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	2331      	movs	r3, #49	; 0x31
 80093a8:	7013      	strb	r3, [r2, #0]
 80093aa:	e6ce      	b.n	800914a <_dtoa_r+0x94a>
 80093ac:	4b09      	ldr	r3, [pc, #36]	; (80093d4 <_dtoa_r+0xbd4>)
 80093ae:	f7ff ba95 	b.w	80088dc <_dtoa_r+0xdc>
 80093b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	f47f aa6e 	bne.w	8008896 <_dtoa_r+0x96>
 80093ba:	4b07      	ldr	r3, [pc, #28]	; (80093d8 <_dtoa_r+0xbd8>)
 80093bc:	f7ff ba8e 	b.w	80088dc <_dtoa_r+0xdc>
 80093c0:	9b02      	ldr	r3, [sp, #8]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	dcae      	bgt.n	8009324 <_dtoa_r+0xb24>
 80093c6:	9b06      	ldr	r3, [sp, #24]
 80093c8:	2b02      	cmp	r3, #2
 80093ca:	f73f aea8 	bgt.w	800911e <_dtoa_r+0x91e>
 80093ce:	e7a9      	b.n	8009324 <_dtoa_r+0xb24>
 80093d0:	0800b450 	.word	0x0800b450
 80093d4:	0800b254 	.word	0x0800b254
 80093d8:	0800b3d1 	.word	0x0800b3d1

080093dc <__sflush_r>:
 80093dc:	898a      	ldrh	r2, [r1, #12]
 80093de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093e2:	4605      	mov	r5, r0
 80093e4:	0710      	lsls	r0, r2, #28
 80093e6:	460c      	mov	r4, r1
 80093e8:	d458      	bmi.n	800949c <__sflush_r+0xc0>
 80093ea:	684b      	ldr	r3, [r1, #4]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	dc05      	bgt.n	80093fc <__sflush_r+0x20>
 80093f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	dc02      	bgt.n	80093fc <__sflush_r+0x20>
 80093f6:	2000      	movs	r0, #0
 80093f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093fe:	2e00      	cmp	r6, #0
 8009400:	d0f9      	beq.n	80093f6 <__sflush_r+0x1a>
 8009402:	2300      	movs	r3, #0
 8009404:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009408:	682f      	ldr	r7, [r5, #0]
 800940a:	602b      	str	r3, [r5, #0]
 800940c:	d032      	beq.n	8009474 <__sflush_r+0x98>
 800940e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009410:	89a3      	ldrh	r3, [r4, #12]
 8009412:	075a      	lsls	r2, r3, #29
 8009414:	d505      	bpl.n	8009422 <__sflush_r+0x46>
 8009416:	6863      	ldr	r3, [r4, #4]
 8009418:	1ac0      	subs	r0, r0, r3
 800941a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800941c:	b10b      	cbz	r3, 8009422 <__sflush_r+0x46>
 800941e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009420:	1ac0      	subs	r0, r0, r3
 8009422:	2300      	movs	r3, #0
 8009424:	4602      	mov	r2, r0
 8009426:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009428:	6a21      	ldr	r1, [r4, #32]
 800942a:	4628      	mov	r0, r5
 800942c:	47b0      	blx	r6
 800942e:	1c43      	adds	r3, r0, #1
 8009430:	89a3      	ldrh	r3, [r4, #12]
 8009432:	d106      	bne.n	8009442 <__sflush_r+0x66>
 8009434:	6829      	ldr	r1, [r5, #0]
 8009436:	291d      	cmp	r1, #29
 8009438:	d82c      	bhi.n	8009494 <__sflush_r+0xb8>
 800943a:	4a2a      	ldr	r2, [pc, #168]	; (80094e4 <__sflush_r+0x108>)
 800943c:	40ca      	lsrs	r2, r1
 800943e:	07d6      	lsls	r6, r2, #31
 8009440:	d528      	bpl.n	8009494 <__sflush_r+0xb8>
 8009442:	2200      	movs	r2, #0
 8009444:	6062      	str	r2, [r4, #4]
 8009446:	04d9      	lsls	r1, r3, #19
 8009448:	6922      	ldr	r2, [r4, #16]
 800944a:	6022      	str	r2, [r4, #0]
 800944c:	d504      	bpl.n	8009458 <__sflush_r+0x7c>
 800944e:	1c42      	adds	r2, r0, #1
 8009450:	d101      	bne.n	8009456 <__sflush_r+0x7a>
 8009452:	682b      	ldr	r3, [r5, #0]
 8009454:	b903      	cbnz	r3, 8009458 <__sflush_r+0x7c>
 8009456:	6560      	str	r0, [r4, #84]	; 0x54
 8009458:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800945a:	602f      	str	r7, [r5, #0]
 800945c:	2900      	cmp	r1, #0
 800945e:	d0ca      	beq.n	80093f6 <__sflush_r+0x1a>
 8009460:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009464:	4299      	cmp	r1, r3
 8009466:	d002      	beq.n	800946e <__sflush_r+0x92>
 8009468:	4628      	mov	r0, r5
 800946a:	f7fd fa19 	bl	80068a0 <_free_r>
 800946e:	2000      	movs	r0, #0
 8009470:	6360      	str	r0, [r4, #52]	; 0x34
 8009472:	e7c1      	b.n	80093f8 <__sflush_r+0x1c>
 8009474:	6a21      	ldr	r1, [r4, #32]
 8009476:	2301      	movs	r3, #1
 8009478:	4628      	mov	r0, r5
 800947a:	47b0      	blx	r6
 800947c:	1c41      	adds	r1, r0, #1
 800947e:	d1c7      	bne.n	8009410 <__sflush_r+0x34>
 8009480:	682b      	ldr	r3, [r5, #0]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d0c4      	beq.n	8009410 <__sflush_r+0x34>
 8009486:	2b1d      	cmp	r3, #29
 8009488:	d001      	beq.n	800948e <__sflush_r+0xb2>
 800948a:	2b16      	cmp	r3, #22
 800948c:	d101      	bne.n	8009492 <__sflush_r+0xb6>
 800948e:	602f      	str	r7, [r5, #0]
 8009490:	e7b1      	b.n	80093f6 <__sflush_r+0x1a>
 8009492:	89a3      	ldrh	r3, [r4, #12]
 8009494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009498:	81a3      	strh	r3, [r4, #12]
 800949a:	e7ad      	b.n	80093f8 <__sflush_r+0x1c>
 800949c:	690f      	ldr	r7, [r1, #16]
 800949e:	2f00      	cmp	r7, #0
 80094a0:	d0a9      	beq.n	80093f6 <__sflush_r+0x1a>
 80094a2:	0793      	lsls	r3, r2, #30
 80094a4:	680e      	ldr	r6, [r1, #0]
 80094a6:	bf08      	it	eq
 80094a8:	694b      	ldreq	r3, [r1, #20]
 80094aa:	600f      	str	r7, [r1, #0]
 80094ac:	bf18      	it	ne
 80094ae:	2300      	movne	r3, #0
 80094b0:	eba6 0807 	sub.w	r8, r6, r7
 80094b4:	608b      	str	r3, [r1, #8]
 80094b6:	f1b8 0f00 	cmp.w	r8, #0
 80094ba:	dd9c      	ble.n	80093f6 <__sflush_r+0x1a>
 80094bc:	6a21      	ldr	r1, [r4, #32]
 80094be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80094c0:	4643      	mov	r3, r8
 80094c2:	463a      	mov	r2, r7
 80094c4:	4628      	mov	r0, r5
 80094c6:	47b0      	blx	r6
 80094c8:	2800      	cmp	r0, #0
 80094ca:	dc06      	bgt.n	80094da <__sflush_r+0xfe>
 80094cc:	89a3      	ldrh	r3, [r4, #12]
 80094ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094d2:	81a3      	strh	r3, [r4, #12]
 80094d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094d8:	e78e      	b.n	80093f8 <__sflush_r+0x1c>
 80094da:	4407      	add	r7, r0
 80094dc:	eba8 0800 	sub.w	r8, r8, r0
 80094e0:	e7e9      	b.n	80094b6 <__sflush_r+0xda>
 80094e2:	bf00      	nop
 80094e4:	20400001 	.word	0x20400001

080094e8 <_fflush_r>:
 80094e8:	b538      	push	{r3, r4, r5, lr}
 80094ea:	690b      	ldr	r3, [r1, #16]
 80094ec:	4605      	mov	r5, r0
 80094ee:	460c      	mov	r4, r1
 80094f0:	b913      	cbnz	r3, 80094f8 <_fflush_r+0x10>
 80094f2:	2500      	movs	r5, #0
 80094f4:	4628      	mov	r0, r5
 80094f6:	bd38      	pop	{r3, r4, r5, pc}
 80094f8:	b118      	cbz	r0, 8009502 <_fflush_r+0x1a>
 80094fa:	6983      	ldr	r3, [r0, #24]
 80094fc:	b90b      	cbnz	r3, 8009502 <_fflush_r+0x1a>
 80094fe:	f7fd f8eb 	bl	80066d8 <__sinit>
 8009502:	4b14      	ldr	r3, [pc, #80]	; (8009554 <_fflush_r+0x6c>)
 8009504:	429c      	cmp	r4, r3
 8009506:	d11b      	bne.n	8009540 <_fflush_r+0x58>
 8009508:	686c      	ldr	r4, [r5, #4]
 800950a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d0ef      	beq.n	80094f2 <_fflush_r+0xa>
 8009512:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009514:	07d0      	lsls	r0, r2, #31
 8009516:	d404      	bmi.n	8009522 <_fflush_r+0x3a>
 8009518:	0599      	lsls	r1, r3, #22
 800951a:	d402      	bmi.n	8009522 <_fflush_r+0x3a>
 800951c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800951e:	f7fd f99e 	bl	800685e <__retarget_lock_acquire_recursive>
 8009522:	4628      	mov	r0, r5
 8009524:	4621      	mov	r1, r4
 8009526:	f7ff ff59 	bl	80093dc <__sflush_r>
 800952a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800952c:	07da      	lsls	r2, r3, #31
 800952e:	4605      	mov	r5, r0
 8009530:	d4e0      	bmi.n	80094f4 <_fflush_r+0xc>
 8009532:	89a3      	ldrh	r3, [r4, #12]
 8009534:	059b      	lsls	r3, r3, #22
 8009536:	d4dd      	bmi.n	80094f4 <_fflush_r+0xc>
 8009538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800953a:	f7fd f991 	bl	8006860 <__retarget_lock_release_recursive>
 800953e:	e7d9      	b.n	80094f4 <_fflush_r+0xc>
 8009540:	4b05      	ldr	r3, [pc, #20]	; (8009558 <_fflush_r+0x70>)
 8009542:	429c      	cmp	r4, r3
 8009544:	d101      	bne.n	800954a <_fflush_r+0x62>
 8009546:	68ac      	ldr	r4, [r5, #8]
 8009548:	e7df      	b.n	800950a <_fflush_r+0x22>
 800954a:	4b04      	ldr	r3, [pc, #16]	; (800955c <_fflush_r+0x74>)
 800954c:	429c      	cmp	r4, r3
 800954e:	bf08      	it	eq
 8009550:	68ec      	ldreq	r4, [r5, #12]
 8009552:	e7da      	b.n	800950a <_fflush_r+0x22>
 8009554:	0800b200 	.word	0x0800b200
 8009558:	0800b220 	.word	0x0800b220
 800955c:	0800b1e0 	.word	0x0800b1e0

08009560 <rshift>:
 8009560:	6903      	ldr	r3, [r0, #16]
 8009562:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009566:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800956a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800956e:	f100 0414 	add.w	r4, r0, #20
 8009572:	dd45      	ble.n	8009600 <rshift+0xa0>
 8009574:	f011 011f 	ands.w	r1, r1, #31
 8009578:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800957c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009580:	d10c      	bne.n	800959c <rshift+0x3c>
 8009582:	f100 0710 	add.w	r7, r0, #16
 8009586:	4629      	mov	r1, r5
 8009588:	42b1      	cmp	r1, r6
 800958a:	d334      	bcc.n	80095f6 <rshift+0x96>
 800958c:	1a9b      	subs	r3, r3, r2
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	1eea      	subs	r2, r5, #3
 8009592:	4296      	cmp	r6, r2
 8009594:	bf38      	it	cc
 8009596:	2300      	movcc	r3, #0
 8009598:	4423      	add	r3, r4
 800959a:	e015      	b.n	80095c8 <rshift+0x68>
 800959c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80095a0:	f1c1 0820 	rsb	r8, r1, #32
 80095a4:	40cf      	lsrs	r7, r1
 80095a6:	f105 0e04 	add.w	lr, r5, #4
 80095aa:	46a1      	mov	r9, r4
 80095ac:	4576      	cmp	r6, lr
 80095ae:	46f4      	mov	ip, lr
 80095b0:	d815      	bhi.n	80095de <rshift+0x7e>
 80095b2:	1a9a      	subs	r2, r3, r2
 80095b4:	0092      	lsls	r2, r2, #2
 80095b6:	3a04      	subs	r2, #4
 80095b8:	3501      	adds	r5, #1
 80095ba:	42ae      	cmp	r6, r5
 80095bc:	bf38      	it	cc
 80095be:	2200      	movcc	r2, #0
 80095c0:	18a3      	adds	r3, r4, r2
 80095c2:	50a7      	str	r7, [r4, r2]
 80095c4:	b107      	cbz	r7, 80095c8 <rshift+0x68>
 80095c6:	3304      	adds	r3, #4
 80095c8:	1b1a      	subs	r2, r3, r4
 80095ca:	42a3      	cmp	r3, r4
 80095cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80095d0:	bf08      	it	eq
 80095d2:	2300      	moveq	r3, #0
 80095d4:	6102      	str	r2, [r0, #16]
 80095d6:	bf08      	it	eq
 80095d8:	6143      	streq	r3, [r0, #20]
 80095da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095de:	f8dc c000 	ldr.w	ip, [ip]
 80095e2:	fa0c fc08 	lsl.w	ip, ip, r8
 80095e6:	ea4c 0707 	orr.w	r7, ip, r7
 80095ea:	f849 7b04 	str.w	r7, [r9], #4
 80095ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 80095f2:	40cf      	lsrs	r7, r1
 80095f4:	e7da      	b.n	80095ac <rshift+0x4c>
 80095f6:	f851 cb04 	ldr.w	ip, [r1], #4
 80095fa:	f847 cf04 	str.w	ip, [r7, #4]!
 80095fe:	e7c3      	b.n	8009588 <rshift+0x28>
 8009600:	4623      	mov	r3, r4
 8009602:	e7e1      	b.n	80095c8 <rshift+0x68>

08009604 <__hexdig_fun>:
 8009604:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009608:	2b09      	cmp	r3, #9
 800960a:	d802      	bhi.n	8009612 <__hexdig_fun+0xe>
 800960c:	3820      	subs	r0, #32
 800960e:	b2c0      	uxtb	r0, r0
 8009610:	4770      	bx	lr
 8009612:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009616:	2b05      	cmp	r3, #5
 8009618:	d801      	bhi.n	800961e <__hexdig_fun+0x1a>
 800961a:	3847      	subs	r0, #71	; 0x47
 800961c:	e7f7      	b.n	800960e <__hexdig_fun+0xa>
 800961e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009622:	2b05      	cmp	r3, #5
 8009624:	d801      	bhi.n	800962a <__hexdig_fun+0x26>
 8009626:	3827      	subs	r0, #39	; 0x27
 8009628:	e7f1      	b.n	800960e <__hexdig_fun+0xa>
 800962a:	2000      	movs	r0, #0
 800962c:	4770      	bx	lr
	...

08009630 <__gethex>:
 8009630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009634:	ed2d 8b02 	vpush	{d8}
 8009638:	b089      	sub	sp, #36	; 0x24
 800963a:	ee08 0a10 	vmov	s16, r0
 800963e:	9304      	str	r3, [sp, #16]
 8009640:	4bb4      	ldr	r3, [pc, #720]	; (8009914 <__gethex+0x2e4>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	9301      	str	r3, [sp, #4]
 8009646:	4618      	mov	r0, r3
 8009648:	468b      	mov	fp, r1
 800964a:	4690      	mov	r8, r2
 800964c:	f7f6 fdc0 	bl	80001d0 <strlen>
 8009650:	9b01      	ldr	r3, [sp, #4]
 8009652:	f8db 2000 	ldr.w	r2, [fp]
 8009656:	4403      	add	r3, r0
 8009658:	4682      	mov	sl, r0
 800965a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800965e:	9305      	str	r3, [sp, #20]
 8009660:	1c93      	adds	r3, r2, #2
 8009662:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009666:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800966a:	32fe      	adds	r2, #254	; 0xfe
 800966c:	18d1      	adds	r1, r2, r3
 800966e:	461f      	mov	r7, r3
 8009670:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009674:	9100      	str	r1, [sp, #0]
 8009676:	2830      	cmp	r0, #48	; 0x30
 8009678:	d0f8      	beq.n	800966c <__gethex+0x3c>
 800967a:	f7ff ffc3 	bl	8009604 <__hexdig_fun>
 800967e:	4604      	mov	r4, r0
 8009680:	2800      	cmp	r0, #0
 8009682:	d13a      	bne.n	80096fa <__gethex+0xca>
 8009684:	9901      	ldr	r1, [sp, #4]
 8009686:	4652      	mov	r2, sl
 8009688:	4638      	mov	r0, r7
 800968a:	f7fe f946 	bl	800791a <strncmp>
 800968e:	4605      	mov	r5, r0
 8009690:	2800      	cmp	r0, #0
 8009692:	d168      	bne.n	8009766 <__gethex+0x136>
 8009694:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009698:	eb07 060a 	add.w	r6, r7, sl
 800969c:	f7ff ffb2 	bl	8009604 <__hexdig_fun>
 80096a0:	2800      	cmp	r0, #0
 80096a2:	d062      	beq.n	800976a <__gethex+0x13a>
 80096a4:	4633      	mov	r3, r6
 80096a6:	7818      	ldrb	r0, [r3, #0]
 80096a8:	2830      	cmp	r0, #48	; 0x30
 80096aa:	461f      	mov	r7, r3
 80096ac:	f103 0301 	add.w	r3, r3, #1
 80096b0:	d0f9      	beq.n	80096a6 <__gethex+0x76>
 80096b2:	f7ff ffa7 	bl	8009604 <__hexdig_fun>
 80096b6:	2301      	movs	r3, #1
 80096b8:	fab0 f480 	clz	r4, r0
 80096bc:	0964      	lsrs	r4, r4, #5
 80096be:	4635      	mov	r5, r6
 80096c0:	9300      	str	r3, [sp, #0]
 80096c2:	463a      	mov	r2, r7
 80096c4:	4616      	mov	r6, r2
 80096c6:	3201      	adds	r2, #1
 80096c8:	7830      	ldrb	r0, [r6, #0]
 80096ca:	f7ff ff9b 	bl	8009604 <__hexdig_fun>
 80096ce:	2800      	cmp	r0, #0
 80096d0:	d1f8      	bne.n	80096c4 <__gethex+0x94>
 80096d2:	9901      	ldr	r1, [sp, #4]
 80096d4:	4652      	mov	r2, sl
 80096d6:	4630      	mov	r0, r6
 80096d8:	f7fe f91f 	bl	800791a <strncmp>
 80096dc:	b980      	cbnz	r0, 8009700 <__gethex+0xd0>
 80096de:	b94d      	cbnz	r5, 80096f4 <__gethex+0xc4>
 80096e0:	eb06 050a 	add.w	r5, r6, sl
 80096e4:	462a      	mov	r2, r5
 80096e6:	4616      	mov	r6, r2
 80096e8:	3201      	adds	r2, #1
 80096ea:	7830      	ldrb	r0, [r6, #0]
 80096ec:	f7ff ff8a 	bl	8009604 <__hexdig_fun>
 80096f0:	2800      	cmp	r0, #0
 80096f2:	d1f8      	bne.n	80096e6 <__gethex+0xb6>
 80096f4:	1bad      	subs	r5, r5, r6
 80096f6:	00ad      	lsls	r5, r5, #2
 80096f8:	e004      	b.n	8009704 <__gethex+0xd4>
 80096fa:	2400      	movs	r4, #0
 80096fc:	4625      	mov	r5, r4
 80096fe:	e7e0      	b.n	80096c2 <__gethex+0x92>
 8009700:	2d00      	cmp	r5, #0
 8009702:	d1f7      	bne.n	80096f4 <__gethex+0xc4>
 8009704:	7833      	ldrb	r3, [r6, #0]
 8009706:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800970a:	2b50      	cmp	r3, #80	; 0x50
 800970c:	d13b      	bne.n	8009786 <__gethex+0x156>
 800970e:	7873      	ldrb	r3, [r6, #1]
 8009710:	2b2b      	cmp	r3, #43	; 0x2b
 8009712:	d02c      	beq.n	800976e <__gethex+0x13e>
 8009714:	2b2d      	cmp	r3, #45	; 0x2d
 8009716:	d02e      	beq.n	8009776 <__gethex+0x146>
 8009718:	1c71      	adds	r1, r6, #1
 800971a:	f04f 0900 	mov.w	r9, #0
 800971e:	7808      	ldrb	r0, [r1, #0]
 8009720:	f7ff ff70 	bl	8009604 <__hexdig_fun>
 8009724:	1e43      	subs	r3, r0, #1
 8009726:	b2db      	uxtb	r3, r3
 8009728:	2b18      	cmp	r3, #24
 800972a:	d82c      	bhi.n	8009786 <__gethex+0x156>
 800972c:	f1a0 0210 	sub.w	r2, r0, #16
 8009730:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009734:	f7ff ff66 	bl	8009604 <__hexdig_fun>
 8009738:	1e43      	subs	r3, r0, #1
 800973a:	b2db      	uxtb	r3, r3
 800973c:	2b18      	cmp	r3, #24
 800973e:	d91d      	bls.n	800977c <__gethex+0x14c>
 8009740:	f1b9 0f00 	cmp.w	r9, #0
 8009744:	d000      	beq.n	8009748 <__gethex+0x118>
 8009746:	4252      	negs	r2, r2
 8009748:	4415      	add	r5, r2
 800974a:	f8cb 1000 	str.w	r1, [fp]
 800974e:	b1e4      	cbz	r4, 800978a <__gethex+0x15a>
 8009750:	9b00      	ldr	r3, [sp, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	bf14      	ite	ne
 8009756:	2700      	movne	r7, #0
 8009758:	2706      	moveq	r7, #6
 800975a:	4638      	mov	r0, r7
 800975c:	b009      	add	sp, #36	; 0x24
 800975e:	ecbd 8b02 	vpop	{d8}
 8009762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009766:	463e      	mov	r6, r7
 8009768:	4625      	mov	r5, r4
 800976a:	2401      	movs	r4, #1
 800976c:	e7ca      	b.n	8009704 <__gethex+0xd4>
 800976e:	f04f 0900 	mov.w	r9, #0
 8009772:	1cb1      	adds	r1, r6, #2
 8009774:	e7d3      	b.n	800971e <__gethex+0xee>
 8009776:	f04f 0901 	mov.w	r9, #1
 800977a:	e7fa      	b.n	8009772 <__gethex+0x142>
 800977c:	230a      	movs	r3, #10
 800977e:	fb03 0202 	mla	r2, r3, r2, r0
 8009782:	3a10      	subs	r2, #16
 8009784:	e7d4      	b.n	8009730 <__gethex+0x100>
 8009786:	4631      	mov	r1, r6
 8009788:	e7df      	b.n	800974a <__gethex+0x11a>
 800978a:	1bf3      	subs	r3, r6, r7
 800978c:	3b01      	subs	r3, #1
 800978e:	4621      	mov	r1, r4
 8009790:	2b07      	cmp	r3, #7
 8009792:	dc0b      	bgt.n	80097ac <__gethex+0x17c>
 8009794:	ee18 0a10 	vmov	r0, s16
 8009798:	f000 fa86 	bl	8009ca8 <_Balloc>
 800979c:	4604      	mov	r4, r0
 800979e:	b940      	cbnz	r0, 80097b2 <__gethex+0x182>
 80097a0:	4b5d      	ldr	r3, [pc, #372]	; (8009918 <__gethex+0x2e8>)
 80097a2:	4602      	mov	r2, r0
 80097a4:	21de      	movs	r1, #222	; 0xde
 80097a6:	485d      	ldr	r0, [pc, #372]	; (800991c <__gethex+0x2ec>)
 80097a8:	f001 f8d8 	bl	800a95c <__assert_func>
 80097ac:	3101      	adds	r1, #1
 80097ae:	105b      	asrs	r3, r3, #1
 80097b0:	e7ee      	b.n	8009790 <__gethex+0x160>
 80097b2:	f100 0914 	add.w	r9, r0, #20
 80097b6:	f04f 0b00 	mov.w	fp, #0
 80097ba:	f1ca 0301 	rsb	r3, sl, #1
 80097be:	f8cd 9008 	str.w	r9, [sp, #8]
 80097c2:	f8cd b000 	str.w	fp, [sp]
 80097c6:	9306      	str	r3, [sp, #24]
 80097c8:	42b7      	cmp	r7, r6
 80097ca:	d340      	bcc.n	800984e <__gethex+0x21e>
 80097cc:	9802      	ldr	r0, [sp, #8]
 80097ce:	9b00      	ldr	r3, [sp, #0]
 80097d0:	f840 3b04 	str.w	r3, [r0], #4
 80097d4:	eba0 0009 	sub.w	r0, r0, r9
 80097d8:	1080      	asrs	r0, r0, #2
 80097da:	0146      	lsls	r6, r0, #5
 80097dc:	6120      	str	r0, [r4, #16]
 80097de:	4618      	mov	r0, r3
 80097e0:	f000 fb54 	bl	8009e8c <__hi0bits>
 80097e4:	1a30      	subs	r0, r6, r0
 80097e6:	f8d8 6000 	ldr.w	r6, [r8]
 80097ea:	42b0      	cmp	r0, r6
 80097ec:	dd63      	ble.n	80098b6 <__gethex+0x286>
 80097ee:	1b87      	subs	r7, r0, r6
 80097f0:	4639      	mov	r1, r7
 80097f2:	4620      	mov	r0, r4
 80097f4:	f000 fef8 	bl	800a5e8 <__any_on>
 80097f8:	4682      	mov	sl, r0
 80097fa:	b1a8      	cbz	r0, 8009828 <__gethex+0x1f8>
 80097fc:	1e7b      	subs	r3, r7, #1
 80097fe:	1159      	asrs	r1, r3, #5
 8009800:	f003 021f 	and.w	r2, r3, #31
 8009804:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009808:	f04f 0a01 	mov.w	sl, #1
 800980c:	fa0a f202 	lsl.w	r2, sl, r2
 8009810:	420a      	tst	r2, r1
 8009812:	d009      	beq.n	8009828 <__gethex+0x1f8>
 8009814:	4553      	cmp	r3, sl
 8009816:	dd05      	ble.n	8009824 <__gethex+0x1f4>
 8009818:	1eb9      	subs	r1, r7, #2
 800981a:	4620      	mov	r0, r4
 800981c:	f000 fee4 	bl	800a5e8 <__any_on>
 8009820:	2800      	cmp	r0, #0
 8009822:	d145      	bne.n	80098b0 <__gethex+0x280>
 8009824:	f04f 0a02 	mov.w	sl, #2
 8009828:	4639      	mov	r1, r7
 800982a:	4620      	mov	r0, r4
 800982c:	f7ff fe98 	bl	8009560 <rshift>
 8009830:	443d      	add	r5, r7
 8009832:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009836:	42ab      	cmp	r3, r5
 8009838:	da4c      	bge.n	80098d4 <__gethex+0x2a4>
 800983a:	ee18 0a10 	vmov	r0, s16
 800983e:	4621      	mov	r1, r4
 8009840:	f000 fa72 	bl	8009d28 <_Bfree>
 8009844:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009846:	2300      	movs	r3, #0
 8009848:	6013      	str	r3, [r2, #0]
 800984a:	27a3      	movs	r7, #163	; 0xa3
 800984c:	e785      	b.n	800975a <__gethex+0x12a>
 800984e:	1e73      	subs	r3, r6, #1
 8009850:	9a05      	ldr	r2, [sp, #20]
 8009852:	9303      	str	r3, [sp, #12]
 8009854:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009858:	4293      	cmp	r3, r2
 800985a:	d019      	beq.n	8009890 <__gethex+0x260>
 800985c:	f1bb 0f20 	cmp.w	fp, #32
 8009860:	d107      	bne.n	8009872 <__gethex+0x242>
 8009862:	9b02      	ldr	r3, [sp, #8]
 8009864:	9a00      	ldr	r2, [sp, #0]
 8009866:	f843 2b04 	str.w	r2, [r3], #4
 800986a:	9302      	str	r3, [sp, #8]
 800986c:	2300      	movs	r3, #0
 800986e:	9300      	str	r3, [sp, #0]
 8009870:	469b      	mov	fp, r3
 8009872:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009876:	f7ff fec5 	bl	8009604 <__hexdig_fun>
 800987a:	9b00      	ldr	r3, [sp, #0]
 800987c:	f000 000f 	and.w	r0, r0, #15
 8009880:	fa00 f00b 	lsl.w	r0, r0, fp
 8009884:	4303      	orrs	r3, r0
 8009886:	9300      	str	r3, [sp, #0]
 8009888:	f10b 0b04 	add.w	fp, fp, #4
 800988c:	9b03      	ldr	r3, [sp, #12]
 800988e:	e00d      	b.n	80098ac <__gethex+0x27c>
 8009890:	9b03      	ldr	r3, [sp, #12]
 8009892:	9a06      	ldr	r2, [sp, #24]
 8009894:	4413      	add	r3, r2
 8009896:	42bb      	cmp	r3, r7
 8009898:	d3e0      	bcc.n	800985c <__gethex+0x22c>
 800989a:	4618      	mov	r0, r3
 800989c:	9901      	ldr	r1, [sp, #4]
 800989e:	9307      	str	r3, [sp, #28]
 80098a0:	4652      	mov	r2, sl
 80098a2:	f7fe f83a 	bl	800791a <strncmp>
 80098a6:	9b07      	ldr	r3, [sp, #28]
 80098a8:	2800      	cmp	r0, #0
 80098aa:	d1d7      	bne.n	800985c <__gethex+0x22c>
 80098ac:	461e      	mov	r6, r3
 80098ae:	e78b      	b.n	80097c8 <__gethex+0x198>
 80098b0:	f04f 0a03 	mov.w	sl, #3
 80098b4:	e7b8      	b.n	8009828 <__gethex+0x1f8>
 80098b6:	da0a      	bge.n	80098ce <__gethex+0x29e>
 80098b8:	1a37      	subs	r7, r6, r0
 80098ba:	4621      	mov	r1, r4
 80098bc:	ee18 0a10 	vmov	r0, s16
 80098c0:	463a      	mov	r2, r7
 80098c2:	f000 fc4d 	bl	800a160 <__lshift>
 80098c6:	1bed      	subs	r5, r5, r7
 80098c8:	4604      	mov	r4, r0
 80098ca:	f100 0914 	add.w	r9, r0, #20
 80098ce:	f04f 0a00 	mov.w	sl, #0
 80098d2:	e7ae      	b.n	8009832 <__gethex+0x202>
 80098d4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80098d8:	42a8      	cmp	r0, r5
 80098da:	dd72      	ble.n	80099c2 <__gethex+0x392>
 80098dc:	1b45      	subs	r5, r0, r5
 80098de:	42ae      	cmp	r6, r5
 80098e0:	dc36      	bgt.n	8009950 <__gethex+0x320>
 80098e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80098e6:	2b02      	cmp	r3, #2
 80098e8:	d02a      	beq.n	8009940 <__gethex+0x310>
 80098ea:	2b03      	cmp	r3, #3
 80098ec:	d02c      	beq.n	8009948 <__gethex+0x318>
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d11c      	bne.n	800992c <__gethex+0x2fc>
 80098f2:	42ae      	cmp	r6, r5
 80098f4:	d11a      	bne.n	800992c <__gethex+0x2fc>
 80098f6:	2e01      	cmp	r6, #1
 80098f8:	d112      	bne.n	8009920 <__gethex+0x2f0>
 80098fa:	9a04      	ldr	r2, [sp, #16]
 80098fc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009900:	6013      	str	r3, [r2, #0]
 8009902:	2301      	movs	r3, #1
 8009904:	6123      	str	r3, [r4, #16]
 8009906:	f8c9 3000 	str.w	r3, [r9]
 800990a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800990c:	2762      	movs	r7, #98	; 0x62
 800990e:	601c      	str	r4, [r3, #0]
 8009910:	e723      	b.n	800975a <__gethex+0x12a>
 8009912:	bf00      	nop
 8009914:	0800b4c8 	.word	0x0800b4c8
 8009918:	0800b450 	.word	0x0800b450
 800991c:	0800b461 	.word	0x0800b461
 8009920:	1e71      	subs	r1, r6, #1
 8009922:	4620      	mov	r0, r4
 8009924:	f000 fe60 	bl	800a5e8 <__any_on>
 8009928:	2800      	cmp	r0, #0
 800992a:	d1e6      	bne.n	80098fa <__gethex+0x2ca>
 800992c:	ee18 0a10 	vmov	r0, s16
 8009930:	4621      	mov	r1, r4
 8009932:	f000 f9f9 	bl	8009d28 <_Bfree>
 8009936:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009938:	2300      	movs	r3, #0
 800993a:	6013      	str	r3, [r2, #0]
 800993c:	2750      	movs	r7, #80	; 0x50
 800993e:	e70c      	b.n	800975a <__gethex+0x12a>
 8009940:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009942:	2b00      	cmp	r3, #0
 8009944:	d1f2      	bne.n	800992c <__gethex+0x2fc>
 8009946:	e7d8      	b.n	80098fa <__gethex+0x2ca>
 8009948:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800994a:	2b00      	cmp	r3, #0
 800994c:	d1d5      	bne.n	80098fa <__gethex+0x2ca>
 800994e:	e7ed      	b.n	800992c <__gethex+0x2fc>
 8009950:	1e6f      	subs	r7, r5, #1
 8009952:	f1ba 0f00 	cmp.w	sl, #0
 8009956:	d131      	bne.n	80099bc <__gethex+0x38c>
 8009958:	b127      	cbz	r7, 8009964 <__gethex+0x334>
 800995a:	4639      	mov	r1, r7
 800995c:	4620      	mov	r0, r4
 800995e:	f000 fe43 	bl	800a5e8 <__any_on>
 8009962:	4682      	mov	sl, r0
 8009964:	117b      	asrs	r3, r7, #5
 8009966:	2101      	movs	r1, #1
 8009968:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800996c:	f007 071f 	and.w	r7, r7, #31
 8009970:	fa01 f707 	lsl.w	r7, r1, r7
 8009974:	421f      	tst	r7, r3
 8009976:	4629      	mov	r1, r5
 8009978:	4620      	mov	r0, r4
 800997a:	bf18      	it	ne
 800997c:	f04a 0a02 	orrne.w	sl, sl, #2
 8009980:	1b76      	subs	r6, r6, r5
 8009982:	f7ff fded 	bl	8009560 <rshift>
 8009986:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800998a:	2702      	movs	r7, #2
 800998c:	f1ba 0f00 	cmp.w	sl, #0
 8009990:	d048      	beq.n	8009a24 <__gethex+0x3f4>
 8009992:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009996:	2b02      	cmp	r3, #2
 8009998:	d015      	beq.n	80099c6 <__gethex+0x396>
 800999a:	2b03      	cmp	r3, #3
 800999c:	d017      	beq.n	80099ce <__gethex+0x39e>
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d109      	bne.n	80099b6 <__gethex+0x386>
 80099a2:	f01a 0f02 	tst.w	sl, #2
 80099a6:	d006      	beq.n	80099b6 <__gethex+0x386>
 80099a8:	f8d9 0000 	ldr.w	r0, [r9]
 80099ac:	ea4a 0a00 	orr.w	sl, sl, r0
 80099b0:	f01a 0f01 	tst.w	sl, #1
 80099b4:	d10e      	bne.n	80099d4 <__gethex+0x3a4>
 80099b6:	f047 0710 	orr.w	r7, r7, #16
 80099ba:	e033      	b.n	8009a24 <__gethex+0x3f4>
 80099bc:	f04f 0a01 	mov.w	sl, #1
 80099c0:	e7d0      	b.n	8009964 <__gethex+0x334>
 80099c2:	2701      	movs	r7, #1
 80099c4:	e7e2      	b.n	800998c <__gethex+0x35c>
 80099c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099c8:	f1c3 0301 	rsb	r3, r3, #1
 80099cc:	9315      	str	r3, [sp, #84]	; 0x54
 80099ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d0f0      	beq.n	80099b6 <__gethex+0x386>
 80099d4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80099d8:	f104 0314 	add.w	r3, r4, #20
 80099dc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80099e0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80099e4:	f04f 0c00 	mov.w	ip, #0
 80099e8:	4618      	mov	r0, r3
 80099ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80099ee:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80099f2:	d01c      	beq.n	8009a2e <__gethex+0x3fe>
 80099f4:	3201      	adds	r2, #1
 80099f6:	6002      	str	r2, [r0, #0]
 80099f8:	2f02      	cmp	r7, #2
 80099fa:	f104 0314 	add.w	r3, r4, #20
 80099fe:	d13f      	bne.n	8009a80 <__gethex+0x450>
 8009a00:	f8d8 2000 	ldr.w	r2, [r8]
 8009a04:	3a01      	subs	r2, #1
 8009a06:	42b2      	cmp	r2, r6
 8009a08:	d10a      	bne.n	8009a20 <__gethex+0x3f0>
 8009a0a:	1171      	asrs	r1, r6, #5
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009a12:	f006 061f 	and.w	r6, r6, #31
 8009a16:	fa02 f606 	lsl.w	r6, r2, r6
 8009a1a:	421e      	tst	r6, r3
 8009a1c:	bf18      	it	ne
 8009a1e:	4617      	movne	r7, r2
 8009a20:	f047 0720 	orr.w	r7, r7, #32
 8009a24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a26:	601c      	str	r4, [r3, #0]
 8009a28:	9b04      	ldr	r3, [sp, #16]
 8009a2a:	601d      	str	r5, [r3, #0]
 8009a2c:	e695      	b.n	800975a <__gethex+0x12a>
 8009a2e:	4299      	cmp	r1, r3
 8009a30:	f843 cc04 	str.w	ip, [r3, #-4]
 8009a34:	d8d8      	bhi.n	80099e8 <__gethex+0x3b8>
 8009a36:	68a3      	ldr	r3, [r4, #8]
 8009a38:	459b      	cmp	fp, r3
 8009a3a:	db19      	blt.n	8009a70 <__gethex+0x440>
 8009a3c:	6861      	ldr	r1, [r4, #4]
 8009a3e:	ee18 0a10 	vmov	r0, s16
 8009a42:	3101      	adds	r1, #1
 8009a44:	f000 f930 	bl	8009ca8 <_Balloc>
 8009a48:	4681      	mov	r9, r0
 8009a4a:	b918      	cbnz	r0, 8009a54 <__gethex+0x424>
 8009a4c:	4b1a      	ldr	r3, [pc, #104]	; (8009ab8 <__gethex+0x488>)
 8009a4e:	4602      	mov	r2, r0
 8009a50:	2184      	movs	r1, #132	; 0x84
 8009a52:	e6a8      	b.n	80097a6 <__gethex+0x176>
 8009a54:	6922      	ldr	r2, [r4, #16]
 8009a56:	3202      	adds	r2, #2
 8009a58:	f104 010c 	add.w	r1, r4, #12
 8009a5c:	0092      	lsls	r2, r2, #2
 8009a5e:	300c      	adds	r0, #12
 8009a60:	f7fc ff08 	bl	8006874 <memcpy>
 8009a64:	4621      	mov	r1, r4
 8009a66:	ee18 0a10 	vmov	r0, s16
 8009a6a:	f000 f95d 	bl	8009d28 <_Bfree>
 8009a6e:	464c      	mov	r4, r9
 8009a70:	6923      	ldr	r3, [r4, #16]
 8009a72:	1c5a      	adds	r2, r3, #1
 8009a74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009a78:	6122      	str	r2, [r4, #16]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	615a      	str	r2, [r3, #20]
 8009a7e:	e7bb      	b.n	80099f8 <__gethex+0x3c8>
 8009a80:	6922      	ldr	r2, [r4, #16]
 8009a82:	455a      	cmp	r2, fp
 8009a84:	dd0b      	ble.n	8009a9e <__gethex+0x46e>
 8009a86:	2101      	movs	r1, #1
 8009a88:	4620      	mov	r0, r4
 8009a8a:	f7ff fd69 	bl	8009560 <rshift>
 8009a8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009a92:	3501      	adds	r5, #1
 8009a94:	42ab      	cmp	r3, r5
 8009a96:	f6ff aed0 	blt.w	800983a <__gethex+0x20a>
 8009a9a:	2701      	movs	r7, #1
 8009a9c:	e7c0      	b.n	8009a20 <__gethex+0x3f0>
 8009a9e:	f016 061f 	ands.w	r6, r6, #31
 8009aa2:	d0fa      	beq.n	8009a9a <__gethex+0x46a>
 8009aa4:	4453      	add	r3, sl
 8009aa6:	f1c6 0620 	rsb	r6, r6, #32
 8009aaa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009aae:	f000 f9ed 	bl	8009e8c <__hi0bits>
 8009ab2:	42b0      	cmp	r0, r6
 8009ab4:	dbe7      	blt.n	8009a86 <__gethex+0x456>
 8009ab6:	e7f0      	b.n	8009a9a <__gethex+0x46a>
 8009ab8:	0800b450 	.word	0x0800b450

08009abc <L_shift>:
 8009abc:	f1c2 0208 	rsb	r2, r2, #8
 8009ac0:	0092      	lsls	r2, r2, #2
 8009ac2:	b570      	push	{r4, r5, r6, lr}
 8009ac4:	f1c2 0620 	rsb	r6, r2, #32
 8009ac8:	6843      	ldr	r3, [r0, #4]
 8009aca:	6804      	ldr	r4, [r0, #0]
 8009acc:	fa03 f506 	lsl.w	r5, r3, r6
 8009ad0:	432c      	orrs	r4, r5
 8009ad2:	40d3      	lsrs	r3, r2
 8009ad4:	6004      	str	r4, [r0, #0]
 8009ad6:	f840 3f04 	str.w	r3, [r0, #4]!
 8009ada:	4288      	cmp	r0, r1
 8009adc:	d3f4      	bcc.n	8009ac8 <L_shift+0xc>
 8009ade:	bd70      	pop	{r4, r5, r6, pc}

08009ae0 <__match>:
 8009ae0:	b530      	push	{r4, r5, lr}
 8009ae2:	6803      	ldr	r3, [r0, #0]
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009aea:	b914      	cbnz	r4, 8009af2 <__match+0x12>
 8009aec:	6003      	str	r3, [r0, #0]
 8009aee:	2001      	movs	r0, #1
 8009af0:	bd30      	pop	{r4, r5, pc}
 8009af2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009af6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009afa:	2d19      	cmp	r5, #25
 8009afc:	bf98      	it	ls
 8009afe:	3220      	addls	r2, #32
 8009b00:	42a2      	cmp	r2, r4
 8009b02:	d0f0      	beq.n	8009ae6 <__match+0x6>
 8009b04:	2000      	movs	r0, #0
 8009b06:	e7f3      	b.n	8009af0 <__match+0x10>

08009b08 <__hexnan>:
 8009b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b0c:	680b      	ldr	r3, [r1, #0]
 8009b0e:	115e      	asrs	r6, r3, #5
 8009b10:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009b14:	f013 031f 	ands.w	r3, r3, #31
 8009b18:	b087      	sub	sp, #28
 8009b1a:	bf18      	it	ne
 8009b1c:	3604      	addne	r6, #4
 8009b1e:	2500      	movs	r5, #0
 8009b20:	1f37      	subs	r7, r6, #4
 8009b22:	4690      	mov	r8, r2
 8009b24:	6802      	ldr	r2, [r0, #0]
 8009b26:	9301      	str	r3, [sp, #4]
 8009b28:	4682      	mov	sl, r0
 8009b2a:	f846 5c04 	str.w	r5, [r6, #-4]
 8009b2e:	46b9      	mov	r9, r7
 8009b30:	463c      	mov	r4, r7
 8009b32:	9502      	str	r5, [sp, #8]
 8009b34:	46ab      	mov	fp, r5
 8009b36:	7851      	ldrb	r1, [r2, #1]
 8009b38:	1c53      	adds	r3, r2, #1
 8009b3a:	9303      	str	r3, [sp, #12]
 8009b3c:	b341      	cbz	r1, 8009b90 <__hexnan+0x88>
 8009b3e:	4608      	mov	r0, r1
 8009b40:	9205      	str	r2, [sp, #20]
 8009b42:	9104      	str	r1, [sp, #16]
 8009b44:	f7ff fd5e 	bl	8009604 <__hexdig_fun>
 8009b48:	2800      	cmp	r0, #0
 8009b4a:	d14f      	bne.n	8009bec <__hexnan+0xe4>
 8009b4c:	9904      	ldr	r1, [sp, #16]
 8009b4e:	9a05      	ldr	r2, [sp, #20]
 8009b50:	2920      	cmp	r1, #32
 8009b52:	d818      	bhi.n	8009b86 <__hexnan+0x7e>
 8009b54:	9b02      	ldr	r3, [sp, #8]
 8009b56:	459b      	cmp	fp, r3
 8009b58:	dd13      	ble.n	8009b82 <__hexnan+0x7a>
 8009b5a:	454c      	cmp	r4, r9
 8009b5c:	d206      	bcs.n	8009b6c <__hexnan+0x64>
 8009b5e:	2d07      	cmp	r5, #7
 8009b60:	dc04      	bgt.n	8009b6c <__hexnan+0x64>
 8009b62:	462a      	mov	r2, r5
 8009b64:	4649      	mov	r1, r9
 8009b66:	4620      	mov	r0, r4
 8009b68:	f7ff ffa8 	bl	8009abc <L_shift>
 8009b6c:	4544      	cmp	r4, r8
 8009b6e:	d950      	bls.n	8009c12 <__hexnan+0x10a>
 8009b70:	2300      	movs	r3, #0
 8009b72:	f1a4 0904 	sub.w	r9, r4, #4
 8009b76:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b7a:	f8cd b008 	str.w	fp, [sp, #8]
 8009b7e:	464c      	mov	r4, r9
 8009b80:	461d      	mov	r5, r3
 8009b82:	9a03      	ldr	r2, [sp, #12]
 8009b84:	e7d7      	b.n	8009b36 <__hexnan+0x2e>
 8009b86:	2929      	cmp	r1, #41	; 0x29
 8009b88:	d156      	bne.n	8009c38 <__hexnan+0x130>
 8009b8a:	3202      	adds	r2, #2
 8009b8c:	f8ca 2000 	str.w	r2, [sl]
 8009b90:	f1bb 0f00 	cmp.w	fp, #0
 8009b94:	d050      	beq.n	8009c38 <__hexnan+0x130>
 8009b96:	454c      	cmp	r4, r9
 8009b98:	d206      	bcs.n	8009ba8 <__hexnan+0xa0>
 8009b9a:	2d07      	cmp	r5, #7
 8009b9c:	dc04      	bgt.n	8009ba8 <__hexnan+0xa0>
 8009b9e:	462a      	mov	r2, r5
 8009ba0:	4649      	mov	r1, r9
 8009ba2:	4620      	mov	r0, r4
 8009ba4:	f7ff ff8a 	bl	8009abc <L_shift>
 8009ba8:	4544      	cmp	r4, r8
 8009baa:	d934      	bls.n	8009c16 <__hexnan+0x10e>
 8009bac:	f1a8 0204 	sub.w	r2, r8, #4
 8009bb0:	4623      	mov	r3, r4
 8009bb2:	f853 1b04 	ldr.w	r1, [r3], #4
 8009bb6:	f842 1f04 	str.w	r1, [r2, #4]!
 8009bba:	429f      	cmp	r7, r3
 8009bbc:	d2f9      	bcs.n	8009bb2 <__hexnan+0xaa>
 8009bbe:	1b3b      	subs	r3, r7, r4
 8009bc0:	f023 0303 	bic.w	r3, r3, #3
 8009bc4:	3304      	adds	r3, #4
 8009bc6:	3401      	adds	r4, #1
 8009bc8:	3e03      	subs	r6, #3
 8009bca:	42b4      	cmp	r4, r6
 8009bcc:	bf88      	it	hi
 8009bce:	2304      	movhi	r3, #4
 8009bd0:	4443      	add	r3, r8
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	f843 2b04 	str.w	r2, [r3], #4
 8009bd8:	429f      	cmp	r7, r3
 8009bda:	d2fb      	bcs.n	8009bd4 <__hexnan+0xcc>
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	b91b      	cbnz	r3, 8009be8 <__hexnan+0xe0>
 8009be0:	4547      	cmp	r7, r8
 8009be2:	d127      	bne.n	8009c34 <__hexnan+0x12c>
 8009be4:	2301      	movs	r3, #1
 8009be6:	603b      	str	r3, [r7, #0]
 8009be8:	2005      	movs	r0, #5
 8009bea:	e026      	b.n	8009c3a <__hexnan+0x132>
 8009bec:	3501      	adds	r5, #1
 8009bee:	2d08      	cmp	r5, #8
 8009bf0:	f10b 0b01 	add.w	fp, fp, #1
 8009bf4:	dd06      	ble.n	8009c04 <__hexnan+0xfc>
 8009bf6:	4544      	cmp	r4, r8
 8009bf8:	d9c3      	bls.n	8009b82 <__hexnan+0x7a>
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c00:	2501      	movs	r5, #1
 8009c02:	3c04      	subs	r4, #4
 8009c04:	6822      	ldr	r2, [r4, #0]
 8009c06:	f000 000f 	and.w	r0, r0, #15
 8009c0a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009c0e:	6022      	str	r2, [r4, #0]
 8009c10:	e7b7      	b.n	8009b82 <__hexnan+0x7a>
 8009c12:	2508      	movs	r5, #8
 8009c14:	e7b5      	b.n	8009b82 <__hexnan+0x7a>
 8009c16:	9b01      	ldr	r3, [sp, #4]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d0df      	beq.n	8009bdc <__hexnan+0xd4>
 8009c1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c20:	f1c3 0320 	rsb	r3, r3, #32
 8009c24:	fa22 f303 	lsr.w	r3, r2, r3
 8009c28:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009c2c:	401a      	ands	r2, r3
 8009c2e:	f846 2c04 	str.w	r2, [r6, #-4]
 8009c32:	e7d3      	b.n	8009bdc <__hexnan+0xd4>
 8009c34:	3f04      	subs	r7, #4
 8009c36:	e7d1      	b.n	8009bdc <__hexnan+0xd4>
 8009c38:	2004      	movs	r0, #4
 8009c3a:	b007      	add	sp, #28
 8009c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009c40 <_localeconv_r>:
 8009c40:	4800      	ldr	r0, [pc, #0]	; (8009c44 <_localeconv_r+0x4>)
 8009c42:	4770      	bx	lr
 8009c44:	20000168 	.word	0x20000168

08009c48 <_lseek_r>:
 8009c48:	b538      	push	{r3, r4, r5, lr}
 8009c4a:	4d07      	ldr	r5, [pc, #28]	; (8009c68 <_lseek_r+0x20>)
 8009c4c:	4604      	mov	r4, r0
 8009c4e:	4608      	mov	r0, r1
 8009c50:	4611      	mov	r1, r2
 8009c52:	2200      	movs	r2, #0
 8009c54:	602a      	str	r2, [r5, #0]
 8009c56:	461a      	mov	r2, r3
 8009c58:	f7f7 fd16 	bl	8001688 <_lseek>
 8009c5c:	1c43      	adds	r3, r0, #1
 8009c5e:	d102      	bne.n	8009c66 <_lseek_r+0x1e>
 8009c60:	682b      	ldr	r3, [r5, #0]
 8009c62:	b103      	cbz	r3, 8009c66 <_lseek_r+0x1e>
 8009c64:	6023      	str	r3, [r4, #0]
 8009c66:	bd38      	pop	{r3, r4, r5, pc}
 8009c68:	200047fc 	.word	0x200047fc

08009c6c <__ascii_mbtowc>:
 8009c6c:	b082      	sub	sp, #8
 8009c6e:	b901      	cbnz	r1, 8009c72 <__ascii_mbtowc+0x6>
 8009c70:	a901      	add	r1, sp, #4
 8009c72:	b142      	cbz	r2, 8009c86 <__ascii_mbtowc+0x1a>
 8009c74:	b14b      	cbz	r3, 8009c8a <__ascii_mbtowc+0x1e>
 8009c76:	7813      	ldrb	r3, [r2, #0]
 8009c78:	600b      	str	r3, [r1, #0]
 8009c7a:	7812      	ldrb	r2, [r2, #0]
 8009c7c:	1e10      	subs	r0, r2, #0
 8009c7e:	bf18      	it	ne
 8009c80:	2001      	movne	r0, #1
 8009c82:	b002      	add	sp, #8
 8009c84:	4770      	bx	lr
 8009c86:	4610      	mov	r0, r2
 8009c88:	e7fb      	b.n	8009c82 <__ascii_mbtowc+0x16>
 8009c8a:	f06f 0001 	mvn.w	r0, #1
 8009c8e:	e7f8      	b.n	8009c82 <__ascii_mbtowc+0x16>

08009c90 <__malloc_lock>:
 8009c90:	4801      	ldr	r0, [pc, #4]	; (8009c98 <__malloc_lock+0x8>)
 8009c92:	f7fc bde4 	b.w	800685e <__retarget_lock_acquire_recursive>
 8009c96:	bf00      	nop
 8009c98:	200047f0 	.word	0x200047f0

08009c9c <__malloc_unlock>:
 8009c9c:	4801      	ldr	r0, [pc, #4]	; (8009ca4 <__malloc_unlock+0x8>)
 8009c9e:	f7fc bddf 	b.w	8006860 <__retarget_lock_release_recursive>
 8009ca2:	bf00      	nop
 8009ca4:	200047f0 	.word	0x200047f0

08009ca8 <_Balloc>:
 8009ca8:	b570      	push	{r4, r5, r6, lr}
 8009caa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009cac:	4604      	mov	r4, r0
 8009cae:	460d      	mov	r5, r1
 8009cb0:	b976      	cbnz	r6, 8009cd0 <_Balloc+0x28>
 8009cb2:	2010      	movs	r0, #16
 8009cb4:	f7fc fdd6 	bl	8006864 <malloc>
 8009cb8:	4602      	mov	r2, r0
 8009cba:	6260      	str	r0, [r4, #36]	; 0x24
 8009cbc:	b920      	cbnz	r0, 8009cc8 <_Balloc+0x20>
 8009cbe:	4b18      	ldr	r3, [pc, #96]	; (8009d20 <_Balloc+0x78>)
 8009cc0:	4818      	ldr	r0, [pc, #96]	; (8009d24 <_Balloc+0x7c>)
 8009cc2:	2166      	movs	r1, #102	; 0x66
 8009cc4:	f000 fe4a 	bl	800a95c <__assert_func>
 8009cc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ccc:	6006      	str	r6, [r0, #0]
 8009cce:	60c6      	str	r6, [r0, #12]
 8009cd0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009cd2:	68f3      	ldr	r3, [r6, #12]
 8009cd4:	b183      	cbz	r3, 8009cf8 <_Balloc+0x50>
 8009cd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cd8:	68db      	ldr	r3, [r3, #12]
 8009cda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009cde:	b9b8      	cbnz	r0, 8009d10 <_Balloc+0x68>
 8009ce0:	2101      	movs	r1, #1
 8009ce2:	fa01 f605 	lsl.w	r6, r1, r5
 8009ce6:	1d72      	adds	r2, r6, #5
 8009ce8:	0092      	lsls	r2, r2, #2
 8009cea:	4620      	mov	r0, r4
 8009cec:	f000 fc9d 	bl	800a62a <_calloc_r>
 8009cf0:	b160      	cbz	r0, 8009d0c <_Balloc+0x64>
 8009cf2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009cf6:	e00e      	b.n	8009d16 <_Balloc+0x6e>
 8009cf8:	2221      	movs	r2, #33	; 0x21
 8009cfa:	2104      	movs	r1, #4
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	f000 fc94 	bl	800a62a <_calloc_r>
 8009d02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d04:	60f0      	str	r0, [r6, #12]
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d1e4      	bne.n	8009cd6 <_Balloc+0x2e>
 8009d0c:	2000      	movs	r0, #0
 8009d0e:	bd70      	pop	{r4, r5, r6, pc}
 8009d10:	6802      	ldr	r2, [r0, #0]
 8009d12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d16:	2300      	movs	r3, #0
 8009d18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d1c:	e7f7      	b.n	8009d0e <_Balloc+0x66>
 8009d1e:	bf00      	nop
 8009d20:	0800b3de 	.word	0x0800b3de
 8009d24:	0800b4dc 	.word	0x0800b4dc

08009d28 <_Bfree>:
 8009d28:	b570      	push	{r4, r5, r6, lr}
 8009d2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d2c:	4605      	mov	r5, r0
 8009d2e:	460c      	mov	r4, r1
 8009d30:	b976      	cbnz	r6, 8009d50 <_Bfree+0x28>
 8009d32:	2010      	movs	r0, #16
 8009d34:	f7fc fd96 	bl	8006864 <malloc>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	6268      	str	r0, [r5, #36]	; 0x24
 8009d3c:	b920      	cbnz	r0, 8009d48 <_Bfree+0x20>
 8009d3e:	4b09      	ldr	r3, [pc, #36]	; (8009d64 <_Bfree+0x3c>)
 8009d40:	4809      	ldr	r0, [pc, #36]	; (8009d68 <_Bfree+0x40>)
 8009d42:	218a      	movs	r1, #138	; 0x8a
 8009d44:	f000 fe0a 	bl	800a95c <__assert_func>
 8009d48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d4c:	6006      	str	r6, [r0, #0]
 8009d4e:	60c6      	str	r6, [r0, #12]
 8009d50:	b13c      	cbz	r4, 8009d62 <_Bfree+0x3a>
 8009d52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009d54:	6862      	ldr	r2, [r4, #4]
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d5c:	6021      	str	r1, [r4, #0]
 8009d5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d62:	bd70      	pop	{r4, r5, r6, pc}
 8009d64:	0800b3de 	.word	0x0800b3de
 8009d68:	0800b4dc 	.word	0x0800b4dc

08009d6c <__multadd>:
 8009d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d70:	690d      	ldr	r5, [r1, #16]
 8009d72:	4607      	mov	r7, r0
 8009d74:	460c      	mov	r4, r1
 8009d76:	461e      	mov	r6, r3
 8009d78:	f101 0c14 	add.w	ip, r1, #20
 8009d7c:	2000      	movs	r0, #0
 8009d7e:	f8dc 3000 	ldr.w	r3, [ip]
 8009d82:	b299      	uxth	r1, r3
 8009d84:	fb02 6101 	mla	r1, r2, r1, r6
 8009d88:	0c1e      	lsrs	r6, r3, #16
 8009d8a:	0c0b      	lsrs	r3, r1, #16
 8009d8c:	fb02 3306 	mla	r3, r2, r6, r3
 8009d90:	b289      	uxth	r1, r1
 8009d92:	3001      	adds	r0, #1
 8009d94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009d98:	4285      	cmp	r5, r0
 8009d9a:	f84c 1b04 	str.w	r1, [ip], #4
 8009d9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009da2:	dcec      	bgt.n	8009d7e <__multadd+0x12>
 8009da4:	b30e      	cbz	r6, 8009dea <__multadd+0x7e>
 8009da6:	68a3      	ldr	r3, [r4, #8]
 8009da8:	42ab      	cmp	r3, r5
 8009daa:	dc19      	bgt.n	8009de0 <__multadd+0x74>
 8009dac:	6861      	ldr	r1, [r4, #4]
 8009dae:	4638      	mov	r0, r7
 8009db0:	3101      	adds	r1, #1
 8009db2:	f7ff ff79 	bl	8009ca8 <_Balloc>
 8009db6:	4680      	mov	r8, r0
 8009db8:	b928      	cbnz	r0, 8009dc6 <__multadd+0x5a>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	4b0c      	ldr	r3, [pc, #48]	; (8009df0 <__multadd+0x84>)
 8009dbe:	480d      	ldr	r0, [pc, #52]	; (8009df4 <__multadd+0x88>)
 8009dc0:	21b5      	movs	r1, #181	; 0xb5
 8009dc2:	f000 fdcb 	bl	800a95c <__assert_func>
 8009dc6:	6922      	ldr	r2, [r4, #16]
 8009dc8:	3202      	adds	r2, #2
 8009dca:	f104 010c 	add.w	r1, r4, #12
 8009dce:	0092      	lsls	r2, r2, #2
 8009dd0:	300c      	adds	r0, #12
 8009dd2:	f7fc fd4f 	bl	8006874 <memcpy>
 8009dd6:	4621      	mov	r1, r4
 8009dd8:	4638      	mov	r0, r7
 8009dda:	f7ff ffa5 	bl	8009d28 <_Bfree>
 8009dde:	4644      	mov	r4, r8
 8009de0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009de4:	3501      	adds	r5, #1
 8009de6:	615e      	str	r6, [r3, #20]
 8009de8:	6125      	str	r5, [r4, #16]
 8009dea:	4620      	mov	r0, r4
 8009dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009df0:	0800b450 	.word	0x0800b450
 8009df4:	0800b4dc 	.word	0x0800b4dc

08009df8 <__s2b>:
 8009df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dfc:	460c      	mov	r4, r1
 8009dfe:	4615      	mov	r5, r2
 8009e00:	461f      	mov	r7, r3
 8009e02:	2209      	movs	r2, #9
 8009e04:	3308      	adds	r3, #8
 8009e06:	4606      	mov	r6, r0
 8009e08:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e0c:	2100      	movs	r1, #0
 8009e0e:	2201      	movs	r2, #1
 8009e10:	429a      	cmp	r2, r3
 8009e12:	db09      	blt.n	8009e28 <__s2b+0x30>
 8009e14:	4630      	mov	r0, r6
 8009e16:	f7ff ff47 	bl	8009ca8 <_Balloc>
 8009e1a:	b940      	cbnz	r0, 8009e2e <__s2b+0x36>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	4b19      	ldr	r3, [pc, #100]	; (8009e84 <__s2b+0x8c>)
 8009e20:	4819      	ldr	r0, [pc, #100]	; (8009e88 <__s2b+0x90>)
 8009e22:	21ce      	movs	r1, #206	; 0xce
 8009e24:	f000 fd9a 	bl	800a95c <__assert_func>
 8009e28:	0052      	lsls	r2, r2, #1
 8009e2a:	3101      	adds	r1, #1
 8009e2c:	e7f0      	b.n	8009e10 <__s2b+0x18>
 8009e2e:	9b08      	ldr	r3, [sp, #32]
 8009e30:	6143      	str	r3, [r0, #20]
 8009e32:	2d09      	cmp	r5, #9
 8009e34:	f04f 0301 	mov.w	r3, #1
 8009e38:	6103      	str	r3, [r0, #16]
 8009e3a:	dd16      	ble.n	8009e6a <__s2b+0x72>
 8009e3c:	f104 0909 	add.w	r9, r4, #9
 8009e40:	46c8      	mov	r8, r9
 8009e42:	442c      	add	r4, r5
 8009e44:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009e48:	4601      	mov	r1, r0
 8009e4a:	3b30      	subs	r3, #48	; 0x30
 8009e4c:	220a      	movs	r2, #10
 8009e4e:	4630      	mov	r0, r6
 8009e50:	f7ff ff8c 	bl	8009d6c <__multadd>
 8009e54:	45a0      	cmp	r8, r4
 8009e56:	d1f5      	bne.n	8009e44 <__s2b+0x4c>
 8009e58:	f1a5 0408 	sub.w	r4, r5, #8
 8009e5c:	444c      	add	r4, r9
 8009e5e:	1b2d      	subs	r5, r5, r4
 8009e60:	1963      	adds	r3, r4, r5
 8009e62:	42bb      	cmp	r3, r7
 8009e64:	db04      	blt.n	8009e70 <__s2b+0x78>
 8009e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e6a:	340a      	adds	r4, #10
 8009e6c:	2509      	movs	r5, #9
 8009e6e:	e7f6      	b.n	8009e5e <__s2b+0x66>
 8009e70:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009e74:	4601      	mov	r1, r0
 8009e76:	3b30      	subs	r3, #48	; 0x30
 8009e78:	220a      	movs	r2, #10
 8009e7a:	4630      	mov	r0, r6
 8009e7c:	f7ff ff76 	bl	8009d6c <__multadd>
 8009e80:	e7ee      	b.n	8009e60 <__s2b+0x68>
 8009e82:	bf00      	nop
 8009e84:	0800b450 	.word	0x0800b450
 8009e88:	0800b4dc 	.word	0x0800b4dc

08009e8c <__hi0bits>:
 8009e8c:	0c03      	lsrs	r3, r0, #16
 8009e8e:	041b      	lsls	r3, r3, #16
 8009e90:	b9d3      	cbnz	r3, 8009ec8 <__hi0bits+0x3c>
 8009e92:	0400      	lsls	r0, r0, #16
 8009e94:	2310      	movs	r3, #16
 8009e96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009e9a:	bf04      	itt	eq
 8009e9c:	0200      	lsleq	r0, r0, #8
 8009e9e:	3308      	addeq	r3, #8
 8009ea0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009ea4:	bf04      	itt	eq
 8009ea6:	0100      	lsleq	r0, r0, #4
 8009ea8:	3304      	addeq	r3, #4
 8009eaa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009eae:	bf04      	itt	eq
 8009eb0:	0080      	lsleq	r0, r0, #2
 8009eb2:	3302      	addeq	r3, #2
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	db05      	blt.n	8009ec4 <__hi0bits+0x38>
 8009eb8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009ebc:	f103 0301 	add.w	r3, r3, #1
 8009ec0:	bf08      	it	eq
 8009ec2:	2320      	moveq	r3, #32
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	4770      	bx	lr
 8009ec8:	2300      	movs	r3, #0
 8009eca:	e7e4      	b.n	8009e96 <__hi0bits+0xa>

08009ecc <__lo0bits>:
 8009ecc:	6803      	ldr	r3, [r0, #0]
 8009ece:	f013 0207 	ands.w	r2, r3, #7
 8009ed2:	4601      	mov	r1, r0
 8009ed4:	d00b      	beq.n	8009eee <__lo0bits+0x22>
 8009ed6:	07da      	lsls	r2, r3, #31
 8009ed8:	d423      	bmi.n	8009f22 <__lo0bits+0x56>
 8009eda:	0798      	lsls	r0, r3, #30
 8009edc:	bf49      	itett	mi
 8009ede:	085b      	lsrmi	r3, r3, #1
 8009ee0:	089b      	lsrpl	r3, r3, #2
 8009ee2:	2001      	movmi	r0, #1
 8009ee4:	600b      	strmi	r3, [r1, #0]
 8009ee6:	bf5c      	itt	pl
 8009ee8:	600b      	strpl	r3, [r1, #0]
 8009eea:	2002      	movpl	r0, #2
 8009eec:	4770      	bx	lr
 8009eee:	b298      	uxth	r0, r3
 8009ef0:	b9a8      	cbnz	r0, 8009f1e <__lo0bits+0x52>
 8009ef2:	0c1b      	lsrs	r3, r3, #16
 8009ef4:	2010      	movs	r0, #16
 8009ef6:	b2da      	uxtb	r2, r3
 8009ef8:	b90a      	cbnz	r2, 8009efe <__lo0bits+0x32>
 8009efa:	3008      	adds	r0, #8
 8009efc:	0a1b      	lsrs	r3, r3, #8
 8009efe:	071a      	lsls	r2, r3, #28
 8009f00:	bf04      	itt	eq
 8009f02:	091b      	lsreq	r3, r3, #4
 8009f04:	3004      	addeq	r0, #4
 8009f06:	079a      	lsls	r2, r3, #30
 8009f08:	bf04      	itt	eq
 8009f0a:	089b      	lsreq	r3, r3, #2
 8009f0c:	3002      	addeq	r0, #2
 8009f0e:	07da      	lsls	r2, r3, #31
 8009f10:	d403      	bmi.n	8009f1a <__lo0bits+0x4e>
 8009f12:	085b      	lsrs	r3, r3, #1
 8009f14:	f100 0001 	add.w	r0, r0, #1
 8009f18:	d005      	beq.n	8009f26 <__lo0bits+0x5a>
 8009f1a:	600b      	str	r3, [r1, #0]
 8009f1c:	4770      	bx	lr
 8009f1e:	4610      	mov	r0, r2
 8009f20:	e7e9      	b.n	8009ef6 <__lo0bits+0x2a>
 8009f22:	2000      	movs	r0, #0
 8009f24:	4770      	bx	lr
 8009f26:	2020      	movs	r0, #32
 8009f28:	4770      	bx	lr
	...

08009f2c <__i2b>:
 8009f2c:	b510      	push	{r4, lr}
 8009f2e:	460c      	mov	r4, r1
 8009f30:	2101      	movs	r1, #1
 8009f32:	f7ff feb9 	bl	8009ca8 <_Balloc>
 8009f36:	4602      	mov	r2, r0
 8009f38:	b928      	cbnz	r0, 8009f46 <__i2b+0x1a>
 8009f3a:	4b05      	ldr	r3, [pc, #20]	; (8009f50 <__i2b+0x24>)
 8009f3c:	4805      	ldr	r0, [pc, #20]	; (8009f54 <__i2b+0x28>)
 8009f3e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009f42:	f000 fd0b 	bl	800a95c <__assert_func>
 8009f46:	2301      	movs	r3, #1
 8009f48:	6144      	str	r4, [r0, #20]
 8009f4a:	6103      	str	r3, [r0, #16]
 8009f4c:	bd10      	pop	{r4, pc}
 8009f4e:	bf00      	nop
 8009f50:	0800b450 	.word	0x0800b450
 8009f54:	0800b4dc 	.word	0x0800b4dc

08009f58 <__multiply>:
 8009f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f5c:	4691      	mov	r9, r2
 8009f5e:	690a      	ldr	r2, [r1, #16]
 8009f60:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009f64:	429a      	cmp	r2, r3
 8009f66:	bfb8      	it	lt
 8009f68:	460b      	movlt	r3, r1
 8009f6a:	460c      	mov	r4, r1
 8009f6c:	bfbc      	itt	lt
 8009f6e:	464c      	movlt	r4, r9
 8009f70:	4699      	movlt	r9, r3
 8009f72:	6927      	ldr	r7, [r4, #16]
 8009f74:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009f78:	68a3      	ldr	r3, [r4, #8]
 8009f7a:	6861      	ldr	r1, [r4, #4]
 8009f7c:	eb07 060a 	add.w	r6, r7, sl
 8009f80:	42b3      	cmp	r3, r6
 8009f82:	b085      	sub	sp, #20
 8009f84:	bfb8      	it	lt
 8009f86:	3101      	addlt	r1, #1
 8009f88:	f7ff fe8e 	bl	8009ca8 <_Balloc>
 8009f8c:	b930      	cbnz	r0, 8009f9c <__multiply+0x44>
 8009f8e:	4602      	mov	r2, r0
 8009f90:	4b44      	ldr	r3, [pc, #272]	; (800a0a4 <__multiply+0x14c>)
 8009f92:	4845      	ldr	r0, [pc, #276]	; (800a0a8 <__multiply+0x150>)
 8009f94:	f240 115d 	movw	r1, #349	; 0x15d
 8009f98:	f000 fce0 	bl	800a95c <__assert_func>
 8009f9c:	f100 0514 	add.w	r5, r0, #20
 8009fa0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009fa4:	462b      	mov	r3, r5
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	4543      	cmp	r3, r8
 8009faa:	d321      	bcc.n	8009ff0 <__multiply+0x98>
 8009fac:	f104 0314 	add.w	r3, r4, #20
 8009fb0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009fb4:	f109 0314 	add.w	r3, r9, #20
 8009fb8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009fbc:	9202      	str	r2, [sp, #8]
 8009fbe:	1b3a      	subs	r2, r7, r4
 8009fc0:	3a15      	subs	r2, #21
 8009fc2:	f022 0203 	bic.w	r2, r2, #3
 8009fc6:	3204      	adds	r2, #4
 8009fc8:	f104 0115 	add.w	r1, r4, #21
 8009fcc:	428f      	cmp	r7, r1
 8009fce:	bf38      	it	cc
 8009fd0:	2204      	movcc	r2, #4
 8009fd2:	9201      	str	r2, [sp, #4]
 8009fd4:	9a02      	ldr	r2, [sp, #8]
 8009fd6:	9303      	str	r3, [sp, #12]
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d80c      	bhi.n	8009ff6 <__multiply+0x9e>
 8009fdc:	2e00      	cmp	r6, #0
 8009fde:	dd03      	ble.n	8009fe8 <__multiply+0x90>
 8009fe0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d05a      	beq.n	800a09e <__multiply+0x146>
 8009fe8:	6106      	str	r6, [r0, #16]
 8009fea:	b005      	add	sp, #20
 8009fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff0:	f843 2b04 	str.w	r2, [r3], #4
 8009ff4:	e7d8      	b.n	8009fa8 <__multiply+0x50>
 8009ff6:	f8b3 a000 	ldrh.w	sl, [r3]
 8009ffa:	f1ba 0f00 	cmp.w	sl, #0
 8009ffe:	d024      	beq.n	800a04a <__multiply+0xf2>
 800a000:	f104 0e14 	add.w	lr, r4, #20
 800a004:	46a9      	mov	r9, r5
 800a006:	f04f 0c00 	mov.w	ip, #0
 800a00a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a00e:	f8d9 1000 	ldr.w	r1, [r9]
 800a012:	fa1f fb82 	uxth.w	fp, r2
 800a016:	b289      	uxth	r1, r1
 800a018:	fb0a 110b 	mla	r1, sl, fp, r1
 800a01c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a020:	f8d9 2000 	ldr.w	r2, [r9]
 800a024:	4461      	add	r1, ip
 800a026:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a02a:	fb0a c20b 	mla	r2, sl, fp, ip
 800a02e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a032:	b289      	uxth	r1, r1
 800a034:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a038:	4577      	cmp	r7, lr
 800a03a:	f849 1b04 	str.w	r1, [r9], #4
 800a03e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a042:	d8e2      	bhi.n	800a00a <__multiply+0xb2>
 800a044:	9a01      	ldr	r2, [sp, #4]
 800a046:	f845 c002 	str.w	ip, [r5, r2]
 800a04a:	9a03      	ldr	r2, [sp, #12]
 800a04c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a050:	3304      	adds	r3, #4
 800a052:	f1b9 0f00 	cmp.w	r9, #0
 800a056:	d020      	beq.n	800a09a <__multiply+0x142>
 800a058:	6829      	ldr	r1, [r5, #0]
 800a05a:	f104 0c14 	add.w	ip, r4, #20
 800a05e:	46ae      	mov	lr, r5
 800a060:	f04f 0a00 	mov.w	sl, #0
 800a064:	f8bc b000 	ldrh.w	fp, [ip]
 800a068:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a06c:	fb09 220b 	mla	r2, r9, fp, r2
 800a070:	4492      	add	sl, r2
 800a072:	b289      	uxth	r1, r1
 800a074:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a078:	f84e 1b04 	str.w	r1, [lr], #4
 800a07c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a080:	f8be 1000 	ldrh.w	r1, [lr]
 800a084:	0c12      	lsrs	r2, r2, #16
 800a086:	fb09 1102 	mla	r1, r9, r2, r1
 800a08a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a08e:	4567      	cmp	r7, ip
 800a090:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a094:	d8e6      	bhi.n	800a064 <__multiply+0x10c>
 800a096:	9a01      	ldr	r2, [sp, #4]
 800a098:	50a9      	str	r1, [r5, r2]
 800a09a:	3504      	adds	r5, #4
 800a09c:	e79a      	b.n	8009fd4 <__multiply+0x7c>
 800a09e:	3e01      	subs	r6, #1
 800a0a0:	e79c      	b.n	8009fdc <__multiply+0x84>
 800a0a2:	bf00      	nop
 800a0a4:	0800b450 	.word	0x0800b450
 800a0a8:	0800b4dc 	.word	0x0800b4dc

0800a0ac <__pow5mult>:
 800a0ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0b0:	4615      	mov	r5, r2
 800a0b2:	f012 0203 	ands.w	r2, r2, #3
 800a0b6:	4606      	mov	r6, r0
 800a0b8:	460f      	mov	r7, r1
 800a0ba:	d007      	beq.n	800a0cc <__pow5mult+0x20>
 800a0bc:	4c25      	ldr	r4, [pc, #148]	; (800a154 <__pow5mult+0xa8>)
 800a0be:	3a01      	subs	r2, #1
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a0c6:	f7ff fe51 	bl	8009d6c <__multadd>
 800a0ca:	4607      	mov	r7, r0
 800a0cc:	10ad      	asrs	r5, r5, #2
 800a0ce:	d03d      	beq.n	800a14c <__pow5mult+0xa0>
 800a0d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a0d2:	b97c      	cbnz	r4, 800a0f4 <__pow5mult+0x48>
 800a0d4:	2010      	movs	r0, #16
 800a0d6:	f7fc fbc5 	bl	8006864 <malloc>
 800a0da:	4602      	mov	r2, r0
 800a0dc:	6270      	str	r0, [r6, #36]	; 0x24
 800a0de:	b928      	cbnz	r0, 800a0ec <__pow5mult+0x40>
 800a0e0:	4b1d      	ldr	r3, [pc, #116]	; (800a158 <__pow5mult+0xac>)
 800a0e2:	481e      	ldr	r0, [pc, #120]	; (800a15c <__pow5mult+0xb0>)
 800a0e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a0e8:	f000 fc38 	bl	800a95c <__assert_func>
 800a0ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a0f0:	6004      	str	r4, [r0, #0]
 800a0f2:	60c4      	str	r4, [r0, #12]
 800a0f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a0f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a0fc:	b94c      	cbnz	r4, 800a112 <__pow5mult+0x66>
 800a0fe:	f240 2171 	movw	r1, #625	; 0x271
 800a102:	4630      	mov	r0, r6
 800a104:	f7ff ff12 	bl	8009f2c <__i2b>
 800a108:	2300      	movs	r3, #0
 800a10a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a10e:	4604      	mov	r4, r0
 800a110:	6003      	str	r3, [r0, #0]
 800a112:	f04f 0900 	mov.w	r9, #0
 800a116:	07eb      	lsls	r3, r5, #31
 800a118:	d50a      	bpl.n	800a130 <__pow5mult+0x84>
 800a11a:	4639      	mov	r1, r7
 800a11c:	4622      	mov	r2, r4
 800a11e:	4630      	mov	r0, r6
 800a120:	f7ff ff1a 	bl	8009f58 <__multiply>
 800a124:	4639      	mov	r1, r7
 800a126:	4680      	mov	r8, r0
 800a128:	4630      	mov	r0, r6
 800a12a:	f7ff fdfd 	bl	8009d28 <_Bfree>
 800a12e:	4647      	mov	r7, r8
 800a130:	106d      	asrs	r5, r5, #1
 800a132:	d00b      	beq.n	800a14c <__pow5mult+0xa0>
 800a134:	6820      	ldr	r0, [r4, #0]
 800a136:	b938      	cbnz	r0, 800a148 <__pow5mult+0x9c>
 800a138:	4622      	mov	r2, r4
 800a13a:	4621      	mov	r1, r4
 800a13c:	4630      	mov	r0, r6
 800a13e:	f7ff ff0b 	bl	8009f58 <__multiply>
 800a142:	6020      	str	r0, [r4, #0]
 800a144:	f8c0 9000 	str.w	r9, [r0]
 800a148:	4604      	mov	r4, r0
 800a14a:	e7e4      	b.n	800a116 <__pow5mult+0x6a>
 800a14c:	4638      	mov	r0, r7
 800a14e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a152:	bf00      	nop
 800a154:	0800b628 	.word	0x0800b628
 800a158:	0800b3de 	.word	0x0800b3de
 800a15c:	0800b4dc 	.word	0x0800b4dc

0800a160 <__lshift>:
 800a160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a164:	460c      	mov	r4, r1
 800a166:	6849      	ldr	r1, [r1, #4]
 800a168:	6923      	ldr	r3, [r4, #16]
 800a16a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a16e:	68a3      	ldr	r3, [r4, #8]
 800a170:	4607      	mov	r7, r0
 800a172:	4691      	mov	r9, r2
 800a174:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a178:	f108 0601 	add.w	r6, r8, #1
 800a17c:	42b3      	cmp	r3, r6
 800a17e:	db0b      	blt.n	800a198 <__lshift+0x38>
 800a180:	4638      	mov	r0, r7
 800a182:	f7ff fd91 	bl	8009ca8 <_Balloc>
 800a186:	4605      	mov	r5, r0
 800a188:	b948      	cbnz	r0, 800a19e <__lshift+0x3e>
 800a18a:	4602      	mov	r2, r0
 800a18c:	4b2a      	ldr	r3, [pc, #168]	; (800a238 <__lshift+0xd8>)
 800a18e:	482b      	ldr	r0, [pc, #172]	; (800a23c <__lshift+0xdc>)
 800a190:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a194:	f000 fbe2 	bl	800a95c <__assert_func>
 800a198:	3101      	adds	r1, #1
 800a19a:	005b      	lsls	r3, r3, #1
 800a19c:	e7ee      	b.n	800a17c <__lshift+0x1c>
 800a19e:	2300      	movs	r3, #0
 800a1a0:	f100 0114 	add.w	r1, r0, #20
 800a1a4:	f100 0210 	add.w	r2, r0, #16
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	4553      	cmp	r3, sl
 800a1ac:	db37      	blt.n	800a21e <__lshift+0xbe>
 800a1ae:	6920      	ldr	r0, [r4, #16]
 800a1b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a1b4:	f104 0314 	add.w	r3, r4, #20
 800a1b8:	f019 091f 	ands.w	r9, r9, #31
 800a1bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a1c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a1c4:	d02f      	beq.n	800a226 <__lshift+0xc6>
 800a1c6:	f1c9 0e20 	rsb	lr, r9, #32
 800a1ca:	468a      	mov	sl, r1
 800a1cc:	f04f 0c00 	mov.w	ip, #0
 800a1d0:	681a      	ldr	r2, [r3, #0]
 800a1d2:	fa02 f209 	lsl.w	r2, r2, r9
 800a1d6:	ea42 020c 	orr.w	r2, r2, ip
 800a1da:	f84a 2b04 	str.w	r2, [sl], #4
 800a1de:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1e2:	4298      	cmp	r0, r3
 800a1e4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a1e8:	d8f2      	bhi.n	800a1d0 <__lshift+0x70>
 800a1ea:	1b03      	subs	r3, r0, r4
 800a1ec:	3b15      	subs	r3, #21
 800a1ee:	f023 0303 	bic.w	r3, r3, #3
 800a1f2:	3304      	adds	r3, #4
 800a1f4:	f104 0215 	add.w	r2, r4, #21
 800a1f8:	4290      	cmp	r0, r2
 800a1fa:	bf38      	it	cc
 800a1fc:	2304      	movcc	r3, #4
 800a1fe:	f841 c003 	str.w	ip, [r1, r3]
 800a202:	f1bc 0f00 	cmp.w	ip, #0
 800a206:	d001      	beq.n	800a20c <__lshift+0xac>
 800a208:	f108 0602 	add.w	r6, r8, #2
 800a20c:	3e01      	subs	r6, #1
 800a20e:	4638      	mov	r0, r7
 800a210:	612e      	str	r6, [r5, #16]
 800a212:	4621      	mov	r1, r4
 800a214:	f7ff fd88 	bl	8009d28 <_Bfree>
 800a218:	4628      	mov	r0, r5
 800a21a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a21e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a222:	3301      	adds	r3, #1
 800a224:	e7c1      	b.n	800a1aa <__lshift+0x4a>
 800a226:	3904      	subs	r1, #4
 800a228:	f853 2b04 	ldr.w	r2, [r3], #4
 800a22c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a230:	4298      	cmp	r0, r3
 800a232:	d8f9      	bhi.n	800a228 <__lshift+0xc8>
 800a234:	e7ea      	b.n	800a20c <__lshift+0xac>
 800a236:	bf00      	nop
 800a238:	0800b450 	.word	0x0800b450
 800a23c:	0800b4dc 	.word	0x0800b4dc

0800a240 <__mcmp>:
 800a240:	b530      	push	{r4, r5, lr}
 800a242:	6902      	ldr	r2, [r0, #16]
 800a244:	690c      	ldr	r4, [r1, #16]
 800a246:	1b12      	subs	r2, r2, r4
 800a248:	d10e      	bne.n	800a268 <__mcmp+0x28>
 800a24a:	f100 0314 	add.w	r3, r0, #20
 800a24e:	3114      	adds	r1, #20
 800a250:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a254:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a258:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a25c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a260:	42a5      	cmp	r5, r4
 800a262:	d003      	beq.n	800a26c <__mcmp+0x2c>
 800a264:	d305      	bcc.n	800a272 <__mcmp+0x32>
 800a266:	2201      	movs	r2, #1
 800a268:	4610      	mov	r0, r2
 800a26a:	bd30      	pop	{r4, r5, pc}
 800a26c:	4283      	cmp	r3, r0
 800a26e:	d3f3      	bcc.n	800a258 <__mcmp+0x18>
 800a270:	e7fa      	b.n	800a268 <__mcmp+0x28>
 800a272:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a276:	e7f7      	b.n	800a268 <__mcmp+0x28>

0800a278 <__mdiff>:
 800a278:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a27c:	460c      	mov	r4, r1
 800a27e:	4606      	mov	r6, r0
 800a280:	4611      	mov	r1, r2
 800a282:	4620      	mov	r0, r4
 800a284:	4690      	mov	r8, r2
 800a286:	f7ff ffdb 	bl	800a240 <__mcmp>
 800a28a:	1e05      	subs	r5, r0, #0
 800a28c:	d110      	bne.n	800a2b0 <__mdiff+0x38>
 800a28e:	4629      	mov	r1, r5
 800a290:	4630      	mov	r0, r6
 800a292:	f7ff fd09 	bl	8009ca8 <_Balloc>
 800a296:	b930      	cbnz	r0, 800a2a6 <__mdiff+0x2e>
 800a298:	4b3a      	ldr	r3, [pc, #232]	; (800a384 <__mdiff+0x10c>)
 800a29a:	4602      	mov	r2, r0
 800a29c:	f240 2132 	movw	r1, #562	; 0x232
 800a2a0:	4839      	ldr	r0, [pc, #228]	; (800a388 <__mdiff+0x110>)
 800a2a2:	f000 fb5b 	bl	800a95c <__assert_func>
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a2ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b0:	bfa4      	itt	ge
 800a2b2:	4643      	movge	r3, r8
 800a2b4:	46a0      	movge	r8, r4
 800a2b6:	4630      	mov	r0, r6
 800a2b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a2bc:	bfa6      	itte	ge
 800a2be:	461c      	movge	r4, r3
 800a2c0:	2500      	movge	r5, #0
 800a2c2:	2501      	movlt	r5, #1
 800a2c4:	f7ff fcf0 	bl	8009ca8 <_Balloc>
 800a2c8:	b920      	cbnz	r0, 800a2d4 <__mdiff+0x5c>
 800a2ca:	4b2e      	ldr	r3, [pc, #184]	; (800a384 <__mdiff+0x10c>)
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a2d2:	e7e5      	b.n	800a2a0 <__mdiff+0x28>
 800a2d4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a2d8:	6926      	ldr	r6, [r4, #16]
 800a2da:	60c5      	str	r5, [r0, #12]
 800a2dc:	f104 0914 	add.w	r9, r4, #20
 800a2e0:	f108 0514 	add.w	r5, r8, #20
 800a2e4:	f100 0e14 	add.w	lr, r0, #20
 800a2e8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a2ec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a2f0:	f108 0210 	add.w	r2, r8, #16
 800a2f4:	46f2      	mov	sl, lr
 800a2f6:	2100      	movs	r1, #0
 800a2f8:	f859 3b04 	ldr.w	r3, [r9], #4
 800a2fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a300:	fa1f f883 	uxth.w	r8, r3
 800a304:	fa11 f18b 	uxtah	r1, r1, fp
 800a308:	0c1b      	lsrs	r3, r3, #16
 800a30a:	eba1 0808 	sub.w	r8, r1, r8
 800a30e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a312:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a316:	fa1f f888 	uxth.w	r8, r8
 800a31a:	1419      	asrs	r1, r3, #16
 800a31c:	454e      	cmp	r6, r9
 800a31e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a322:	f84a 3b04 	str.w	r3, [sl], #4
 800a326:	d8e7      	bhi.n	800a2f8 <__mdiff+0x80>
 800a328:	1b33      	subs	r3, r6, r4
 800a32a:	3b15      	subs	r3, #21
 800a32c:	f023 0303 	bic.w	r3, r3, #3
 800a330:	3304      	adds	r3, #4
 800a332:	3415      	adds	r4, #21
 800a334:	42a6      	cmp	r6, r4
 800a336:	bf38      	it	cc
 800a338:	2304      	movcc	r3, #4
 800a33a:	441d      	add	r5, r3
 800a33c:	4473      	add	r3, lr
 800a33e:	469e      	mov	lr, r3
 800a340:	462e      	mov	r6, r5
 800a342:	4566      	cmp	r6, ip
 800a344:	d30e      	bcc.n	800a364 <__mdiff+0xec>
 800a346:	f10c 0203 	add.w	r2, ip, #3
 800a34a:	1b52      	subs	r2, r2, r5
 800a34c:	f022 0203 	bic.w	r2, r2, #3
 800a350:	3d03      	subs	r5, #3
 800a352:	45ac      	cmp	ip, r5
 800a354:	bf38      	it	cc
 800a356:	2200      	movcc	r2, #0
 800a358:	441a      	add	r2, r3
 800a35a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a35e:	b17b      	cbz	r3, 800a380 <__mdiff+0x108>
 800a360:	6107      	str	r7, [r0, #16]
 800a362:	e7a3      	b.n	800a2ac <__mdiff+0x34>
 800a364:	f856 8b04 	ldr.w	r8, [r6], #4
 800a368:	fa11 f288 	uxtah	r2, r1, r8
 800a36c:	1414      	asrs	r4, r2, #16
 800a36e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a372:	b292      	uxth	r2, r2
 800a374:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a378:	f84e 2b04 	str.w	r2, [lr], #4
 800a37c:	1421      	asrs	r1, r4, #16
 800a37e:	e7e0      	b.n	800a342 <__mdiff+0xca>
 800a380:	3f01      	subs	r7, #1
 800a382:	e7ea      	b.n	800a35a <__mdiff+0xe2>
 800a384:	0800b450 	.word	0x0800b450
 800a388:	0800b4dc 	.word	0x0800b4dc

0800a38c <__ulp>:
 800a38c:	b082      	sub	sp, #8
 800a38e:	ed8d 0b00 	vstr	d0, [sp]
 800a392:	9b01      	ldr	r3, [sp, #4]
 800a394:	4912      	ldr	r1, [pc, #72]	; (800a3e0 <__ulp+0x54>)
 800a396:	4019      	ands	r1, r3
 800a398:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a39c:	2900      	cmp	r1, #0
 800a39e:	dd05      	ble.n	800a3ac <__ulp+0x20>
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	460b      	mov	r3, r1
 800a3a4:	ec43 2b10 	vmov	d0, r2, r3
 800a3a8:	b002      	add	sp, #8
 800a3aa:	4770      	bx	lr
 800a3ac:	4249      	negs	r1, r1
 800a3ae:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a3b2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a3b6:	f04f 0200 	mov.w	r2, #0
 800a3ba:	f04f 0300 	mov.w	r3, #0
 800a3be:	da04      	bge.n	800a3ca <__ulp+0x3e>
 800a3c0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a3c4:	fa41 f300 	asr.w	r3, r1, r0
 800a3c8:	e7ec      	b.n	800a3a4 <__ulp+0x18>
 800a3ca:	f1a0 0114 	sub.w	r1, r0, #20
 800a3ce:	291e      	cmp	r1, #30
 800a3d0:	bfda      	itte	le
 800a3d2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a3d6:	fa20 f101 	lsrle.w	r1, r0, r1
 800a3da:	2101      	movgt	r1, #1
 800a3dc:	460a      	mov	r2, r1
 800a3de:	e7e1      	b.n	800a3a4 <__ulp+0x18>
 800a3e0:	7ff00000 	.word	0x7ff00000

0800a3e4 <__b2d>:
 800a3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3e6:	6905      	ldr	r5, [r0, #16]
 800a3e8:	f100 0714 	add.w	r7, r0, #20
 800a3ec:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a3f0:	1f2e      	subs	r6, r5, #4
 800a3f2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	f7ff fd48 	bl	8009e8c <__hi0bits>
 800a3fc:	f1c0 0320 	rsb	r3, r0, #32
 800a400:	280a      	cmp	r0, #10
 800a402:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a480 <__b2d+0x9c>
 800a406:	600b      	str	r3, [r1, #0]
 800a408:	dc14      	bgt.n	800a434 <__b2d+0x50>
 800a40a:	f1c0 0e0b 	rsb	lr, r0, #11
 800a40e:	fa24 f10e 	lsr.w	r1, r4, lr
 800a412:	42b7      	cmp	r7, r6
 800a414:	ea41 030c 	orr.w	r3, r1, ip
 800a418:	bf34      	ite	cc
 800a41a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a41e:	2100      	movcs	r1, #0
 800a420:	3015      	adds	r0, #21
 800a422:	fa04 f000 	lsl.w	r0, r4, r0
 800a426:	fa21 f10e 	lsr.w	r1, r1, lr
 800a42a:	ea40 0201 	orr.w	r2, r0, r1
 800a42e:	ec43 2b10 	vmov	d0, r2, r3
 800a432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a434:	42b7      	cmp	r7, r6
 800a436:	bf3a      	itte	cc
 800a438:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a43c:	f1a5 0608 	subcc.w	r6, r5, #8
 800a440:	2100      	movcs	r1, #0
 800a442:	380b      	subs	r0, #11
 800a444:	d017      	beq.n	800a476 <__b2d+0x92>
 800a446:	f1c0 0c20 	rsb	ip, r0, #32
 800a44a:	fa04 f500 	lsl.w	r5, r4, r0
 800a44e:	42be      	cmp	r6, r7
 800a450:	fa21 f40c 	lsr.w	r4, r1, ip
 800a454:	ea45 0504 	orr.w	r5, r5, r4
 800a458:	bf8c      	ite	hi
 800a45a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a45e:	2400      	movls	r4, #0
 800a460:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a464:	fa01 f000 	lsl.w	r0, r1, r0
 800a468:	fa24 f40c 	lsr.w	r4, r4, ip
 800a46c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a470:	ea40 0204 	orr.w	r2, r0, r4
 800a474:	e7db      	b.n	800a42e <__b2d+0x4a>
 800a476:	ea44 030c 	orr.w	r3, r4, ip
 800a47a:	460a      	mov	r2, r1
 800a47c:	e7d7      	b.n	800a42e <__b2d+0x4a>
 800a47e:	bf00      	nop
 800a480:	3ff00000 	.word	0x3ff00000

0800a484 <__d2b>:
 800a484:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a488:	4689      	mov	r9, r1
 800a48a:	2101      	movs	r1, #1
 800a48c:	ec57 6b10 	vmov	r6, r7, d0
 800a490:	4690      	mov	r8, r2
 800a492:	f7ff fc09 	bl	8009ca8 <_Balloc>
 800a496:	4604      	mov	r4, r0
 800a498:	b930      	cbnz	r0, 800a4a8 <__d2b+0x24>
 800a49a:	4602      	mov	r2, r0
 800a49c:	4b25      	ldr	r3, [pc, #148]	; (800a534 <__d2b+0xb0>)
 800a49e:	4826      	ldr	r0, [pc, #152]	; (800a538 <__d2b+0xb4>)
 800a4a0:	f240 310a 	movw	r1, #778	; 0x30a
 800a4a4:	f000 fa5a 	bl	800a95c <__assert_func>
 800a4a8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a4ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a4b0:	bb35      	cbnz	r5, 800a500 <__d2b+0x7c>
 800a4b2:	2e00      	cmp	r6, #0
 800a4b4:	9301      	str	r3, [sp, #4]
 800a4b6:	d028      	beq.n	800a50a <__d2b+0x86>
 800a4b8:	4668      	mov	r0, sp
 800a4ba:	9600      	str	r6, [sp, #0]
 800a4bc:	f7ff fd06 	bl	8009ecc <__lo0bits>
 800a4c0:	9900      	ldr	r1, [sp, #0]
 800a4c2:	b300      	cbz	r0, 800a506 <__d2b+0x82>
 800a4c4:	9a01      	ldr	r2, [sp, #4]
 800a4c6:	f1c0 0320 	rsb	r3, r0, #32
 800a4ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a4ce:	430b      	orrs	r3, r1
 800a4d0:	40c2      	lsrs	r2, r0
 800a4d2:	6163      	str	r3, [r4, #20]
 800a4d4:	9201      	str	r2, [sp, #4]
 800a4d6:	9b01      	ldr	r3, [sp, #4]
 800a4d8:	61a3      	str	r3, [r4, #24]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	bf14      	ite	ne
 800a4de:	2202      	movne	r2, #2
 800a4e0:	2201      	moveq	r2, #1
 800a4e2:	6122      	str	r2, [r4, #16]
 800a4e4:	b1d5      	cbz	r5, 800a51c <__d2b+0x98>
 800a4e6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a4ea:	4405      	add	r5, r0
 800a4ec:	f8c9 5000 	str.w	r5, [r9]
 800a4f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a4f4:	f8c8 0000 	str.w	r0, [r8]
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	b003      	add	sp, #12
 800a4fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a504:	e7d5      	b.n	800a4b2 <__d2b+0x2e>
 800a506:	6161      	str	r1, [r4, #20]
 800a508:	e7e5      	b.n	800a4d6 <__d2b+0x52>
 800a50a:	a801      	add	r0, sp, #4
 800a50c:	f7ff fcde 	bl	8009ecc <__lo0bits>
 800a510:	9b01      	ldr	r3, [sp, #4]
 800a512:	6163      	str	r3, [r4, #20]
 800a514:	2201      	movs	r2, #1
 800a516:	6122      	str	r2, [r4, #16]
 800a518:	3020      	adds	r0, #32
 800a51a:	e7e3      	b.n	800a4e4 <__d2b+0x60>
 800a51c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a520:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a524:	f8c9 0000 	str.w	r0, [r9]
 800a528:	6918      	ldr	r0, [r3, #16]
 800a52a:	f7ff fcaf 	bl	8009e8c <__hi0bits>
 800a52e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a532:	e7df      	b.n	800a4f4 <__d2b+0x70>
 800a534:	0800b450 	.word	0x0800b450
 800a538:	0800b4dc 	.word	0x0800b4dc

0800a53c <__ratio>:
 800a53c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a540:	4688      	mov	r8, r1
 800a542:	4669      	mov	r1, sp
 800a544:	4681      	mov	r9, r0
 800a546:	f7ff ff4d 	bl	800a3e4 <__b2d>
 800a54a:	a901      	add	r1, sp, #4
 800a54c:	4640      	mov	r0, r8
 800a54e:	ec55 4b10 	vmov	r4, r5, d0
 800a552:	f7ff ff47 	bl	800a3e4 <__b2d>
 800a556:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a55a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a55e:	eba3 0c02 	sub.w	ip, r3, r2
 800a562:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a566:	1a9b      	subs	r3, r3, r2
 800a568:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a56c:	ec51 0b10 	vmov	r0, r1, d0
 800a570:	2b00      	cmp	r3, #0
 800a572:	bfd6      	itet	le
 800a574:	460a      	movle	r2, r1
 800a576:	462a      	movgt	r2, r5
 800a578:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a57c:	468b      	mov	fp, r1
 800a57e:	462f      	mov	r7, r5
 800a580:	bfd4      	ite	le
 800a582:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a586:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a58a:	4620      	mov	r0, r4
 800a58c:	ee10 2a10 	vmov	r2, s0
 800a590:	465b      	mov	r3, fp
 800a592:	4639      	mov	r1, r7
 800a594:	f7f6 f95a 	bl	800084c <__aeabi_ddiv>
 800a598:	ec41 0b10 	vmov	d0, r0, r1
 800a59c:	b003      	add	sp, #12
 800a59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a5a2 <__copybits>:
 800a5a2:	3901      	subs	r1, #1
 800a5a4:	b570      	push	{r4, r5, r6, lr}
 800a5a6:	1149      	asrs	r1, r1, #5
 800a5a8:	6914      	ldr	r4, [r2, #16]
 800a5aa:	3101      	adds	r1, #1
 800a5ac:	f102 0314 	add.w	r3, r2, #20
 800a5b0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a5b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a5b8:	1f05      	subs	r5, r0, #4
 800a5ba:	42a3      	cmp	r3, r4
 800a5bc:	d30c      	bcc.n	800a5d8 <__copybits+0x36>
 800a5be:	1aa3      	subs	r3, r4, r2
 800a5c0:	3b11      	subs	r3, #17
 800a5c2:	f023 0303 	bic.w	r3, r3, #3
 800a5c6:	3211      	adds	r2, #17
 800a5c8:	42a2      	cmp	r2, r4
 800a5ca:	bf88      	it	hi
 800a5cc:	2300      	movhi	r3, #0
 800a5ce:	4418      	add	r0, r3
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	4288      	cmp	r0, r1
 800a5d4:	d305      	bcc.n	800a5e2 <__copybits+0x40>
 800a5d6:	bd70      	pop	{r4, r5, r6, pc}
 800a5d8:	f853 6b04 	ldr.w	r6, [r3], #4
 800a5dc:	f845 6f04 	str.w	r6, [r5, #4]!
 800a5e0:	e7eb      	b.n	800a5ba <__copybits+0x18>
 800a5e2:	f840 3b04 	str.w	r3, [r0], #4
 800a5e6:	e7f4      	b.n	800a5d2 <__copybits+0x30>

0800a5e8 <__any_on>:
 800a5e8:	f100 0214 	add.w	r2, r0, #20
 800a5ec:	6900      	ldr	r0, [r0, #16]
 800a5ee:	114b      	asrs	r3, r1, #5
 800a5f0:	4298      	cmp	r0, r3
 800a5f2:	b510      	push	{r4, lr}
 800a5f4:	db11      	blt.n	800a61a <__any_on+0x32>
 800a5f6:	dd0a      	ble.n	800a60e <__any_on+0x26>
 800a5f8:	f011 011f 	ands.w	r1, r1, #31
 800a5fc:	d007      	beq.n	800a60e <__any_on+0x26>
 800a5fe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a602:	fa24 f001 	lsr.w	r0, r4, r1
 800a606:	fa00 f101 	lsl.w	r1, r0, r1
 800a60a:	428c      	cmp	r4, r1
 800a60c:	d10b      	bne.n	800a626 <__any_on+0x3e>
 800a60e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a612:	4293      	cmp	r3, r2
 800a614:	d803      	bhi.n	800a61e <__any_on+0x36>
 800a616:	2000      	movs	r0, #0
 800a618:	bd10      	pop	{r4, pc}
 800a61a:	4603      	mov	r3, r0
 800a61c:	e7f7      	b.n	800a60e <__any_on+0x26>
 800a61e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a622:	2900      	cmp	r1, #0
 800a624:	d0f5      	beq.n	800a612 <__any_on+0x2a>
 800a626:	2001      	movs	r0, #1
 800a628:	e7f6      	b.n	800a618 <__any_on+0x30>

0800a62a <_calloc_r>:
 800a62a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a62c:	fba1 2402 	umull	r2, r4, r1, r2
 800a630:	b94c      	cbnz	r4, 800a646 <_calloc_r+0x1c>
 800a632:	4611      	mov	r1, r2
 800a634:	9201      	str	r2, [sp, #4]
 800a636:	f7fc f99f 	bl	8006978 <_malloc_r>
 800a63a:	9a01      	ldr	r2, [sp, #4]
 800a63c:	4605      	mov	r5, r0
 800a63e:	b930      	cbnz	r0, 800a64e <_calloc_r+0x24>
 800a640:	4628      	mov	r0, r5
 800a642:	b003      	add	sp, #12
 800a644:	bd30      	pop	{r4, r5, pc}
 800a646:	220c      	movs	r2, #12
 800a648:	6002      	str	r2, [r0, #0]
 800a64a:	2500      	movs	r5, #0
 800a64c:	e7f8      	b.n	800a640 <_calloc_r+0x16>
 800a64e:	4621      	mov	r1, r4
 800a650:	f7fc f91e 	bl	8006890 <memset>
 800a654:	e7f4      	b.n	800a640 <_calloc_r+0x16>

0800a656 <__ssputs_r>:
 800a656:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a65a:	688e      	ldr	r6, [r1, #8]
 800a65c:	429e      	cmp	r6, r3
 800a65e:	4682      	mov	sl, r0
 800a660:	460c      	mov	r4, r1
 800a662:	4690      	mov	r8, r2
 800a664:	461f      	mov	r7, r3
 800a666:	d838      	bhi.n	800a6da <__ssputs_r+0x84>
 800a668:	898a      	ldrh	r2, [r1, #12]
 800a66a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a66e:	d032      	beq.n	800a6d6 <__ssputs_r+0x80>
 800a670:	6825      	ldr	r5, [r4, #0]
 800a672:	6909      	ldr	r1, [r1, #16]
 800a674:	eba5 0901 	sub.w	r9, r5, r1
 800a678:	6965      	ldr	r5, [r4, #20]
 800a67a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a67e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a682:	3301      	adds	r3, #1
 800a684:	444b      	add	r3, r9
 800a686:	106d      	asrs	r5, r5, #1
 800a688:	429d      	cmp	r5, r3
 800a68a:	bf38      	it	cc
 800a68c:	461d      	movcc	r5, r3
 800a68e:	0553      	lsls	r3, r2, #21
 800a690:	d531      	bpl.n	800a6f6 <__ssputs_r+0xa0>
 800a692:	4629      	mov	r1, r5
 800a694:	f7fc f970 	bl	8006978 <_malloc_r>
 800a698:	4606      	mov	r6, r0
 800a69a:	b950      	cbnz	r0, 800a6b2 <__ssputs_r+0x5c>
 800a69c:	230c      	movs	r3, #12
 800a69e:	f8ca 3000 	str.w	r3, [sl]
 800a6a2:	89a3      	ldrh	r3, [r4, #12]
 800a6a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6a8:	81a3      	strh	r3, [r4, #12]
 800a6aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6b2:	6921      	ldr	r1, [r4, #16]
 800a6b4:	464a      	mov	r2, r9
 800a6b6:	f7fc f8dd 	bl	8006874 <memcpy>
 800a6ba:	89a3      	ldrh	r3, [r4, #12]
 800a6bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a6c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6c4:	81a3      	strh	r3, [r4, #12]
 800a6c6:	6126      	str	r6, [r4, #16]
 800a6c8:	6165      	str	r5, [r4, #20]
 800a6ca:	444e      	add	r6, r9
 800a6cc:	eba5 0509 	sub.w	r5, r5, r9
 800a6d0:	6026      	str	r6, [r4, #0]
 800a6d2:	60a5      	str	r5, [r4, #8]
 800a6d4:	463e      	mov	r6, r7
 800a6d6:	42be      	cmp	r6, r7
 800a6d8:	d900      	bls.n	800a6dc <__ssputs_r+0x86>
 800a6da:	463e      	mov	r6, r7
 800a6dc:	6820      	ldr	r0, [r4, #0]
 800a6de:	4632      	mov	r2, r6
 800a6e0:	4641      	mov	r1, r8
 800a6e2:	f000 f96b 	bl	800a9bc <memmove>
 800a6e6:	68a3      	ldr	r3, [r4, #8]
 800a6e8:	1b9b      	subs	r3, r3, r6
 800a6ea:	60a3      	str	r3, [r4, #8]
 800a6ec:	6823      	ldr	r3, [r4, #0]
 800a6ee:	4433      	add	r3, r6
 800a6f0:	6023      	str	r3, [r4, #0]
 800a6f2:	2000      	movs	r0, #0
 800a6f4:	e7db      	b.n	800a6ae <__ssputs_r+0x58>
 800a6f6:	462a      	mov	r2, r5
 800a6f8:	f000 f97a 	bl	800a9f0 <_realloc_r>
 800a6fc:	4606      	mov	r6, r0
 800a6fe:	2800      	cmp	r0, #0
 800a700:	d1e1      	bne.n	800a6c6 <__ssputs_r+0x70>
 800a702:	6921      	ldr	r1, [r4, #16]
 800a704:	4650      	mov	r0, sl
 800a706:	f7fc f8cb 	bl	80068a0 <_free_r>
 800a70a:	e7c7      	b.n	800a69c <__ssputs_r+0x46>

0800a70c <_svfiprintf_r>:
 800a70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a710:	4698      	mov	r8, r3
 800a712:	898b      	ldrh	r3, [r1, #12]
 800a714:	061b      	lsls	r3, r3, #24
 800a716:	b09d      	sub	sp, #116	; 0x74
 800a718:	4607      	mov	r7, r0
 800a71a:	460d      	mov	r5, r1
 800a71c:	4614      	mov	r4, r2
 800a71e:	d50e      	bpl.n	800a73e <_svfiprintf_r+0x32>
 800a720:	690b      	ldr	r3, [r1, #16]
 800a722:	b963      	cbnz	r3, 800a73e <_svfiprintf_r+0x32>
 800a724:	2140      	movs	r1, #64	; 0x40
 800a726:	f7fc f927 	bl	8006978 <_malloc_r>
 800a72a:	6028      	str	r0, [r5, #0]
 800a72c:	6128      	str	r0, [r5, #16]
 800a72e:	b920      	cbnz	r0, 800a73a <_svfiprintf_r+0x2e>
 800a730:	230c      	movs	r3, #12
 800a732:	603b      	str	r3, [r7, #0]
 800a734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a738:	e0d1      	b.n	800a8de <_svfiprintf_r+0x1d2>
 800a73a:	2340      	movs	r3, #64	; 0x40
 800a73c:	616b      	str	r3, [r5, #20]
 800a73e:	2300      	movs	r3, #0
 800a740:	9309      	str	r3, [sp, #36]	; 0x24
 800a742:	2320      	movs	r3, #32
 800a744:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a748:	f8cd 800c 	str.w	r8, [sp, #12]
 800a74c:	2330      	movs	r3, #48	; 0x30
 800a74e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a8f8 <_svfiprintf_r+0x1ec>
 800a752:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a756:	f04f 0901 	mov.w	r9, #1
 800a75a:	4623      	mov	r3, r4
 800a75c:	469a      	mov	sl, r3
 800a75e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a762:	b10a      	cbz	r2, 800a768 <_svfiprintf_r+0x5c>
 800a764:	2a25      	cmp	r2, #37	; 0x25
 800a766:	d1f9      	bne.n	800a75c <_svfiprintf_r+0x50>
 800a768:	ebba 0b04 	subs.w	fp, sl, r4
 800a76c:	d00b      	beq.n	800a786 <_svfiprintf_r+0x7a>
 800a76e:	465b      	mov	r3, fp
 800a770:	4622      	mov	r2, r4
 800a772:	4629      	mov	r1, r5
 800a774:	4638      	mov	r0, r7
 800a776:	f7ff ff6e 	bl	800a656 <__ssputs_r>
 800a77a:	3001      	adds	r0, #1
 800a77c:	f000 80aa 	beq.w	800a8d4 <_svfiprintf_r+0x1c8>
 800a780:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a782:	445a      	add	r2, fp
 800a784:	9209      	str	r2, [sp, #36]	; 0x24
 800a786:	f89a 3000 	ldrb.w	r3, [sl]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	f000 80a2 	beq.w	800a8d4 <_svfiprintf_r+0x1c8>
 800a790:	2300      	movs	r3, #0
 800a792:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a796:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a79a:	f10a 0a01 	add.w	sl, sl, #1
 800a79e:	9304      	str	r3, [sp, #16]
 800a7a0:	9307      	str	r3, [sp, #28]
 800a7a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7a6:	931a      	str	r3, [sp, #104]	; 0x68
 800a7a8:	4654      	mov	r4, sl
 800a7aa:	2205      	movs	r2, #5
 800a7ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7b0:	4851      	ldr	r0, [pc, #324]	; (800a8f8 <_svfiprintf_r+0x1ec>)
 800a7b2:	f7f5 fd15 	bl	80001e0 <memchr>
 800a7b6:	9a04      	ldr	r2, [sp, #16]
 800a7b8:	b9d8      	cbnz	r0, 800a7f2 <_svfiprintf_r+0xe6>
 800a7ba:	06d0      	lsls	r0, r2, #27
 800a7bc:	bf44      	itt	mi
 800a7be:	2320      	movmi	r3, #32
 800a7c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7c4:	0711      	lsls	r1, r2, #28
 800a7c6:	bf44      	itt	mi
 800a7c8:	232b      	movmi	r3, #43	; 0x2b
 800a7ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7ce:	f89a 3000 	ldrb.w	r3, [sl]
 800a7d2:	2b2a      	cmp	r3, #42	; 0x2a
 800a7d4:	d015      	beq.n	800a802 <_svfiprintf_r+0xf6>
 800a7d6:	9a07      	ldr	r2, [sp, #28]
 800a7d8:	4654      	mov	r4, sl
 800a7da:	2000      	movs	r0, #0
 800a7dc:	f04f 0c0a 	mov.w	ip, #10
 800a7e0:	4621      	mov	r1, r4
 800a7e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7e6:	3b30      	subs	r3, #48	; 0x30
 800a7e8:	2b09      	cmp	r3, #9
 800a7ea:	d94e      	bls.n	800a88a <_svfiprintf_r+0x17e>
 800a7ec:	b1b0      	cbz	r0, 800a81c <_svfiprintf_r+0x110>
 800a7ee:	9207      	str	r2, [sp, #28]
 800a7f0:	e014      	b.n	800a81c <_svfiprintf_r+0x110>
 800a7f2:	eba0 0308 	sub.w	r3, r0, r8
 800a7f6:	fa09 f303 	lsl.w	r3, r9, r3
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	9304      	str	r3, [sp, #16]
 800a7fe:	46a2      	mov	sl, r4
 800a800:	e7d2      	b.n	800a7a8 <_svfiprintf_r+0x9c>
 800a802:	9b03      	ldr	r3, [sp, #12]
 800a804:	1d19      	adds	r1, r3, #4
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	9103      	str	r1, [sp, #12]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	bfbb      	ittet	lt
 800a80e:	425b      	neglt	r3, r3
 800a810:	f042 0202 	orrlt.w	r2, r2, #2
 800a814:	9307      	strge	r3, [sp, #28]
 800a816:	9307      	strlt	r3, [sp, #28]
 800a818:	bfb8      	it	lt
 800a81a:	9204      	strlt	r2, [sp, #16]
 800a81c:	7823      	ldrb	r3, [r4, #0]
 800a81e:	2b2e      	cmp	r3, #46	; 0x2e
 800a820:	d10c      	bne.n	800a83c <_svfiprintf_r+0x130>
 800a822:	7863      	ldrb	r3, [r4, #1]
 800a824:	2b2a      	cmp	r3, #42	; 0x2a
 800a826:	d135      	bne.n	800a894 <_svfiprintf_r+0x188>
 800a828:	9b03      	ldr	r3, [sp, #12]
 800a82a:	1d1a      	adds	r2, r3, #4
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	9203      	str	r2, [sp, #12]
 800a830:	2b00      	cmp	r3, #0
 800a832:	bfb8      	it	lt
 800a834:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a838:	3402      	adds	r4, #2
 800a83a:	9305      	str	r3, [sp, #20]
 800a83c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a908 <_svfiprintf_r+0x1fc>
 800a840:	7821      	ldrb	r1, [r4, #0]
 800a842:	2203      	movs	r2, #3
 800a844:	4650      	mov	r0, sl
 800a846:	f7f5 fccb 	bl	80001e0 <memchr>
 800a84a:	b140      	cbz	r0, 800a85e <_svfiprintf_r+0x152>
 800a84c:	2340      	movs	r3, #64	; 0x40
 800a84e:	eba0 000a 	sub.w	r0, r0, sl
 800a852:	fa03 f000 	lsl.w	r0, r3, r0
 800a856:	9b04      	ldr	r3, [sp, #16]
 800a858:	4303      	orrs	r3, r0
 800a85a:	3401      	adds	r4, #1
 800a85c:	9304      	str	r3, [sp, #16]
 800a85e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a862:	4826      	ldr	r0, [pc, #152]	; (800a8fc <_svfiprintf_r+0x1f0>)
 800a864:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a868:	2206      	movs	r2, #6
 800a86a:	f7f5 fcb9 	bl	80001e0 <memchr>
 800a86e:	2800      	cmp	r0, #0
 800a870:	d038      	beq.n	800a8e4 <_svfiprintf_r+0x1d8>
 800a872:	4b23      	ldr	r3, [pc, #140]	; (800a900 <_svfiprintf_r+0x1f4>)
 800a874:	bb1b      	cbnz	r3, 800a8be <_svfiprintf_r+0x1b2>
 800a876:	9b03      	ldr	r3, [sp, #12]
 800a878:	3307      	adds	r3, #7
 800a87a:	f023 0307 	bic.w	r3, r3, #7
 800a87e:	3308      	adds	r3, #8
 800a880:	9303      	str	r3, [sp, #12]
 800a882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a884:	4433      	add	r3, r6
 800a886:	9309      	str	r3, [sp, #36]	; 0x24
 800a888:	e767      	b.n	800a75a <_svfiprintf_r+0x4e>
 800a88a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a88e:	460c      	mov	r4, r1
 800a890:	2001      	movs	r0, #1
 800a892:	e7a5      	b.n	800a7e0 <_svfiprintf_r+0xd4>
 800a894:	2300      	movs	r3, #0
 800a896:	3401      	adds	r4, #1
 800a898:	9305      	str	r3, [sp, #20]
 800a89a:	4619      	mov	r1, r3
 800a89c:	f04f 0c0a 	mov.w	ip, #10
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8a6:	3a30      	subs	r2, #48	; 0x30
 800a8a8:	2a09      	cmp	r2, #9
 800a8aa:	d903      	bls.n	800a8b4 <_svfiprintf_r+0x1a8>
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d0c5      	beq.n	800a83c <_svfiprintf_r+0x130>
 800a8b0:	9105      	str	r1, [sp, #20]
 800a8b2:	e7c3      	b.n	800a83c <_svfiprintf_r+0x130>
 800a8b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8b8:	4604      	mov	r4, r0
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	e7f0      	b.n	800a8a0 <_svfiprintf_r+0x194>
 800a8be:	ab03      	add	r3, sp, #12
 800a8c0:	9300      	str	r3, [sp, #0]
 800a8c2:	462a      	mov	r2, r5
 800a8c4:	4b0f      	ldr	r3, [pc, #60]	; (800a904 <_svfiprintf_r+0x1f8>)
 800a8c6:	a904      	add	r1, sp, #16
 800a8c8:	4638      	mov	r0, r7
 800a8ca:	f7fc f969 	bl	8006ba0 <_printf_float>
 800a8ce:	1c42      	adds	r2, r0, #1
 800a8d0:	4606      	mov	r6, r0
 800a8d2:	d1d6      	bne.n	800a882 <_svfiprintf_r+0x176>
 800a8d4:	89ab      	ldrh	r3, [r5, #12]
 800a8d6:	065b      	lsls	r3, r3, #25
 800a8d8:	f53f af2c 	bmi.w	800a734 <_svfiprintf_r+0x28>
 800a8dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8de:	b01d      	add	sp, #116	; 0x74
 800a8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8e4:	ab03      	add	r3, sp, #12
 800a8e6:	9300      	str	r3, [sp, #0]
 800a8e8:	462a      	mov	r2, r5
 800a8ea:	4b06      	ldr	r3, [pc, #24]	; (800a904 <_svfiprintf_r+0x1f8>)
 800a8ec:	a904      	add	r1, sp, #16
 800a8ee:	4638      	mov	r0, r7
 800a8f0:	f7fc fbfa 	bl	80070e8 <_printf_i>
 800a8f4:	e7eb      	b.n	800a8ce <_svfiprintf_r+0x1c2>
 800a8f6:	bf00      	nop
 800a8f8:	0800b634 	.word	0x0800b634
 800a8fc:	0800b63e 	.word	0x0800b63e
 800a900:	08006ba1 	.word	0x08006ba1
 800a904:	0800a657 	.word	0x0800a657
 800a908:	0800b63a 	.word	0x0800b63a

0800a90c <_read_r>:
 800a90c:	b538      	push	{r3, r4, r5, lr}
 800a90e:	4d07      	ldr	r5, [pc, #28]	; (800a92c <_read_r+0x20>)
 800a910:	4604      	mov	r4, r0
 800a912:	4608      	mov	r0, r1
 800a914:	4611      	mov	r1, r2
 800a916:	2200      	movs	r2, #0
 800a918:	602a      	str	r2, [r5, #0]
 800a91a:	461a      	mov	r2, r3
 800a91c:	f7f6 fe54 	bl	80015c8 <_read>
 800a920:	1c43      	adds	r3, r0, #1
 800a922:	d102      	bne.n	800a92a <_read_r+0x1e>
 800a924:	682b      	ldr	r3, [r5, #0]
 800a926:	b103      	cbz	r3, 800a92a <_read_r+0x1e>
 800a928:	6023      	str	r3, [r4, #0]
 800a92a:	bd38      	pop	{r3, r4, r5, pc}
 800a92c:	200047fc 	.word	0x200047fc

0800a930 <nan>:
 800a930:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a938 <nan+0x8>
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	00000000 	.word	0x00000000
 800a93c:	7ff80000 	.word	0x7ff80000

0800a940 <__ascii_wctomb>:
 800a940:	b149      	cbz	r1, 800a956 <__ascii_wctomb+0x16>
 800a942:	2aff      	cmp	r2, #255	; 0xff
 800a944:	bf85      	ittet	hi
 800a946:	238a      	movhi	r3, #138	; 0x8a
 800a948:	6003      	strhi	r3, [r0, #0]
 800a94a:	700a      	strbls	r2, [r1, #0]
 800a94c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a950:	bf98      	it	ls
 800a952:	2001      	movls	r0, #1
 800a954:	4770      	bx	lr
 800a956:	4608      	mov	r0, r1
 800a958:	4770      	bx	lr
	...

0800a95c <__assert_func>:
 800a95c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a95e:	4614      	mov	r4, r2
 800a960:	461a      	mov	r2, r3
 800a962:	4b09      	ldr	r3, [pc, #36]	; (800a988 <__assert_func+0x2c>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4605      	mov	r5, r0
 800a968:	68d8      	ldr	r0, [r3, #12]
 800a96a:	b14c      	cbz	r4, 800a980 <__assert_func+0x24>
 800a96c:	4b07      	ldr	r3, [pc, #28]	; (800a98c <__assert_func+0x30>)
 800a96e:	9100      	str	r1, [sp, #0]
 800a970:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a974:	4906      	ldr	r1, [pc, #24]	; (800a990 <__assert_func+0x34>)
 800a976:	462b      	mov	r3, r5
 800a978:	f000 f80e 	bl	800a998 <fiprintf>
 800a97c:	f000 fa80 	bl	800ae80 <abort>
 800a980:	4b04      	ldr	r3, [pc, #16]	; (800a994 <__assert_func+0x38>)
 800a982:	461c      	mov	r4, r3
 800a984:	e7f3      	b.n	800a96e <__assert_func+0x12>
 800a986:	bf00      	nop
 800a988:	20000010 	.word	0x20000010
 800a98c:	0800b645 	.word	0x0800b645
 800a990:	0800b652 	.word	0x0800b652
 800a994:	0800b680 	.word	0x0800b680

0800a998 <fiprintf>:
 800a998:	b40e      	push	{r1, r2, r3}
 800a99a:	b503      	push	{r0, r1, lr}
 800a99c:	4601      	mov	r1, r0
 800a99e:	ab03      	add	r3, sp, #12
 800a9a0:	4805      	ldr	r0, [pc, #20]	; (800a9b8 <fiprintf+0x20>)
 800a9a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9a6:	6800      	ldr	r0, [r0, #0]
 800a9a8:	9301      	str	r3, [sp, #4]
 800a9aa:	f000 f879 	bl	800aaa0 <_vfiprintf_r>
 800a9ae:	b002      	add	sp, #8
 800a9b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9b4:	b003      	add	sp, #12
 800a9b6:	4770      	bx	lr
 800a9b8:	20000010 	.word	0x20000010

0800a9bc <memmove>:
 800a9bc:	4288      	cmp	r0, r1
 800a9be:	b510      	push	{r4, lr}
 800a9c0:	eb01 0402 	add.w	r4, r1, r2
 800a9c4:	d902      	bls.n	800a9cc <memmove+0x10>
 800a9c6:	4284      	cmp	r4, r0
 800a9c8:	4623      	mov	r3, r4
 800a9ca:	d807      	bhi.n	800a9dc <memmove+0x20>
 800a9cc:	1e43      	subs	r3, r0, #1
 800a9ce:	42a1      	cmp	r1, r4
 800a9d0:	d008      	beq.n	800a9e4 <memmove+0x28>
 800a9d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a9da:	e7f8      	b.n	800a9ce <memmove+0x12>
 800a9dc:	4402      	add	r2, r0
 800a9de:	4601      	mov	r1, r0
 800a9e0:	428a      	cmp	r2, r1
 800a9e2:	d100      	bne.n	800a9e6 <memmove+0x2a>
 800a9e4:	bd10      	pop	{r4, pc}
 800a9e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a9ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a9ee:	e7f7      	b.n	800a9e0 <memmove+0x24>

0800a9f0 <_realloc_r>:
 800a9f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9f4:	4680      	mov	r8, r0
 800a9f6:	4614      	mov	r4, r2
 800a9f8:	460e      	mov	r6, r1
 800a9fa:	b921      	cbnz	r1, 800aa06 <_realloc_r+0x16>
 800a9fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa00:	4611      	mov	r1, r2
 800aa02:	f7fb bfb9 	b.w	8006978 <_malloc_r>
 800aa06:	b92a      	cbnz	r2, 800aa14 <_realloc_r+0x24>
 800aa08:	f7fb ff4a 	bl	80068a0 <_free_r>
 800aa0c:	4625      	mov	r5, r4
 800aa0e:	4628      	mov	r0, r5
 800aa10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa14:	f000 faa0 	bl	800af58 <_malloc_usable_size_r>
 800aa18:	4284      	cmp	r4, r0
 800aa1a:	4607      	mov	r7, r0
 800aa1c:	d802      	bhi.n	800aa24 <_realloc_r+0x34>
 800aa1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aa22:	d812      	bhi.n	800aa4a <_realloc_r+0x5a>
 800aa24:	4621      	mov	r1, r4
 800aa26:	4640      	mov	r0, r8
 800aa28:	f7fb ffa6 	bl	8006978 <_malloc_r>
 800aa2c:	4605      	mov	r5, r0
 800aa2e:	2800      	cmp	r0, #0
 800aa30:	d0ed      	beq.n	800aa0e <_realloc_r+0x1e>
 800aa32:	42bc      	cmp	r4, r7
 800aa34:	4622      	mov	r2, r4
 800aa36:	4631      	mov	r1, r6
 800aa38:	bf28      	it	cs
 800aa3a:	463a      	movcs	r2, r7
 800aa3c:	f7fb ff1a 	bl	8006874 <memcpy>
 800aa40:	4631      	mov	r1, r6
 800aa42:	4640      	mov	r0, r8
 800aa44:	f7fb ff2c 	bl	80068a0 <_free_r>
 800aa48:	e7e1      	b.n	800aa0e <_realloc_r+0x1e>
 800aa4a:	4635      	mov	r5, r6
 800aa4c:	e7df      	b.n	800aa0e <_realloc_r+0x1e>

0800aa4e <__sfputc_r>:
 800aa4e:	6893      	ldr	r3, [r2, #8]
 800aa50:	3b01      	subs	r3, #1
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	b410      	push	{r4}
 800aa56:	6093      	str	r3, [r2, #8]
 800aa58:	da08      	bge.n	800aa6c <__sfputc_r+0x1e>
 800aa5a:	6994      	ldr	r4, [r2, #24]
 800aa5c:	42a3      	cmp	r3, r4
 800aa5e:	db01      	blt.n	800aa64 <__sfputc_r+0x16>
 800aa60:	290a      	cmp	r1, #10
 800aa62:	d103      	bne.n	800aa6c <__sfputc_r+0x1e>
 800aa64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa68:	f000 b94a 	b.w	800ad00 <__swbuf_r>
 800aa6c:	6813      	ldr	r3, [r2, #0]
 800aa6e:	1c58      	adds	r0, r3, #1
 800aa70:	6010      	str	r0, [r2, #0]
 800aa72:	7019      	strb	r1, [r3, #0]
 800aa74:	4608      	mov	r0, r1
 800aa76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <__sfputs_r>:
 800aa7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa7e:	4606      	mov	r6, r0
 800aa80:	460f      	mov	r7, r1
 800aa82:	4614      	mov	r4, r2
 800aa84:	18d5      	adds	r5, r2, r3
 800aa86:	42ac      	cmp	r4, r5
 800aa88:	d101      	bne.n	800aa8e <__sfputs_r+0x12>
 800aa8a:	2000      	movs	r0, #0
 800aa8c:	e007      	b.n	800aa9e <__sfputs_r+0x22>
 800aa8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa92:	463a      	mov	r2, r7
 800aa94:	4630      	mov	r0, r6
 800aa96:	f7ff ffda 	bl	800aa4e <__sfputc_r>
 800aa9a:	1c43      	adds	r3, r0, #1
 800aa9c:	d1f3      	bne.n	800aa86 <__sfputs_r+0xa>
 800aa9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aaa0 <_vfiprintf_r>:
 800aaa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa4:	460d      	mov	r5, r1
 800aaa6:	b09d      	sub	sp, #116	; 0x74
 800aaa8:	4614      	mov	r4, r2
 800aaaa:	4698      	mov	r8, r3
 800aaac:	4606      	mov	r6, r0
 800aaae:	b118      	cbz	r0, 800aab8 <_vfiprintf_r+0x18>
 800aab0:	6983      	ldr	r3, [r0, #24]
 800aab2:	b90b      	cbnz	r3, 800aab8 <_vfiprintf_r+0x18>
 800aab4:	f7fb fe10 	bl	80066d8 <__sinit>
 800aab8:	4b89      	ldr	r3, [pc, #548]	; (800ace0 <_vfiprintf_r+0x240>)
 800aaba:	429d      	cmp	r5, r3
 800aabc:	d11b      	bne.n	800aaf6 <_vfiprintf_r+0x56>
 800aabe:	6875      	ldr	r5, [r6, #4]
 800aac0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aac2:	07d9      	lsls	r1, r3, #31
 800aac4:	d405      	bmi.n	800aad2 <_vfiprintf_r+0x32>
 800aac6:	89ab      	ldrh	r3, [r5, #12]
 800aac8:	059a      	lsls	r2, r3, #22
 800aaca:	d402      	bmi.n	800aad2 <_vfiprintf_r+0x32>
 800aacc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aace:	f7fb fec6 	bl	800685e <__retarget_lock_acquire_recursive>
 800aad2:	89ab      	ldrh	r3, [r5, #12]
 800aad4:	071b      	lsls	r3, r3, #28
 800aad6:	d501      	bpl.n	800aadc <_vfiprintf_r+0x3c>
 800aad8:	692b      	ldr	r3, [r5, #16]
 800aada:	b9eb      	cbnz	r3, 800ab18 <_vfiprintf_r+0x78>
 800aadc:	4629      	mov	r1, r5
 800aade:	4630      	mov	r0, r6
 800aae0:	f000 f960 	bl	800ada4 <__swsetup_r>
 800aae4:	b1c0      	cbz	r0, 800ab18 <_vfiprintf_r+0x78>
 800aae6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aae8:	07dc      	lsls	r4, r3, #31
 800aaea:	d50e      	bpl.n	800ab0a <_vfiprintf_r+0x6a>
 800aaec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aaf0:	b01d      	add	sp, #116	; 0x74
 800aaf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaf6:	4b7b      	ldr	r3, [pc, #492]	; (800ace4 <_vfiprintf_r+0x244>)
 800aaf8:	429d      	cmp	r5, r3
 800aafa:	d101      	bne.n	800ab00 <_vfiprintf_r+0x60>
 800aafc:	68b5      	ldr	r5, [r6, #8]
 800aafe:	e7df      	b.n	800aac0 <_vfiprintf_r+0x20>
 800ab00:	4b79      	ldr	r3, [pc, #484]	; (800ace8 <_vfiprintf_r+0x248>)
 800ab02:	429d      	cmp	r5, r3
 800ab04:	bf08      	it	eq
 800ab06:	68f5      	ldreq	r5, [r6, #12]
 800ab08:	e7da      	b.n	800aac0 <_vfiprintf_r+0x20>
 800ab0a:	89ab      	ldrh	r3, [r5, #12]
 800ab0c:	0598      	lsls	r0, r3, #22
 800ab0e:	d4ed      	bmi.n	800aaec <_vfiprintf_r+0x4c>
 800ab10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab12:	f7fb fea5 	bl	8006860 <__retarget_lock_release_recursive>
 800ab16:	e7e9      	b.n	800aaec <_vfiprintf_r+0x4c>
 800ab18:	2300      	movs	r3, #0
 800ab1a:	9309      	str	r3, [sp, #36]	; 0x24
 800ab1c:	2320      	movs	r3, #32
 800ab1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab22:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab26:	2330      	movs	r3, #48	; 0x30
 800ab28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800acec <_vfiprintf_r+0x24c>
 800ab2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab30:	f04f 0901 	mov.w	r9, #1
 800ab34:	4623      	mov	r3, r4
 800ab36:	469a      	mov	sl, r3
 800ab38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab3c:	b10a      	cbz	r2, 800ab42 <_vfiprintf_r+0xa2>
 800ab3e:	2a25      	cmp	r2, #37	; 0x25
 800ab40:	d1f9      	bne.n	800ab36 <_vfiprintf_r+0x96>
 800ab42:	ebba 0b04 	subs.w	fp, sl, r4
 800ab46:	d00b      	beq.n	800ab60 <_vfiprintf_r+0xc0>
 800ab48:	465b      	mov	r3, fp
 800ab4a:	4622      	mov	r2, r4
 800ab4c:	4629      	mov	r1, r5
 800ab4e:	4630      	mov	r0, r6
 800ab50:	f7ff ff94 	bl	800aa7c <__sfputs_r>
 800ab54:	3001      	adds	r0, #1
 800ab56:	f000 80aa 	beq.w	800acae <_vfiprintf_r+0x20e>
 800ab5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab5c:	445a      	add	r2, fp
 800ab5e:	9209      	str	r2, [sp, #36]	; 0x24
 800ab60:	f89a 3000 	ldrb.w	r3, [sl]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	f000 80a2 	beq.w	800acae <_vfiprintf_r+0x20e>
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab74:	f10a 0a01 	add.w	sl, sl, #1
 800ab78:	9304      	str	r3, [sp, #16]
 800ab7a:	9307      	str	r3, [sp, #28]
 800ab7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab80:	931a      	str	r3, [sp, #104]	; 0x68
 800ab82:	4654      	mov	r4, sl
 800ab84:	2205      	movs	r2, #5
 800ab86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab8a:	4858      	ldr	r0, [pc, #352]	; (800acec <_vfiprintf_r+0x24c>)
 800ab8c:	f7f5 fb28 	bl	80001e0 <memchr>
 800ab90:	9a04      	ldr	r2, [sp, #16]
 800ab92:	b9d8      	cbnz	r0, 800abcc <_vfiprintf_r+0x12c>
 800ab94:	06d1      	lsls	r1, r2, #27
 800ab96:	bf44      	itt	mi
 800ab98:	2320      	movmi	r3, #32
 800ab9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab9e:	0713      	lsls	r3, r2, #28
 800aba0:	bf44      	itt	mi
 800aba2:	232b      	movmi	r3, #43	; 0x2b
 800aba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aba8:	f89a 3000 	ldrb.w	r3, [sl]
 800abac:	2b2a      	cmp	r3, #42	; 0x2a
 800abae:	d015      	beq.n	800abdc <_vfiprintf_r+0x13c>
 800abb0:	9a07      	ldr	r2, [sp, #28]
 800abb2:	4654      	mov	r4, sl
 800abb4:	2000      	movs	r0, #0
 800abb6:	f04f 0c0a 	mov.w	ip, #10
 800abba:	4621      	mov	r1, r4
 800abbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abc0:	3b30      	subs	r3, #48	; 0x30
 800abc2:	2b09      	cmp	r3, #9
 800abc4:	d94e      	bls.n	800ac64 <_vfiprintf_r+0x1c4>
 800abc6:	b1b0      	cbz	r0, 800abf6 <_vfiprintf_r+0x156>
 800abc8:	9207      	str	r2, [sp, #28]
 800abca:	e014      	b.n	800abf6 <_vfiprintf_r+0x156>
 800abcc:	eba0 0308 	sub.w	r3, r0, r8
 800abd0:	fa09 f303 	lsl.w	r3, r9, r3
 800abd4:	4313      	orrs	r3, r2
 800abd6:	9304      	str	r3, [sp, #16]
 800abd8:	46a2      	mov	sl, r4
 800abda:	e7d2      	b.n	800ab82 <_vfiprintf_r+0xe2>
 800abdc:	9b03      	ldr	r3, [sp, #12]
 800abde:	1d19      	adds	r1, r3, #4
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	9103      	str	r1, [sp, #12]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	bfbb      	ittet	lt
 800abe8:	425b      	neglt	r3, r3
 800abea:	f042 0202 	orrlt.w	r2, r2, #2
 800abee:	9307      	strge	r3, [sp, #28]
 800abf0:	9307      	strlt	r3, [sp, #28]
 800abf2:	bfb8      	it	lt
 800abf4:	9204      	strlt	r2, [sp, #16]
 800abf6:	7823      	ldrb	r3, [r4, #0]
 800abf8:	2b2e      	cmp	r3, #46	; 0x2e
 800abfa:	d10c      	bne.n	800ac16 <_vfiprintf_r+0x176>
 800abfc:	7863      	ldrb	r3, [r4, #1]
 800abfe:	2b2a      	cmp	r3, #42	; 0x2a
 800ac00:	d135      	bne.n	800ac6e <_vfiprintf_r+0x1ce>
 800ac02:	9b03      	ldr	r3, [sp, #12]
 800ac04:	1d1a      	adds	r2, r3, #4
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	9203      	str	r2, [sp, #12]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	bfb8      	it	lt
 800ac0e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ac12:	3402      	adds	r4, #2
 800ac14:	9305      	str	r3, [sp, #20]
 800ac16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800acfc <_vfiprintf_r+0x25c>
 800ac1a:	7821      	ldrb	r1, [r4, #0]
 800ac1c:	2203      	movs	r2, #3
 800ac1e:	4650      	mov	r0, sl
 800ac20:	f7f5 fade 	bl	80001e0 <memchr>
 800ac24:	b140      	cbz	r0, 800ac38 <_vfiprintf_r+0x198>
 800ac26:	2340      	movs	r3, #64	; 0x40
 800ac28:	eba0 000a 	sub.w	r0, r0, sl
 800ac2c:	fa03 f000 	lsl.w	r0, r3, r0
 800ac30:	9b04      	ldr	r3, [sp, #16]
 800ac32:	4303      	orrs	r3, r0
 800ac34:	3401      	adds	r4, #1
 800ac36:	9304      	str	r3, [sp, #16]
 800ac38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac3c:	482c      	ldr	r0, [pc, #176]	; (800acf0 <_vfiprintf_r+0x250>)
 800ac3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac42:	2206      	movs	r2, #6
 800ac44:	f7f5 facc 	bl	80001e0 <memchr>
 800ac48:	2800      	cmp	r0, #0
 800ac4a:	d03f      	beq.n	800accc <_vfiprintf_r+0x22c>
 800ac4c:	4b29      	ldr	r3, [pc, #164]	; (800acf4 <_vfiprintf_r+0x254>)
 800ac4e:	bb1b      	cbnz	r3, 800ac98 <_vfiprintf_r+0x1f8>
 800ac50:	9b03      	ldr	r3, [sp, #12]
 800ac52:	3307      	adds	r3, #7
 800ac54:	f023 0307 	bic.w	r3, r3, #7
 800ac58:	3308      	adds	r3, #8
 800ac5a:	9303      	str	r3, [sp, #12]
 800ac5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac5e:	443b      	add	r3, r7
 800ac60:	9309      	str	r3, [sp, #36]	; 0x24
 800ac62:	e767      	b.n	800ab34 <_vfiprintf_r+0x94>
 800ac64:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac68:	460c      	mov	r4, r1
 800ac6a:	2001      	movs	r0, #1
 800ac6c:	e7a5      	b.n	800abba <_vfiprintf_r+0x11a>
 800ac6e:	2300      	movs	r3, #0
 800ac70:	3401      	adds	r4, #1
 800ac72:	9305      	str	r3, [sp, #20]
 800ac74:	4619      	mov	r1, r3
 800ac76:	f04f 0c0a 	mov.w	ip, #10
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac80:	3a30      	subs	r2, #48	; 0x30
 800ac82:	2a09      	cmp	r2, #9
 800ac84:	d903      	bls.n	800ac8e <_vfiprintf_r+0x1ee>
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d0c5      	beq.n	800ac16 <_vfiprintf_r+0x176>
 800ac8a:	9105      	str	r1, [sp, #20]
 800ac8c:	e7c3      	b.n	800ac16 <_vfiprintf_r+0x176>
 800ac8e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac92:	4604      	mov	r4, r0
 800ac94:	2301      	movs	r3, #1
 800ac96:	e7f0      	b.n	800ac7a <_vfiprintf_r+0x1da>
 800ac98:	ab03      	add	r3, sp, #12
 800ac9a:	9300      	str	r3, [sp, #0]
 800ac9c:	462a      	mov	r2, r5
 800ac9e:	4b16      	ldr	r3, [pc, #88]	; (800acf8 <_vfiprintf_r+0x258>)
 800aca0:	a904      	add	r1, sp, #16
 800aca2:	4630      	mov	r0, r6
 800aca4:	f7fb ff7c 	bl	8006ba0 <_printf_float>
 800aca8:	4607      	mov	r7, r0
 800acaa:	1c78      	adds	r0, r7, #1
 800acac:	d1d6      	bne.n	800ac5c <_vfiprintf_r+0x1bc>
 800acae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acb0:	07d9      	lsls	r1, r3, #31
 800acb2:	d405      	bmi.n	800acc0 <_vfiprintf_r+0x220>
 800acb4:	89ab      	ldrh	r3, [r5, #12]
 800acb6:	059a      	lsls	r2, r3, #22
 800acb8:	d402      	bmi.n	800acc0 <_vfiprintf_r+0x220>
 800acba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acbc:	f7fb fdd0 	bl	8006860 <__retarget_lock_release_recursive>
 800acc0:	89ab      	ldrh	r3, [r5, #12]
 800acc2:	065b      	lsls	r3, r3, #25
 800acc4:	f53f af12 	bmi.w	800aaec <_vfiprintf_r+0x4c>
 800acc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800acca:	e711      	b.n	800aaf0 <_vfiprintf_r+0x50>
 800accc:	ab03      	add	r3, sp, #12
 800acce:	9300      	str	r3, [sp, #0]
 800acd0:	462a      	mov	r2, r5
 800acd2:	4b09      	ldr	r3, [pc, #36]	; (800acf8 <_vfiprintf_r+0x258>)
 800acd4:	a904      	add	r1, sp, #16
 800acd6:	4630      	mov	r0, r6
 800acd8:	f7fc fa06 	bl	80070e8 <_printf_i>
 800acdc:	e7e4      	b.n	800aca8 <_vfiprintf_r+0x208>
 800acde:	bf00      	nop
 800ace0:	0800b200 	.word	0x0800b200
 800ace4:	0800b220 	.word	0x0800b220
 800ace8:	0800b1e0 	.word	0x0800b1e0
 800acec:	0800b634 	.word	0x0800b634
 800acf0:	0800b63e 	.word	0x0800b63e
 800acf4:	08006ba1 	.word	0x08006ba1
 800acf8:	0800aa7d 	.word	0x0800aa7d
 800acfc:	0800b63a 	.word	0x0800b63a

0800ad00 <__swbuf_r>:
 800ad00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad02:	460e      	mov	r6, r1
 800ad04:	4614      	mov	r4, r2
 800ad06:	4605      	mov	r5, r0
 800ad08:	b118      	cbz	r0, 800ad12 <__swbuf_r+0x12>
 800ad0a:	6983      	ldr	r3, [r0, #24]
 800ad0c:	b90b      	cbnz	r3, 800ad12 <__swbuf_r+0x12>
 800ad0e:	f7fb fce3 	bl	80066d8 <__sinit>
 800ad12:	4b21      	ldr	r3, [pc, #132]	; (800ad98 <__swbuf_r+0x98>)
 800ad14:	429c      	cmp	r4, r3
 800ad16:	d12b      	bne.n	800ad70 <__swbuf_r+0x70>
 800ad18:	686c      	ldr	r4, [r5, #4]
 800ad1a:	69a3      	ldr	r3, [r4, #24]
 800ad1c:	60a3      	str	r3, [r4, #8]
 800ad1e:	89a3      	ldrh	r3, [r4, #12]
 800ad20:	071a      	lsls	r2, r3, #28
 800ad22:	d52f      	bpl.n	800ad84 <__swbuf_r+0x84>
 800ad24:	6923      	ldr	r3, [r4, #16]
 800ad26:	b36b      	cbz	r3, 800ad84 <__swbuf_r+0x84>
 800ad28:	6923      	ldr	r3, [r4, #16]
 800ad2a:	6820      	ldr	r0, [r4, #0]
 800ad2c:	1ac0      	subs	r0, r0, r3
 800ad2e:	6963      	ldr	r3, [r4, #20]
 800ad30:	b2f6      	uxtb	r6, r6
 800ad32:	4283      	cmp	r3, r0
 800ad34:	4637      	mov	r7, r6
 800ad36:	dc04      	bgt.n	800ad42 <__swbuf_r+0x42>
 800ad38:	4621      	mov	r1, r4
 800ad3a:	4628      	mov	r0, r5
 800ad3c:	f7fe fbd4 	bl	80094e8 <_fflush_r>
 800ad40:	bb30      	cbnz	r0, 800ad90 <__swbuf_r+0x90>
 800ad42:	68a3      	ldr	r3, [r4, #8]
 800ad44:	3b01      	subs	r3, #1
 800ad46:	60a3      	str	r3, [r4, #8]
 800ad48:	6823      	ldr	r3, [r4, #0]
 800ad4a:	1c5a      	adds	r2, r3, #1
 800ad4c:	6022      	str	r2, [r4, #0]
 800ad4e:	701e      	strb	r6, [r3, #0]
 800ad50:	6963      	ldr	r3, [r4, #20]
 800ad52:	3001      	adds	r0, #1
 800ad54:	4283      	cmp	r3, r0
 800ad56:	d004      	beq.n	800ad62 <__swbuf_r+0x62>
 800ad58:	89a3      	ldrh	r3, [r4, #12]
 800ad5a:	07db      	lsls	r3, r3, #31
 800ad5c:	d506      	bpl.n	800ad6c <__swbuf_r+0x6c>
 800ad5e:	2e0a      	cmp	r6, #10
 800ad60:	d104      	bne.n	800ad6c <__swbuf_r+0x6c>
 800ad62:	4621      	mov	r1, r4
 800ad64:	4628      	mov	r0, r5
 800ad66:	f7fe fbbf 	bl	80094e8 <_fflush_r>
 800ad6a:	b988      	cbnz	r0, 800ad90 <__swbuf_r+0x90>
 800ad6c:	4638      	mov	r0, r7
 800ad6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad70:	4b0a      	ldr	r3, [pc, #40]	; (800ad9c <__swbuf_r+0x9c>)
 800ad72:	429c      	cmp	r4, r3
 800ad74:	d101      	bne.n	800ad7a <__swbuf_r+0x7a>
 800ad76:	68ac      	ldr	r4, [r5, #8]
 800ad78:	e7cf      	b.n	800ad1a <__swbuf_r+0x1a>
 800ad7a:	4b09      	ldr	r3, [pc, #36]	; (800ada0 <__swbuf_r+0xa0>)
 800ad7c:	429c      	cmp	r4, r3
 800ad7e:	bf08      	it	eq
 800ad80:	68ec      	ldreq	r4, [r5, #12]
 800ad82:	e7ca      	b.n	800ad1a <__swbuf_r+0x1a>
 800ad84:	4621      	mov	r1, r4
 800ad86:	4628      	mov	r0, r5
 800ad88:	f000 f80c 	bl	800ada4 <__swsetup_r>
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	d0cb      	beq.n	800ad28 <__swbuf_r+0x28>
 800ad90:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ad94:	e7ea      	b.n	800ad6c <__swbuf_r+0x6c>
 800ad96:	bf00      	nop
 800ad98:	0800b200 	.word	0x0800b200
 800ad9c:	0800b220 	.word	0x0800b220
 800ada0:	0800b1e0 	.word	0x0800b1e0

0800ada4 <__swsetup_r>:
 800ada4:	4b32      	ldr	r3, [pc, #200]	; (800ae70 <__swsetup_r+0xcc>)
 800ada6:	b570      	push	{r4, r5, r6, lr}
 800ada8:	681d      	ldr	r5, [r3, #0]
 800adaa:	4606      	mov	r6, r0
 800adac:	460c      	mov	r4, r1
 800adae:	b125      	cbz	r5, 800adba <__swsetup_r+0x16>
 800adb0:	69ab      	ldr	r3, [r5, #24]
 800adb2:	b913      	cbnz	r3, 800adba <__swsetup_r+0x16>
 800adb4:	4628      	mov	r0, r5
 800adb6:	f7fb fc8f 	bl	80066d8 <__sinit>
 800adba:	4b2e      	ldr	r3, [pc, #184]	; (800ae74 <__swsetup_r+0xd0>)
 800adbc:	429c      	cmp	r4, r3
 800adbe:	d10f      	bne.n	800ade0 <__swsetup_r+0x3c>
 800adc0:	686c      	ldr	r4, [r5, #4]
 800adc2:	89a3      	ldrh	r3, [r4, #12]
 800adc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800adc8:	0719      	lsls	r1, r3, #28
 800adca:	d42c      	bmi.n	800ae26 <__swsetup_r+0x82>
 800adcc:	06dd      	lsls	r5, r3, #27
 800adce:	d411      	bmi.n	800adf4 <__swsetup_r+0x50>
 800add0:	2309      	movs	r3, #9
 800add2:	6033      	str	r3, [r6, #0]
 800add4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800add8:	81a3      	strh	r3, [r4, #12]
 800adda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800adde:	e03e      	b.n	800ae5e <__swsetup_r+0xba>
 800ade0:	4b25      	ldr	r3, [pc, #148]	; (800ae78 <__swsetup_r+0xd4>)
 800ade2:	429c      	cmp	r4, r3
 800ade4:	d101      	bne.n	800adea <__swsetup_r+0x46>
 800ade6:	68ac      	ldr	r4, [r5, #8]
 800ade8:	e7eb      	b.n	800adc2 <__swsetup_r+0x1e>
 800adea:	4b24      	ldr	r3, [pc, #144]	; (800ae7c <__swsetup_r+0xd8>)
 800adec:	429c      	cmp	r4, r3
 800adee:	bf08      	it	eq
 800adf0:	68ec      	ldreq	r4, [r5, #12]
 800adf2:	e7e6      	b.n	800adc2 <__swsetup_r+0x1e>
 800adf4:	0758      	lsls	r0, r3, #29
 800adf6:	d512      	bpl.n	800ae1e <__swsetup_r+0x7a>
 800adf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adfa:	b141      	cbz	r1, 800ae0e <__swsetup_r+0x6a>
 800adfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae00:	4299      	cmp	r1, r3
 800ae02:	d002      	beq.n	800ae0a <__swsetup_r+0x66>
 800ae04:	4630      	mov	r0, r6
 800ae06:	f7fb fd4b 	bl	80068a0 <_free_r>
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	6363      	str	r3, [r4, #52]	; 0x34
 800ae0e:	89a3      	ldrh	r3, [r4, #12]
 800ae10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ae14:	81a3      	strh	r3, [r4, #12]
 800ae16:	2300      	movs	r3, #0
 800ae18:	6063      	str	r3, [r4, #4]
 800ae1a:	6923      	ldr	r3, [r4, #16]
 800ae1c:	6023      	str	r3, [r4, #0]
 800ae1e:	89a3      	ldrh	r3, [r4, #12]
 800ae20:	f043 0308 	orr.w	r3, r3, #8
 800ae24:	81a3      	strh	r3, [r4, #12]
 800ae26:	6923      	ldr	r3, [r4, #16]
 800ae28:	b94b      	cbnz	r3, 800ae3e <__swsetup_r+0x9a>
 800ae2a:	89a3      	ldrh	r3, [r4, #12]
 800ae2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ae30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae34:	d003      	beq.n	800ae3e <__swsetup_r+0x9a>
 800ae36:	4621      	mov	r1, r4
 800ae38:	4630      	mov	r0, r6
 800ae3a:	f000 f84d 	bl	800aed8 <__smakebuf_r>
 800ae3e:	89a0      	ldrh	r0, [r4, #12]
 800ae40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae44:	f010 0301 	ands.w	r3, r0, #1
 800ae48:	d00a      	beq.n	800ae60 <__swsetup_r+0xbc>
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	60a3      	str	r3, [r4, #8]
 800ae4e:	6963      	ldr	r3, [r4, #20]
 800ae50:	425b      	negs	r3, r3
 800ae52:	61a3      	str	r3, [r4, #24]
 800ae54:	6923      	ldr	r3, [r4, #16]
 800ae56:	b943      	cbnz	r3, 800ae6a <__swsetup_r+0xc6>
 800ae58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ae5c:	d1ba      	bne.n	800add4 <__swsetup_r+0x30>
 800ae5e:	bd70      	pop	{r4, r5, r6, pc}
 800ae60:	0781      	lsls	r1, r0, #30
 800ae62:	bf58      	it	pl
 800ae64:	6963      	ldrpl	r3, [r4, #20]
 800ae66:	60a3      	str	r3, [r4, #8]
 800ae68:	e7f4      	b.n	800ae54 <__swsetup_r+0xb0>
 800ae6a:	2000      	movs	r0, #0
 800ae6c:	e7f7      	b.n	800ae5e <__swsetup_r+0xba>
 800ae6e:	bf00      	nop
 800ae70:	20000010 	.word	0x20000010
 800ae74:	0800b200 	.word	0x0800b200
 800ae78:	0800b220 	.word	0x0800b220
 800ae7c:	0800b1e0 	.word	0x0800b1e0

0800ae80 <abort>:
 800ae80:	b508      	push	{r3, lr}
 800ae82:	2006      	movs	r0, #6
 800ae84:	f000 f898 	bl	800afb8 <raise>
 800ae88:	2001      	movs	r0, #1
 800ae8a:	f7f6 fb93 	bl	80015b4 <_exit>

0800ae8e <__swhatbuf_r>:
 800ae8e:	b570      	push	{r4, r5, r6, lr}
 800ae90:	460e      	mov	r6, r1
 800ae92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae96:	2900      	cmp	r1, #0
 800ae98:	b096      	sub	sp, #88	; 0x58
 800ae9a:	4614      	mov	r4, r2
 800ae9c:	461d      	mov	r5, r3
 800ae9e:	da08      	bge.n	800aeb2 <__swhatbuf_r+0x24>
 800aea0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aea4:	2200      	movs	r2, #0
 800aea6:	602a      	str	r2, [r5, #0]
 800aea8:	061a      	lsls	r2, r3, #24
 800aeaa:	d410      	bmi.n	800aece <__swhatbuf_r+0x40>
 800aeac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aeb0:	e00e      	b.n	800aed0 <__swhatbuf_r+0x42>
 800aeb2:	466a      	mov	r2, sp
 800aeb4:	f000 f89c 	bl	800aff0 <_fstat_r>
 800aeb8:	2800      	cmp	r0, #0
 800aeba:	dbf1      	blt.n	800aea0 <__swhatbuf_r+0x12>
 800aebc:	9a01      	ldr	r2, [sp, #4]
 800aebe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aec2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aec6:	425a      	negs	r2, r3
 800aec8:	415a      	adcs	r2, r3
 800aeca:	602a      	str	r2, [r5, #0]
 800aecc:	e7ee      	b.n	800aeac <__swhatbuf_r+0x1e>
 800aece:	2340      	movs	r3, #64	; 0x40
 800aed0:	2000      	movs	r0, #0
 800aed2:	6023      	str	r3, [r4, #0]
 800aed4:	b016      	add	sp, #88	; 0x58
 800aed6:	bd70      	pop	{r4, r5, r6, pc}

0800aed8 <__smakebuf_r>:
 800aed8:	898b      	ldrh	r3, [r1, #12]
 800aeda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aedc:	079d      	lsls	r5, r3, #30
 800aede:	4606      	mov	r6, r0
 800aee0:	460c      	mov	r4, r1
 800aee2:	d507      	bpl.n	800aef4 <__smakebuf_r+0x1c>
 800aee4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aee8:	6023      	str	r3, [r4, #0]
 800aeea:	6123      	str	r3, [r4, #16]
 800aeec:	2301      	movs	r3, #1
 800aeee:	6163      	str	r3, [r4, #20]
 800aef0:	b002      	add	sp, #8
 800aef2:	bd70      	pop	{r4, r5, r6, pc}
 800aef4:	ab01      	add	r3, sp, #4
 800aef6:	466a      	mov	r2, sp
 800aef8:	f7ff ffc9 	bl	800ae8e <__swhatbuf_r>
 800aefc:	9900      	ldr	r1, [sp, #0]
 800aefe:	4605      	mov	r5, r0
 800af00:	4630      	mov	r0, r6
 800af02:	f7fb fd39 	bl	8006978 <_malloc_r>
 800af06:	b948      	cbnz	r0, 800af1c <__smakebuf_r+0x44>
 800af08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af0c:	059a      	lsls	r2, r3, #22
 800af0e:	d4ef      	bmi.n	800aef0 <__smakebuf_r+0x18>
 800af10:	f023 0303 	bic.w	r3, r3, #3
 800af14:	f043 0302 	orr.w	r3, r3, #2
 800af18:	81a3      	strh	r3, [r4, #12]
 800af1a:	e7e3      	b.n	800aee4 <__smakebuf_r+0xc>
 800af1c:	4b0d      	ldr	r3, [pc, #52]	; (800af54 <__smakebuf_r+0x7c>)
 800af1e:	62b3      	str	r3, [r6, #40]	; 0x28
 800af20:	89a3      	ldrh	r3, [r4, #12]
 800af22:	6020      	str	r0, [r4, #0]
 800af24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af28:	81a3      	strh	r3, [r4, #12]
 800af2a:	9b00      	ldr	r3, [sp, #0]
 800af2c:	6163      	str	r3, [r4, #20]
 800af2e:	9b01      	ldr	r3, [sp, #4]
 800af30:	6120      	str	r0, [r4, #16]
 800af32:	b15b      	cbz	r3, 800af4c <__smakebuf_r+0x74>
 800af34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af38:	4630      	mov	r0, r6
 800af3a:	f000 f86b 	bl	800b014 <_isatty_r>
 800af3e:	b128      	cbz	r0, 800af4c <__smakebuf_r+0x74>
 800af40:	89a3      	ldrh	r3, [r4, #12]
 800af42:	f023 0303 	bic.w	r3, r3, #3
 800af46:	f043 0301 	orr.w	r3, r3, #1
 800af4a:	81a3      	strh	r3, [r4, #12]
 800af4c:	89a0      	ldrh	r0, [r4, #12]
 800af4e:	4305      	orrs	r5, r0
 800af50:	81a5      	strh	r5, [r4, #12]
 800af52:	e7cd      	b.n	800aef0 <__smakebuf_r+0x18>
 800af54:	08006671 	.word	0x08006671

0800af58 <_malloc_usable_size_r>:
 800af58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af5c:	1f18      	subs	r0, r3, #4
 800af5e:	2b00      	cmp	r3, #0
 800af60:	bfbc      	itt	lt
 800af62:	580b      	ldrlt	r3, [r1, r0]
 800af64:	18c0      	addlt	r0, r0, r3
 800af66:	4770      	bx	lr

0800af68 <_raise_r>:
 800af68:	291f      	cmp	r1, #31
 800af6a:	b538      	push	{r3, r4, r5, lr}
 800af6c:	4604      	mov	r4, r0
 800af6e:	460d      	mov	r5, r1
 800af70:	d904      	bls.n	800af7c <_raise_r+0x14>
 800af72:	2316      	movs	r3, #22
 800af74:	6003      	str	r3, [r0, #0]
 800af76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af7a:	bd38      	pop	{r3, r4, r5, pc}
 800af7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800af7e:	b112      	cbz	r2, 800af86 <_raise_r+0x1e>
 800af80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af84:	b94b      	cbnz	r3, 800af9a <_raise_r+0x32>
 800af86:	4620      	mov	r0, r4
 800af88:	f000 f830 	bl	800afec <_getpid_r>
 800af8c:	462a      	mov	r2, r5
 800af8e:	4601      	mov	r1, r0
 800af90:	4620      	mov	r0, r4
 800af92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af96:	f000 b817 	b.w	800afc8 <_kill_r>
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d00a      	beq.n	800afb4 <_raise_r+0x4c>
 800af9e:	1c59      	adds	r1, r3, #1
 800afa0:	d103      	bne.n	800afaa <_raise_r+0x42>
 800afa2:	2316      	movs	r3, #22
 800afa4:	6003      	str	r3, [r0, #0]
 800afa6:	2001      	movs	r0, #1
 800afa8:	e7e7      	b.n	800af7a <_raise_r+0x12>
 800afaa:	2400      	movs	r4, #0
 800afac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800afb0:	4628      	mov	r0, r5
 800afb2:	4798      	blx	r3
 800afb4:	2000      	movs	r0, #0
 800afb6:	e7e0      	b.n	800af7a <_raise_r+0x12>

0800afb8 <raise>:
 800afb8:	4b02      	ldr	r3, [pc, #8]	; (800afc4 <raise+0xc>)
 800afba:	4601      	mov	r1, r0
 800afbc:	6818      	ldr	r0, [r3, #0]
 800afbe:	f7ff bfd3 	b.w	800af68 <_raise_r>
 800afc2:	bf00      	nop
 800afc4:	20000010 	.word	0x20000010

0800afc8 <_kill_r>:
 800afc8:	b538      	push	{r3, r4, r5, lr}
 800afca:	4d07      	ldr	r5, [pc, #28]	; (800afe8 <_kill_r+0x20>)
 800afcc:	2300      	movs	r3, #0
 800afce:	4604      	mov	r4, r0
 800afd0:	4608      	mov	r0, r1
 800afd2:	4611      	mov	r1, r2
 800afd4:	602b      	str	r3, [r5, #0]
 800afd6:	f7f6 fadd 	bl	8001594 <_kill>
 800afda:	1c43      	adds	r3, r0, #1
 800afdc:	d102      	bne.n	800afe4 <_kill_r+0x1c>
 800afde:	682b      	ldr	r3, [r5, #0]
 800afe0:	b103      	cbz	r3, 800afe4 <_kill_r+0x1c>
 800afe2:	6023      	str	r3, [r4, #0]
 800afe4:	bd38      	pop	{r3, r4, r5, pc}
 800afe6:	bf00      	nop
 800afe8:	200047fc 	.word	0x200047fc

0800afec <_getpid_r>:
 800afec:	f7f6 baca 	b.w	8001584 <_getpid>

0800aff0 <_fstat_r>:
 800aff0:	b538      	push	{r3, r4, r5, lr}
 800aff2:	4d07      	ldr	r5, [pc, #28]	; (800b010 <_fstat_r+0x20>)
 800aff4:	2300      	movs	r3, #0
 800aff6:	4604      	mov	r4, r0
 800aff8:	4608      	mov	r0, r1
 800affa:	4611      	mov	r1, r2
 800affc:	602b      	str	r3, [r5, #0]
 800affe:	f7f6 fb28 	bl	8001652 <_fstat>
 800b002:	1c43      	adds	r3, r0, #1
 800b004:	d102      	bne.n	800b00c <_fstat_r+0x1c>
 800b006:	682b      	ldr	r3, [r5, #0]
 800b008:	b103      	cbz	r3, 800b00c <_fstat_r+0x1c>
 800b00a:	6023      	str	r3, [r4, #0]
 800b00c:	bd38      	pop	{r3, r4, r5, pc}
 800b00e:	bf00      	nop
 800b010:	200047fc 	.word	0x200047fc

0800b014 <_isatty_r>:
 800b014:	b538      	push	{r3, r4, r5, lr}
 800b016:	4d06      	ldr	r5, [pc, #24]	; (800b030 <_isatty_r+0x1c>)
 800b018:	2300      	movs	r3, #0
 800b01a:	4604      	mov	r4, r0
 800b01c:	4608      	mov	r0, r1
 800b01e:	602b      	str	r3, [r5, #0]
 800b020:	f7f6 fb27 	bl	8001672 <_isatty>
 800b024:	1c43      	adds	r3, r0, #1
 800b026:	d102      	bne.n	800b02e <_isatty_r+0x1a>
 800b028:	682b      	ldr	r3, [r5, #0]
 800b02a:	b103      	cbz	r3, 800b02e <_isatty_r+0x1a>
 800b02c:	6023      	str	r3, [r4, #0]
 800b02e:	bd38      	pop	{r3, r4, r5, pc}
 800b030:	200047fc 	.word	0x200047fc

0800b034 <_init>:
 800b034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b036:	bf00      	nop
 800b038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b03a:	bc08      	pop	{r3}
 800b03c:	469e      	mov	lr, r3
 800b03e:	4770      	bx	lr

0800b040 <_fini>:
 800b040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b042:	bf00      	nop
 800b044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b046:	bc08      	pop	{r3}
 800b048:	469e      	mov	lr, r3
 800b04a:	4770      	bx	lr
